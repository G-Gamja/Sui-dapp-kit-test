import {
  Anchor,
  Anchor2,
  Arrow,
  Arrow2,
  CheckboxItem,
  CheckboxItem2,
  Close,
  Combination_default,
  Content,
  Content2,
  Content23 as Content22,
  Content24 as Content23,
  Description,
  DirectionProvider,
  DismissableLayer,
  FocusScope,
  Group,
  Group2,
  Item,
  Item2,
  Item22,
  ItemIndicator,
  ItemIndicator2,
  Label,
  Label2,
  Overlay,
  Portal,
  Portal2,
  Portal23 as Portal22,
  Portal3,
  Presence,
  Primitive,
  RadioGroup,
  RadioGroup2,
  RadioItem,
  RadioItem2,
  Root,
  Root2,
  Root22,
  Root3,
  Root34 as Root32,
  Separator,
  Separator2,
  Slot,
  Slottable,
  Sub,
  Sub2,
  SubContent,
  SubContent2,
  SubTrigger,
  SubTrigger2,
  Title,
  Trigger,
  Trigger2,
  WarningProvider,
  composeEventHandlers,
  createCollection,
  createContextScope,
  createDialogScope,
  createMenuScope,
  createPopperScope,
  createRovingFocusGroupScope,
  hideOthers,
  useCallbackRef,
  useComposedRefs,
  useControllableState,
  useDirection,
  useFocusGuards,
  useId,
  useLayoutEffect2,
  useSize
} from "./chunk-TGEYWKP4.js";
import {
  require_jsx_runtime
} from "./chunk-BJDBEMZL.js";
import {
  require_react_dom
} from "./chunk-MUFYZ232.js";
import {
  require_react
} from "./chunk-3OF2YHWX.js";
import {
  __commonJS,
  __toESM
} from "./chunk-IYYBMQRV.js";

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames43() {
        var classes = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames43.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames43.default = classNames43;
        module.exports = classNames43;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames43;
        });
      } else {
        window.classNames = classNames43;
      }
    })();
  }
});

// node_modules/@radix-ui/themes/dist/esm/theme.js
var React3 = __toESM(require_react());
var import_classnames = __toESM(require_classnames());

// node_modules/@radix-ui/react-tooltip/dist/index.mjs
var React2 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-visually-hidden/dist/index.mjs
var React = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var NAME = "VisuallyHidden";
var VisuallyHidden = React.forwardRef(
  (props, forwardedRef) => {
    return (0, import_jsx_runtime.jsx)(
      Primitive.span,
      {
        ...props,
        ref: forwardedRef,
        style: {
          // See: https://github.com/twbs/bootstrap/blob/master/scss/mixins/_screen-reader.scss
          position: "absolute",
          border: 0,
          width: 1,
          height: 1,
          padding: 0,
          margin: -1,
          overflow: "hidden",
          clip: "rect(0, 0, 0, 0)",
          whiteSpace: "nowrap",
          wordWrap: "normal",
          ...props.style
        }
      }
    );
  }
);
VisuallyHidden.displayName = NAME;
var Root4 = VisuallyHidden;

// node_modules/@radix-ui/react-tooltip/dist/index.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var [createTooltipContext, createTooltipScope] = createContextScope("Tooltip", [
  createPopperScope
]);
var usePopperScope = createPopperScope();
var PROVIDER_NAME = "TooltipProvider";
var DEFAULT_DELAY_DURATION = 700;
var TOOLTIP_OPEN = "tooltip.open";
var [TooltipProviderContextProvider, useTooltipProviderContext] = createTooltipContext(PROVIDER_NAME);
var TooltipProvider = (props) => {
  const {
    __scopeTooltip,
    delayDuration = DEFAULT_DELAY_DURATION,
    skipDelayDuration = 300,
    disableHoverableContent = false,
    children
  } = props;
  const [isOpenDelayed, setIsOpenDelayed] = React2.useState(true);
  const isPointerInTransitRef = React2.useRef(false);
  const skipDelayTimerRef = React2.useRef(0);
  React2.useEffect(() => {
    const skipDelayTimer = skipDelayTimerRef.current;
    return () => window.clearTimeout(skipDelayTimer);
  }, []);
  return (0, import_jsx_runtime2.jsx)(
    TooltipProviderContextProvider,
    {
      scope: __scopeTooltip,
      isOpenDelayed,
      delayDuration,
      onOpen: React2.useCallback(() => {
        window.clearTimeout(skipDelayTimerRef.current);
        setIsOpenDelayed(false);
      }, []),
      onClose: React2.useCallback(() => {
        window.clearTimeout(skipDelayTimerRef.current);
        skipDelayTimerRef.current = window.setTimeout(
          () => setIsOpenDelayed(true),
          skipDelayDuration
        );
      }, [skipDelayDuration]),
      isPointerInTransitRef,
      onPointerInTransitChange: React2.useCallback((inTransit) => {
        isPointerInTransitRef.current = inTransit;
      }, []),
      disableHoverableContent,
      children
    }
  );
};
TooltipProvider.displayName = PROVIDER_NAME;
var TOOLTIP_NAME = "Tooltip";
var [TooltipContextProvider, useTooltipContext] = createTooltipContext(TOOLTIP_NAME);
var Tooltip = (props) => {
  const {
    __scopeTooltip,
    children,
    open: openProp,
    defaultOpen = false,
    onOpenChange,
    disableHoverableContent: disableHoverableContentProp,
    delayDuration: delayDurationProp
  } = props;
  const providerContext = useTooltipProviderContext(TOOLTIP_NAME, props.__scopeTooltip);
  const popperScope = usePopperScope(__scopeTooltip);
  const [trigger, setTrigger] = React2.useState(null);
  const contentId = useId();
  const openTimerRef = React2.useRef(0);
  const disableHoverableContent = disableHoverableContentProp ?? providerContext.disableHoverableContent;
  const delayDuration = delayDurationProp ?? providerContext.delayDuration;
  const wasOpenDelayedRef = React2.useRef(false);
  const [open = false, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: (open2) => {
      if (open2) {
        providerContext.onOpen();
        document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));
      } else {
        providerContext.onClose();
      }
      onOpenChange == null ? void 0 : onOpenChange(open2);
    }
  });
  const stateAttribute = React2.useMemo(() => {
    return open ? wasOpenDelayedRef.current ? "delayed-open" : "instant-open" : "closed";
  }, [open]);
  const handleOpen = React2.useCallback(() => {
    window.clearTimeout(openTimerRef.current);
    wasOpenDelayedRef.current = false;
    setOpen(true);
  }, [setOpen]);
  const handleClose = React2.useCallback(() => {
    window.clearTimeout(openTimerRef.current);
    setOpen(false);
  }, [setOpen]);
  const handleDelayedOpen = React2.useCallback(() => {
    window.clearTimeout(openTimerRef.current);
    openTimerRef.current = window.setTimeout(() => {
      wasOpenDelayedRef.current = true;
      setOpen(true);
    }, delayDuration);
  }, [delayDuration, setOpen]);
  React2.useEffect(() => {
    return () => window.clearTimeout(openTimerRef.current);
  }, []);
  return (0, import_jsx_runtime2.jsx)(Root2, { ...popperScope, children: (0, import_jsx_runtime2.jsx)(
    TooltipContextProvider,
    {
      scope: __scopeTooltip,
      contentId,
      open,
      stateAttribute,
      trigger,
      onTriggerChange: setTrigger,
      onTriggerEnter: React2.useCallback(() => {
        if (providerContext.isOpenDelayed)
          handleDelayedOpen();
        else
          handleOpen();
      }, [providerContext.isOpenDelayed, handleDelayedOpen, handleOpen]),
      onTriggerLeave: React2.useCallback(() => {
        if (disableHoverableContent) {
          handleClose();
        } else {
          window.clearTimeout(openTimerRef.current);
        }
      }, [handleClose, disableHoverableContent]),
      onOpen: handleOpen,
      onClose: handleClose,
      disableHoverableContent,
      children
    }
  ) });
};
Tooltip.displayName = TOOLTIP_NAME;
var TRIGGER_NAME = "TooltipTrigger";
var TooltipTrigger = React2.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTooltip, ...triggerProps } = props;
    const context = useTooltipContext(TRIGGER_NAME, __scopeTooltip);
    const providerContext = useTooltipProviderContext(TRIGGER_NAME, __scopeTooltip);
    const popperScope = usePopperScope(__scopeTooltip);
    const ref = React2.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref, context.onTriggerChange);
    const isPointerDownRef = React2.useRef(false);
    const hasPointerMoveOpenedRef = React2.useRef(false);
    const handlePointerUp = React2.useCallback(() => isPointerDownRef.current = false, []);
    React2.useEffect(() => {
      return () => document.removeEventListener("pointerup", handlePointerUp);
    }, [handlePointerUp]);
    return (0, import_jsx_runtime2.jsx)(Anchor, { asChild: true, ...popperScope, children: (0, import_jsx_runtime2.jsx)(
      Primitive.button,
      {
        "aria-describedby": context.open ? context.contentId : void 0,
        "data-state": context.stateAttribute,
        ...triggerProps,
        ref: composedRefs,
        onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
          if (event.pointerType === "touch")
            return;
          if (!hasPointerMoveOpenedRef.current && !providerContext.isPointerInTransitRef.current) {
            context.onTriggerEnter();
            hasPointerMoveOpenedRef.current = true;
          }
        }),
        onPointerLeave: composeEventHandlers(props.onPointerLeave, () => {
          context.onTriggerLeave();
          hasPointerMoveOpenedRef.current = false;
        }),
        onPointerDown: composeEventHandlers(props.onPointerDown, () => {
          isPointerDownRef.current = true;
          document.addEventListener("pointerup", handlePointerUp, { once: true });
        }),
        onFocus: composeEventHandlers(props.onFocus, () => {
          if (!isPointerDownRef.current)
            context.onOpen();
        }),
        onBlur: composeEventHandlers(props.onBlur, context.onClose),
        onClick: composeEventHandlers(props.onClick, context.onClose)
      }
    ) });
  }
);
TooltipTrigger.displayName = TRIGGER_NAME;
var PORTAL_NAME = "TooltipPortal";
var [PortalProvider, usePortalContext] = createTooltipContext(PORTAL_NAME, {
  forceMount: void 0
});
var TooltipPortal = (props) => {
  const { __scopeTooltip, forceMount, children, container } = props;
  const context = useTooltipContext(PORTAL_NAME, __scopeTooltip);
  return (0, import_jsx_runtime2.jsx)(PortalProvider, { scope: __scopeTooltip, forceMount, children: (0, import_jsx_runtime2.jsx)(Presence, { present: forceMount || context.open, children: (0, import_jsx_runtime2.jsx)(Portal, { asChild: true, container, children }) }) });
};
TooltipPortal.displayName = PORTAL_NAME;
var CONTENT_NAME = "TooltipContent";
var TooltipContent = React2.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeTooltip);
    const { forceMount = portalContext.forceMount, side = "top", ...contentProps } = props;
    const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);
    return (0, import_jsx_runtime2.jsx)(Presence, { present: forceMount || context.open, children: context.disableHoverableContent ? (0, import_jsx_runtime2.jsx)(TooltipContentImpl, { side, ...contentProps, ref: forwardedRef }) : (0, import_jsx_runtime2.jsx)(TooltipContentHoverable, { side, ...contentProps, ref: forwardedRef }) });
  }
);
var TooltipContentHoverable = React2.forwardRef((props, forwardedRef) => {
  const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);
  const providerContext = useTooltipProviderContext(CONTENT_NAME, props.__scopeTooltip);
  const ref = React2.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const [pointerGraceArea, setPointerGraceArea] = React2.useState(null);
  const { trigger, onClose } = context;
  const content = ref.current;
  const { onPointerInTransitChange } = providerContext;
  const handleRemoveGraceArea = React2.useCallback(() => {
    setPointerGraceArea(null);
    onPointerInTransitChange(false);
  }, [onPointerInTransitChange]);
  const handleCreateGraceArea = React2.useCallback(
    (event, hoverTarget) => {
      const currentTarget = event.currentTarget;
      const exitPoint = { x: event.clientX, y: event.clientY };
      const exitSide = getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());
      const paddedExitPoints = getPaddedExitPoints(exitPoint, exitSide);
      const hoverTargetPoints = getPointsFromRect(hoverTarget.getBoundingClientRect());
      const graceArea = getHull([...paddedExitPoints, ...hoverTargetPoints]);
      setPointerGraceArea(graceArea);
      onPointerInTransitChange(true);
    },
    [onPointerInTransitChange]
  );
  React2.useEffect(() => {
    return () => handleRemoveGraceArea();
  }, [handleRemoveGraceArea]);
  React2.useEffect(() => {
    if (trigger && content) {
      const handleTriggerLeave = (event) => handleCreateGraceArea(event, content);
      const handleContentLeave = (event) => handleCreateGraceArea(event, trigger);
      trigger.addEventListener("pointerleave", handleTriggerLeave);
      content.addEventListener("pointerleave", handleContentLeave);
      return () => {
        trigger.removeEventListener("pointerleave", handleTriggerLeave);
        content.removeEventListener("pointerleave", handleContentLeave);
      };
    }
  }, [trigger, content, handleCreateGraceArea, handleRemoveGraceArea]);
  React2.useEffect(() => {
    if (pointerGraceArea) {
      const handleTrackPointerGrace = (event) => {
        const target = event.target;
        const pointerPosition = { x: event.clientX, y: event.clientY };
        const hasEnteredTarget = (trigger == null ? void 0 : trigger.contains(target)) || (content == null ? void 0 : content.contains(target));
        const isPointerOutsideGraceArea = !isPointInPolygon(pointerPosition, pointerGraceArea);
        if (hasEnteredTarget) {
          handleRemoveGraceArea();
        } else if (isPointerOutsideGraceArea) {
          handleRemoveGraceArea();
          onClose();
        }
      };
      document.addEventListener("pointermove", handleTrackPointerGrace);
      return () => document.removeEventListener("pointermove", handleTrackPointerGrace);
    }
  }, [trigger, content, pointerGraceArea, onClose, handleRemoveGraceArea]);
  return (0, import_jsx_runtime2.jsx)(TooltipContentImpl, { ...props, ref: composedRefs });
});
var [VisuallyHiddenContentContextProvider, useVisuallyHiddenContentContext] = createTooltipContext(TOOLTIP_NAME, { isInside: false });
var TooltipContentImpl = React2.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeTooltip,
      children,
      "aria-label": ariaLabel,
      onEscapeKeyDown,
      onPointerDownOutside,
      ...contentProps
    } = props;
    const context = useTooltipContext(CONTENT_NAME, __scopeTooltip);
    const popperScope = usePopperScope(__scopeTooltip);
    const { onClose } = context;
    React2.useEffect(() => {
      document.addEventListener(TOOLTIP_OPEN, onClose);
      return () => document.removeEventListener(TOOLTIP_OPEN, onClose);
    }, [onClose]);
    React2.useEffect(() => {
      if (context.trigger) {
        const handleScroll = (event) => {
          const target = event.target;
          if (target == null ? void 0 : target.contains(context.trigger))
            onClose();
        };
        window.addEventListener("scroll", handleScroll, { capture: true });
        return () => window.removeEventListener("scroll", handleScroll, { capture: true });
      }
    }, [context.trigger, onClose]);
    return (0, import_jsx_runtime2.jsx)(
      DismissableLayer,
      {
        asChild: true,
        disableOutsidePointerEvents: false,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside: (event) => event.preventDefault(),
        onDismiss: onClose,
        children: (0, import_jsx_runtime2.jsxs)(
          Content,
          {
            "data-state": context.stateAttribute,
            ...popperScope,
            ...contentProps,
            ref: forwardedRef,
            style: {
              ...contentProps.style,
              // re-namespace exposed content custom properties
              ...{
                "--radix-tooltip-content-transform-origin": "var(--radix-popper-transform-origin)",
                "--radix-tooltip-content-available-width": "var(--radix-popper-available-width)",
                "--radix-tooltip-content-available-height": "var(--radix-popper-available-height)",
                "--radix-tooltip-trigger-width": "var(--radix-popper-anchor-width)",
                "--radix-tooltip-trigger-height": "var(--radix-popper-anchor-height)"
              }
            },
            children: [
              (0, import_jsx_runtime2.jsx)(Slottable, { children }),
              (0, import_jsx_runtime2.jsx)(VisuallyHiddenContentContextProvider, { scope: __scopeTooltip, isInside: true, children: (0, import_jsx_runtime2.jsx)(Root4, { id: context.contentId, role: "tooltip", children: ariaLabel || children }) })
            ]
          }
        )
      }
    );
  }
);
TooltipContent.displayName = CONTENT_NAME;
var ARROW_NAME = "TooltipArrow";
var TooltipArrow = React2.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTooltip, ...arrowProps } = props;
    const popperScope = usePopperScope(__scopeTooltip);
    const visuallyHiddenContentContext = useVisuallyHiddenContentContext(
      ARROW_NAME,
      __scopeTooltip
    );
    return visuallyHiddenContentContext.isInside ? null : (0, import_jsx_runtime2.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
TooltipArrow.displayName = ARROW_NAME;
function getExitSideFromRect(point, rect) {
  const top = Math.abs(rect.top - point.y);
  const bottom = Math.abs(rect.bottom - point.y);
  const right = Math.abs(rect.right - point.x);
  const left = Math.abs(rect.left - point.x);
  switch (Math.min(top, bottom, right, left)) {
    case left:
      return "left";
    case right:
      return "right";
    case top:
      return "top";
    case bottom:
      return "bottom";
    default:
      throw new Error("unreachable");
  }
}
function getPaddedExitPoints(exitPoint, exitSide, padding = 5) {
  const paddedExitPoints = [];
  switch (exitSide) {
    case "top":
      paddedExitPoints.push(
        { x: exitPoint.x - padding, y: exitPoint.y + padding },
        { x: exitPoint.x + padding, y: exitPoint.y + padding }
      );
      break;
    case "bottom":
      paddedExitPoints.push(
        { x: exitPoint.x - padding, y: exitPoint.y - padding },
        { x: exitPoint.x + padding, y: exitPoint.y - padding }
      );
      break;
    case "left":
      paddedExitPoints.push(
        { x: exitPoint.x + padding, y: exitPoint.y - padding },
        { x: exitPoint.x + padding, y: exitPoint.y + padding }
      );
      break;
    case "right":
      paddedExitPoints.push(
        { x: exitPoint.x - padding, y: exitPoint.y - padding },
        { x: exitPoint.x - padding, y: exitPoint.y + padding }
      );
      break;
  }
  return paddedExitPoints;
}
function getPointsFromRect(rect) {
  const { top, right, bottom, left } = rect;
  return [
    { x: left, y: top },
    { x: right, y: top },
    { x: right, y: bottom },
    { x: left, y: bottom }
  ];
}
function isPointInPolygon(point, polygon) {
  const { x, y } = point;
  let inside = false;
  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    const xi = polygon[i].x;
    const yi = polygon[i].y;
    const xj = polygon[j].x;
    const yj = polygon[j].y;
    const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect)
      inside = !inside;
  }
  return inside;
}
function getHull(points) {
  const newPoints = points.slice();
  newPoints.sort((a, b) => {
    if (a.x < b.x)
      return -1;
    else if (a.x > b.x)
      return 1;
    else if (a.y < b.y)
      return -1;
    else if (a.y > b.y)
      return 1;
    else
      return 0;
  });
  return getHullPresorted(newPoints);
}
function getHullPresorted(points) {
  if (points.length <= 1)
    return points.slice();
  const upperHull = [];
  for (let i = 0; i < points.length; i++) {
    const p = points[i];
    while (upperHull.length >= 2) {
      const q = upperHull[upperHull.length - 1];
      const r = upperHull[upperHull.length - 2];
      if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x))
        upperHull.pop();
      else
        break;
    }
    upperHull.push(p);
  }
  upperHull.pop();
  const lowerHull = [];
  for (let i = points.length - 1; i >= 0; i--) {
    const p = points[i];
    while (lowerHull.length >= 2) {
      const q = lowerHull[lowerHull.length - 1];
      const r = lowerHull[lowerHull.length - 2];
      if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x))
        lowerHull.pop();
      else
        break;
    }
    lowerHull.push(p);
  }
  lowerHull.pop();
  if (upperHull.length === 1 && lowerHull.length === 1 && upperHull[0].x === lowerHull[0].x && upperHull[0].y === lowerHull[0].y) {
    return upperHull;
  } else {
    return upperHull.concat(lowerHull);
  }
}
var Provider = TooltipProvider;
var Root33 = Tooltip;
var Trigger3 = TooltipTrigger;
var Portal4 = TooltipPortal;
var Content24 = TooltipContent;
var Arrow22 = TooltipArrow;

// node_modules/@radix-ui/themes/dist/esm/helpers/radix-colors.js
var radixColorScalesRegular = ["tomato", "red", "ruby", "crimson", "pink", "plum", "purple", "violet", "iris", "indigo", "blue", "cyan", "teal", "jade", "green", "grass", "brown", "orange"];
var radixColorScalesBright = ["sky", "mint", "lime", "yellow", "amber"];
var radixColorScalesMetal = ["gold", "bronze"];
var radixColorScales = [...radixColorScalesRegular, ...radixColorScalesBright, ...radixColorScalesMetal];
var radixGrayScalePure = "gray";
var radixGrayScalesDesaturated = ["mauve", "slate", "sage", "olive", "sand"];
var radixGrayScales = [radixGrayScalePure, ...radixGrayScalesDesaturated];
function radixGetMatchingGrayScale(colorScale) {
  switch (colorScale) {
    case "tomato":
    case "red":
    case "ruby":
    case "crimson":
    case "pink":
    case "plum":
    case "purple":
    case "violet":
      return "mauve";
    case "iris":
    case "indigo":
    case "blue":
    case "sky":
    case "cyan":
      return "slate";
    case "teal":
    case "jade":
    case "mint":
    case "green":
      return "sage";
    case "grass":
    case "lime":
      return "olive";
    case "yellow":
    case "amber":
    case "orange":
    case "brown":
    case "gold":
    case "bronze":
      return "sand";
  }
}

// node_modules/@radix-ui/themes/dist/esm/theme-options.js
var appearances = ["inherit", "light", "dark"];
var accentColors = [...radixColorScales, "gray"];
var grayColors = [...radixGrayScales, "auto"];
var panelBackgrounds = ["solid", "translucent"];
var radii = ["none", "small", "medium", "large", "full"];
var scalings = ["90%", "95%", "100%", "105%", "110%"];
var themePropDefs = {
  hasBackground: { type: "boolean", default: true },
  appearance: { type: "enum", values: appearances, default: "inherit" },
  accentColor: { type: "enum", values: accentColors, default: "indigo" },
  grayColor: { type: "enum", values: grayColors, default: "auto" },
  panelBackground: { type: "enum", values: panelBackgrounds, default: "translucent" },
  radius: { type: "enum", values: radii, default: "medium" },
  scaling: { type: "enum", values: scalings, default: "100%" }
};
var themeAccentColorsGrouped = [
  { label: "Regulars", values: [...radixColorScalesRegular] },
  { label: "Brights", values: [...radixColorScalesBright] },
  { label: "Metals", values: [...radixColorScalesMetal] },
  { label: "Gray", values: ["gray"] }
];
var themeAccentColorsOrdered = [
  "gray",
  "gold",
  "bronze",
  "brown",
  "yellow",
  "amber",
  "orange",
  "tomato",
  "red",
  "ruby",
  "crimson",
  "pink",
  "plum",
  "purple",
  "violet",
  "iris",
  "indigo",
  "blue",
  "cyan",
  "teal",
  "jade",
  "green",
  "grass",
  "lime",
  "mint",
  "sky"
];
var themeGrayColorsGrouped = [
  { label: "Pure", values: [radixGrayScalePure] },
  { label: "Desaturated", values: ["auto", ...radixGrayScalesDesaturated] }
];
function getMatchingGrayColor(accentColor) {
  if (accentColor === "gray")
    return "gray";
  return radixGetMatchingGrayScale(accentColor);
}

// node_modules/@radix-ui/themes/dist/esm/theme.js
var noop = () => {
};
var ThemeContext = React3.createContext(void 0);
function useThemeContext() {
  const context = React3.useContext(ThemeContext);
  if (context === void 0) {
    throw new Error("`useThemeContext` must be used within a `Theme`");
  }
  return context;
}
var Theme = React3.forwardRef((props, forwardedRef) => {
  const context = React3.useContext(ThemeContext);
  const isRoot = context === void 0;
  if (isRoot) {
    return React3.createElement(
      Provider,
      null,
      React3.createElement(
        DirectionProvider,
        { dir: "ltr" },
        React3.createElement(ThemeRoot, { ...props, ref: forwardedRef })
      )
    );
  }
  return React3.createElement(ThemeImpl, { ...props, ref: forwardedRef });
});
Theme.displayName = "Theme";
var ThemeRoot = React3.forwardRef((props, forwardedRef) => {
  const { appearance: appearanceProp = themePropDefs.appearance.default, accentColor: accentColorProp = themePropDefs.accentColor.default, grayColor: grayColorProp = themePropDefs.grayColor.default, panelBackground: panelBackgroundProp = themePropDefs.panelBackground.default, radius: radiusProp2 = themePropDefs.radius.default, scaling: scalingProp = themePropDefs.scaling.default, hasBackground = themePropDefs.hasBackground.default, ...rootProps } = props;
  const [appearance, setAppearance] = React3.useState(appearanceProp);
  React3.useEffect(() => setAppearance(appearanceProp), [appearanceProp]);
  const [accentColor, setAccentColor] = React3.useState(accentColorProp);
  React3.useEffect(() => setAccentColor(accentColorProp), [accentColorProp]);
  const [grayColor, setGrayColor] = React3.useState(grayColorProp);
  React3.useEffect(() => setGrayColor(grayColorProp), [grayColorProp]);
  const [panelBackground, setPanelBackground] = React3.useState(panelBackgroundProp);
  React3.useEffect(() => setPanelBackground(panelBackgroundProp), [panelBackgroundProp]);
  const [radius, setRadius] = React3.useState(radiusProp2);
  React3.useEffect(() => setRadius(radiusProp2), [radiusProp2]);
  const [scaling, setScaling] = React3.useState(scalingProp);
  React3.useEffect(() => setScaling(scalingProp), [scalingProp]);
  const ExplicitRootAppearanceScript = React3.memo(
    ({ appearance: appearance2 }) => React3.createElement("script", { dangerouslySetInnerHTML: {
      __html: `!(function(){try{var d=document.documentElement,c=d.classList;c.remove('light','dark');d.style.colorScheme='${appearance2}';c.add('${appearance2}');}catch(e){}})();`
    } }),
    () => true
    // Never re-render
  );
  ExplicitRootAppearanceScript.displayName = "ExplicitRootAppearanceScript";
  React3.useEffect(() => updateThemeAppearanceClass(appearanceProp), [appearanceProp]);
  const resolvedGrayColor = grayColor === "auto" ? getMatchingGrayColor(accentColor) : grayColor;
  return React3.createElement(
    React3.Fragment,
    null,
    appearance !== "inherit" && React3.createElement(ExplicitRootAppearanceScript, { appearance }),
    hasBackground && React3.createElement("style", { dangerouslySetInnerHTML: {
      __html: `
:root, .light, .light-theme { --color-page-background: white; }
.dark, .dark-theme { --color-page-background: var(--${resolvedGrayColor}-1); }
body { background-color: var(--color-page-background); }
`
    } }),
    React3.createElement(ThemeImpl, {
      ...rootProps,
      ref: forwardedRef,
      isRoot: true,
      hasBackground,
      //
      appearance,
      accentColor,
      grayColor,
      panelBackground,
      radius,
      scaling,
      //
      onAppearanceChange: setAppearance,
      onAccentColorChange: setAccentColor,
      onGrayColorChange: setGrayColor,
      onPanelBackgroundChange: setPanelBackground,
      onRadiusChange: setRadius,
      onScalingChange: setScaling
    })
  );
});
ThemeRoot.displayName = "ThemeRoot";
var ThemeImpl = React3.forwardRef((props, forwardedRef) => {
  var _a, _b, _c, _d, _e, _f;
  const context = React3.useContext(ThemeContext);
  const {
    asChild,
    isRoot,
    hasBackground,
    //
    appearance = (_a = context === null || context === void 0 ? void 0 : context.appearance) !== null && _a !== void 0 ? _a : themePropDefs.appearance.default,
    accentColor = (_b = context === null || context === void 0 ? void 0 : context.accentColor) !== null && _b !== void 0 ? _b : themePropDefs.accentColor.default,
    grayColor = (_c = context === null || context === void 0 ? void 0 : context.resolvedGrayColor) !== null && _c !== void 0 ? _c : themePropDefs.grayColor.default,
    panelBackground = (_d = context === null || context === void 0 ? void 0 : context.panelBackground) !== null && _d !== void 0 ? _d : themePropDefs.panelBackground.default,
    radius = (_e = context === null || context === void 0 ? void 0 : context.radius) !== null && _e !== void 0 ? _e : themePropDefs.radius.default,
    scaling = (_f = context === null || context === void 0 ? void 0 : context.scaling) !== null && _f !== void 0 ? _f : themePropDefs.scaling.default,
    //
    onAppearanceChange = noop,
    onAccentColorChange = noop,
    onGrayColorChange = noop,
    onPanelBackgroundChange = noop,
    onRadiusChange = noop,
    onScalingChange = noop,
    //
    ...themeProps
  } = props;
  const Comp = asChild ? Slot : "div";
  const resolvedGrayColor = grayColor === "auto" ? getMatchingGrayColor(accentColor) : grayColor;
  const isExplicitAppearance = props.appearance !== void 0 && props.appearance !== "inherit";
  const isExplicitGrayColor = props.grayColor !== void 0;
  const shouldHaveBackground = !isRoot && (hasBackground === true || hasBackground !== false && (isExplicitAppearance || isExplicitGrayColor));
  return React3.createElement(
    ThemeContext.Provider,
    { value: React3.useMemo(() => ({
      appearance,
      accentColor,
      grayColor,
      resolvedGrayColor,
      panelBackground,
      radius,
      scaling,
      //
      onAppearanceChange,
      onAccentColorChange,
      onGrayColorChange,
      onPanelBackgroundChange,
      onRadiusChange,
      onScalingChange
    }), [
      appearance,
      accentColor,
      grayColor,
      resolvedGrayColor,
      panelBackground,
      radius,
      scaling,
      //
      onAppearanceChange,
      onAccentColorChange,
      onGrayColorChange,
      onPanelBackgroundChange,
      onRadiusChange,
      onScalingChange
    ]) },
    React3.createElement(Comp, { "data-is-root-theme": isRoot ? "true" : "false", "data-accent-color": accentColor, "data-gray-color": resolvedGrayColor, "data-has-background": shouldHaveBackground ? "true" : "false", "data-panel-background": panelBackground, "data-radius": radius, "data-scaling": scaling, ref: forwardedRef, ...themeProps, className: (0, import_classnames.default)("radix-themes", {
      // Only apply theme class to nested `Theme` sections.
      //
      // If it's the root `Theme`, we either rely on
      // - something else setting the theme class when root `appearance` is `inherit`
      // - our script setting it when root `appearance` is explicit
      light: !isRoot && appearance === "light",
      dark: !isRoot && appearance === "dark"
    }, themeProps.className) })
  );
});
ThemeImpl.displayName = "ThemeImpl";
function updateThemeAppearanceClass(appearance) {
  if (appearance === "inherit")
    return;
  const root = document.documentElement;
  if (root.classList.contains("light-theme") || root.classList.contains("dark-theme")) {
    root.classList.remove("light-theme", "dark-theme");
    root.style.colorScheme = appearance;
    root.classList.add(`${appearance}-theme`);
  }
  if (root.classList.contains("light") || root.classList.contains("dark")) {
    root.classList.remove("light", "dark");
    root.style.colorScheme = appearance;
    root.classList.add(appearance);
  }
}

// node_modules/@radix-ui/themes/dist/esm/components/box.js
var React4 = __toESM(require_react());
var import_classnames2 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/box.props.js
var displayValues = ["none", "inline", "inline-block", "block"];
var boxPropDefs = {
  display: { type: "enum", values: displayValues, default: void 0, responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/helpers/props/color.prop.js
var colorProp = {
  type: "enum",
  values: themePropDefs.accentColor.values,
  default: void 0
};

// node_modules/@radix-ui/themes/dist/esm/helpers/props/high-contrast.prop.js
var highContrastProp = {
  type: "boolean",
  default: void 0
};

// node_modules/@radix-ui/themes/dist/esm/helpers/breakpoints.js
function withBreakpoints(value, classPrefix = "", valueMap) {
  var _a, _b, _c, _d;
  const classes = [];
  if (typeof value === "object") {
    for (const bp of Object.keys(value)) {
      if (bp in value) {
        const str = (_a = value[bp]) === null || _a === void 0 ? void 0 : _a.toString();
        const isNegative = str === null || str === void 0 ? void 0 : str.startsWith("-");
        const delimiter = classPrefix === "" ? "" : "-";
        const prefix = isNegative ? `-${classPrefix}` : classPrefix;
        const matchedValue = isNegative ? str === null || str === void 0 ? void 0 : str.substring(1) : str;
        if (matchedValue === void 0) {
          continue;
        }
        const suffix = (_b = valueMap === null || valueMap === void 0 ? void 0 : valueMap[matchedValue]) !== null && _b !== void 0 ? _b : matchedValue;
        const className = bp === "initial" ? `${prefix}${delimiter}${suffix}` : `${bp}:${prefix}${delimiter}${suffix}`;
        classes.push(className);
      }
    }
  }
  if (typeof value === "string") {
    const isNegative = value.startsWith("-");
    const delimiter = classPrefix === "" ? "" : "-";
    const prefix = isNegative ? `-${classPrefix}` : classPrefix;
    const matchedValue = isNegative ? value.substring(1) : value;
    const suffix = (_c = valueMap === null || valueMap === void 0 ? void 0 : valueMap[matchedValue]) !== null && _c !== void 0 ? _c : matchedValue;
    classes.push(`${prefix}${delimiter}${suffix}`);
  }
  if (typeof value === "boolean") {
    const delimiter = classPrefix === "" ? "" : "-";
    const matchedValue = value.toString();
    const suffix = (_d = valueMap === null || valueMap === void 0 ? void 0 : valueMap[matchedValue]) !== null && _d !== void 0 ? _d : matchedValue;
    classes.push(`${classPrefix}${delimiter}${suffix}`);
  }
  return classes.join(" ");
}
function isBreakpointsObject(obj) {
  return typeof obj === "object";
}

// node_modules/@radix-ui/themes/dist/esm/helpers/props/layout.props.js
var paddingValues = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
var paddingPropDefs = {
  p: { type: "enum", values: paddingValues, default: void 0, responsive: true },
  px: { type: "enum", values: paddingValues, default: void 0, responsive: true },
  py: { type: "enum", values: paddingValues, default: void 0, responsive: true },
  pt: { type: "enum", values: paddingValues, default: void 0, responsive: true },
  pr: { type: "enum", values: paddingValues, default: void 0, responsive: true },
  pb: { type: "enum", values: paddingValues, default: void 0, responsive: true },
  pl: { type: "enum", values: paddingValues, default: void 0, responsive: true }
};
function extractPaddingProps(props) {
  const { p = layoutPropDefs.p.default, px = layoutPropDefs.px.default, py = layoutPropDefs.py.default, pt = layoutPropDefs.pt.default, pr = layoutPropDefs.pr.default, pb = layoutPropDefs.pb.default, pl = layoutPropDefs.pl.default, ...rest } = props;
  return { p, px, py, pt, pr, pb, pl, rest };
}
function withPaddingProps(props) {
  return [
    withBreakpoints(props.p, "rt-r-p"),
    withBreakpoints(props.px, "rt-r-px"),
    withBreakpoints(props.py, "rt-r-py"),
    withBreakpoints(props.pt, "rt-r-pt"),
    withBreakpoints(props.pr, "rt-r-pr"),
    withBreakpoints(props.pb, "rt-r-pb"),
    withBreakpoints(props.pl, "rt-r-pl")
  ].filter(Boolean).join(" ");
}
var positionValues = ["static", "relative", "absolute", "fixed", "sticky"];
var positionEdgeValues = ["auto", "0", "50%", "100%"];
var widthHeightValues = ["auto", "min-content", "max-content", "100%", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
var flexShrinkValues = ["0", "1"];
var flexGrowValues = ["0", "1"];
var layoutPropDefs = {
  ...paddingPropDefs,
  position: { type: "enum", values: positionValues, default: void 0, responsive: true },
  inset: { type: "enum", values: positionEdgeValues, default: void 0, responsive: true },
  top: { type: "enum", values: positionEdgeValues, default: void 0, responsive: true },
  right: { type: "enum", values: positionEdgeValues, default: void 0, responsive: true },
  bottom: { type: "enum", values: positionEdgeValues, default: void 0, responsive: true },
  left: { type: "enum", values: positionEdgeValues, default: void 0, responsive: true },
  width: { type: "enum", values: widthHeightValues, default: void 0, responsive: true },
  height: { type: "enum", values: widthHeightValues, default: void 0, responsive: true },
  shrink: { type: "enum", values: flexShrinkValues, default: void 0, responsive: true },
  grow: { type: "enum", values: flexGrowValues, default: void 0, responsive: true }
};
function extractLayoutProps(props) {
  const { rest: paddingRest, ...paddingProps } = extractPaddingProps(props);
  const { position = layoutPropDefs.position.default, width = layoutPropDefs.width.default, height = layoutPropDefs.height.default, inset = layoutPropDefs.inset.default, top = layoutPropDefs.top.default, bottom = layoutPropDefs.bottom.default, left = layoutPropDefs.left.default, right = layoutPropDefs.right.default, shrink = layoutPropDefs.shrink.default, grow = layoutPropDefs.grow.default, ...rest } = paddingRest;
  return {
    ...paddingProps,
    position,
    width,
    height,
    inset,
    top,
    bottom,
    left,
    right,
    shrink,
    grow,
    rest
  };
}
function withLayoutProps(props) {
  return [
    withPaddingProps(props),
    withBreakpoints(props.position, "rt-r-position"),
    withBreakpoints(props.shrink, "rt-r-fs"),
    withBreakpoints(props.grow, "rt-r-fg"),
    withBreakpoints(props.width, "rt-r-w"),
    withBreakpoints(props.height, "rt-r-h"),
    withBreakpoints(props.inset, "rt-r-inset"),
    withBreakpoints(props.top, "rt-r-top"),
    withBreakpoints(props.bottom, "rt-r-bottom"),
    withBreakpoints(props.left, "rt-r-left"),
    withBreakpoints(props.right, "rt-r-right")
  ].filter(Boolean).join(" ");
}

// node_modules/@radix-ui/themes/dist/esm/helpers/props/leading-trim.prop.js
var trimValues = ["normal", "start", "end", "both"];
var trimProp = {
  type: "enum",
  values: trimValues,
  default: void 0,
  responsive: true
};

// node_modules/@radix-ui/themes/dist/esm/helpers/props/margin.props.js
var marginValues = ["auto", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9"];
var marginPropDefs = {
  m: { type: "enum", values: marginValues, default: void 0, responsive: true },
  mx: { type: "enum", values: marginValues, default: void 0, responsive: true },
  my: { type: "enum", values: marginValues, default: void 0, responsive: true },
  mt: { type: "enum", values: marginValues, default: void 0, responsive: true },
  mr: { type: "enum", values: marginValues, default: void 0, responsive: true },
  mb: { type: "enum", values: marginValues, default: void 0, responsive: true },
  ml: { type: "enum", values: marginValues, default: void 0, responsive: true }
};
function extractMarginProps(props) {
  const { m = marginPropDefs.m.default, mx = marginPropDefs.mx.default, my = marginPropDefs.my.default, mt = marginPropDefs.mt.default, mr = marginPropDefs.mr.default, mb = marginPropDefs.mb.default, ml = marginPropDefs.ml.default, ...rest } = props;
  return { m, mx, my, mt, mr, mb, ml, rest };
}
function withMarginProps(props) {
  return [
    withBreakpoints(props.m, "rt-r-m"),
    withBreakpoints(props.mx, "rt-r-mx"),
    withBreakpoints(props.my, "rt-r-my"),
    withBreakpoints(props.mt, "rt-r-mt"),
    withBreakpoints(props.mr, "rt-r-mr"),
    withBreakpoints(props.mb, "rt-r-mb"),
    withBreakpoints(props.ml, "rt-r-ml")
  ].filter(Boolean).join(" ");
}

// node_modules/@radix-ui/themes/dist/esm/helpers/props/radius.prop.js
var radiusProp = {
  type: "enum",
  values: themePropDefs.radius.values,
  default: void 0
};

// node_modules/@radix-ui/themes/dist/esm/helpers/props/text-align.prop.js
var alignValues = ["left", "center", "right"];
var alignProp = {
  type: "enum",
  values: alignValues,
  default: void 0,
  responsive: true
};

// node_modules/@radix-ui/themes/dist/esm/helpers/props/weight.prop.js
var weights = ["light", "regular", "medium", "bold"];
var weightProp = {
  type: "enum",
  values: weights,
  default: void 0,
  responsive: true
};

// node_modules/@radix-ui/themes/dist/esm/helpers/has-own-property.js
function hasOwnProperty(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

// node_modules/@radix-ui/themes/dist/esm/components/box.js
var Box = React4.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { rest: layoutRest, ...layoutProps } = extractLayoutProps(marginRest);
  const { className, asChild, display = boxPropDefs.display.default, ...boxProps } = layoutRest;
  const Comp = asChild ? Slot : "div";
  return React4.createElement(Comp, { ...boxProps, ref: forwardedRef, className: (0, import_classnames2.default)("rt-Box", className, withBreakpoints(display, "rt-r-display"), withLayoutProps(layoutProps), withMarginProps(marginProps)) });
});
Box.displayName = "Box";

// node_modules/@radix-ui/themes/dist/esm/components/flex.js
var React5 = __toESM(require_react());
var import_classnames3 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/flex.props.js
var displayValues2 = ["none", "inline-flex", "flex"];
var directionValues = ["row", "column", "row-reverse", "column-reverse"];
var alignValues2 = ["start", "center", "end", "baseline", "stretch"];
var justifyValues = ["start", "center", "end", "between"];
var wrapValues = ["nowrap", "wrap", "wrap-reverse"];
var gapValues = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
var flexPropDefs = {
  display: { type: "enum", values: displayValues2, default: "flex", responsive: true },
  direction: { type: "enum", values: directionValues, default: void 0, responsive: true },
  align: { type: "enum", values: alignValues2, default: void 0, responsive: true },
  justify: { type: "enum", values: justifyValues, default: "start", responsive: true },
  wrap: { type: "enum", values: wrapValues, default: void 0, responsive: true },
  gap: { type: "enum", values: gapValues, default: void 0, responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/flex.js
var Flex = React5.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { rest: layoutRest, ...layoutProps } = extractLayoutProps(marginRest);
  const { className, asChild, display = flexPropDefs.display.default, direction = flexPropDefs.direction.default, align = flexPropDefs.align.default, justify = flexPropDefs.justify.default, wrap = flexPropDefs.wrap.default, gap = flexPropDefs.gap.default, ...flexProps } = layoutRest;
  const Comp = asChild ? Slot : "div";
  return React5.createElement(Comp, { ...flexProps, ref: forwardedRef, className: (0, import_classnames3.default)("rt-Flex", className, withBreakpoints(display, "rt-r-display"), withBreakpoints(direction, "rt-r-fd"), withBreakpoints(align, "rt-r-ai"), withBreakpoints(justify, "rt-r-jc", { between: "space-between" }), withBreakpoints(wrap, "rt-r-fw"), withBreakpoints(gap, "rt-r-gap"), withLayoutProps(layoutProps), withMarginProps(marginProps)) });
});
Flex.displayName = "Flex";

// node_modules/@radix-ui/themes/dist/esm/components/grid.js
var React6 = __toESM(require_react());
var import_classnames4 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/grid.props.js
var displayValues3 = ["none", "inline-grid", "grid"];
var flowValues = ["row", "column", "dense", "row-dense", "column-dense"];
var alignValues3 = ["start", "center", "end", "baseline", "stretch"];
var justifyValues2 = ["start", "center", "end", "between"];
var gapValues2 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
var gridPropDefs = {
  display: { type: "enum", values: displayValues3, default: void 0, responsive: true },
  columns: { type: "string", default: void 0, responsive: true },
  rows: { type: "string", default: void 0, responsive: true },
  flow: { type: "enum", values: flowValues, default: void 0, responsive: true },
  align: { type: "enum", values: alignValues3, default: void 0, responsive: true },
  justify: { type: "enum", values: justifyValues2, default: void 0, responsive: true },
  gap: { type: "enum", values: gapValues2, default: void 0, responsive: true },
  gapX: { type: "enum", values: gapValues2, default: void 0, responsive: true },
  gapY: { type: "enum", values: gapValues2, default: void 0, responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/grid.js
var Grid = React6.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { rest: layoutRest, ...layoutProps } = extractLayoutProps(marginRest);
  const { className, asChild, display = gridPropDefs.display.default, columns = gridPropDefs.columns.default, rows = gridPropDefs.rows.default, flow = gridPropDefs.flow.default, align = gridPropDefs.align.default, justify = gridPropDefs.justify.default, gap = gridPropDefs.gap.default, gapX = gridPropDefs.gapX.default, gapY = gridPropDefs.gapY.default, style: propStyle, ...gridProps } = layoutRest;
  const Comp = asChild ? Slot : "div";
  let style = {
    ...propStyle
  };
  if (typeof columns === "string") {
    style = {
      "--grid-template-columns-initial": parseGridValue(columns),
      ...style
    };
  }
  if (typeof rows === "string") {
    style = {
      "--grid-template-rows-initial": parseGridValue(rows),
      ...style
    };
  }
  if (isBreakpointsObject(columns)) {
    for (const breakpoint in columns) {
      if (hasOwnProperty(columns, breakpoint)) {
        const customProperty = `--grid-template-columns-${breakpoint}`;
        style = {
          [customProperty]: parseGridValue(columns[breakpoint]),
          ...style
        };
      }
    }
  }
  if (isBreakpointsObject(rows)) {
    for (const breakpoint in rows) {
      if (hasOwnProperty(rows, breakpoint)) {
        const customProperty = `--grid-template-rows-${breakpoint}`;
        style = {
          [customProperty]: parseGridValue(rows[breakpoint]),
          ...style
        };
      }
    }
  }
  return React6.createElement(Comp, { ...gridProps, ref: forwardedRef, className: (0, import_classnames4.default)("rt-Grid", className, withBreakpoints(display, "rt-r-display"), withBreakpoints(flow, "rt-r-gaf"), withBreakpoints(align, "rt-r-ai"), withBreakpoints(justify, "rt-r-jc", { between: "space-between" }), withBreakpoints(gap, "rt-r-gap"), withBreakpoints(gapX, "rt-r-cg"), withBreakpoints(gapY, "rt-r-rg"), withLayoutProps(layoutProps), withMarginProps(marginProps)), style: Object.keys(style).length ? style : void 0 });
});
Grid.displayName = "Grid";
function parseGridValue(value) {
  return (value === null || value === void 0 ? void 0 : value.match(/^\d+$/)) ? `repeat(${value}, minmax(0, 1fr))` : value;
}

// node_modules/@radix-ui/themes/dist/esm/components/container.js
var React7 = __toESM(require_react());
var import_classnames5 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/container.props.js
var sizes = ["1", "2", "3", "4"];
var displayValues4 = ["none", "block"];
var containerPropDefs = {
  size: { type: "enum", values: sizes, default: "4", responsive: true },
  display: { type: "enum", values: displayValues4, default: void 0, responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/container.js
var Container = React7.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { rest: layoutRest, ...layoutProps } = extractLayoutProps(marginRest);
  const { children, className, size = containerPropDefs.size.default, display = containerPropDefs.display.default, ...containerProps } = layoutRest;
  return React7.createElement(
    "div",
    { ...containerProps, ref: forwardedRef, className: (0, import_classnames5.default)("rt-Container", className, withBreakpoints(size, "rt-r-size"), withBreakpoints(display, "rt-r-display"), withLayoutProps(layoutProps), withMarginProps(marginProps)) },
    React7.createElement("div", { className: "rt-ContainerInner" }, children)
  );
});
Container.displayName = "Container";

// node_modules/@radix-ui/themes/dist/esm/components/section.js
var React8 = __toESM(require_react());
var import_classnames6 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/section.props.js
var sizes2 = ["1", "2", "3"];
var displayValues5 = ["none", "block"];
var sectionPropDefs = {
  size: { type: "enum", values: sizes2, default: "3", responsive: true },
  display: { type: "enum", values: displayValues5, default: void 0, responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/section.js
var Section = React8.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { rest: layoutRest, ...layoutProps } = extractLayoutProps(marginRest);
  const { className, size = sectionPropDefs.size.default, display = sectionPropDefs.display.default, ...sectionProps } = layoutRest;
  return React8.createElement("section", { ...sectionProps, ref: forwardedRef, className: (0, import_classnames6.default)("rt-Section", className, withBreakpoints(size, "rt-r-size"), withBreakpoints(display, "rt-r-display"), withLayoutProps(layoutProps), withMarginProps(marginProps)) });
});
Section.displayName = "Section";

// node_modules/@radix-ui/react-aspect-ratio/dist/index.mjs
var React9 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var NAME2 = "AspectRatio";
var AspectRatio = React9.forwardRef(
  (props, forwardedRef) => {
    const { ratio = 1 / 1, style, ...aspectRatioProps } = props;
    return (0, import_jsx_runtime3.jsx)(
      "div",
      {
        style: {
          // ensures inner element is contained
          position: "relative",
          // ensures padding bottom trick maths works
          width: "100%",
          paddingBottom: `${100 / ratio}%`
        },
        "data-radix-aspect-ratio-wrapper": "",
        children: (0, import_jsx_runtime3.jsx)(
          Primitive.div,
          {
            ...aspectRatioProps,
            ref: forwardedRef,
            style: {
              ...style,
              // ensures children expand in ratio
              position: "absolute",
              top: 0,
              right: 0,
              bottom: 0,
              left: 0
            }
          }
        )
      }
    );
  }
);
AspectRatio.displayName = NAME2;

// node_modules/@radix-ui/themes/dist/esm/components/inset.js
var React10 = __toESM(require_react());
var import_classnames7 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/inset.props.js
var sides = ["all", "x", "y", "top", "bottom", "left", "right"];
var clipValues = ["border-box", "padding-box"];
var paddingValues2 = ["current", "0"];
var insetPropDefs = {
  side: { type: "enum", values: sides, default: "all", responsive: true },
  clip: { type: "enum", values: clipValues, default: "border-box", responsive: true },
  p: { type: "enum", values: paddingValues2, default: void 0, responsive: true },
  px: { type: "enum", values: paddingValues2, default: void 0, responsive: true },
  py: { type: "enum", values: paddingValues2, default: void 0, responsive: true },
  pt: { type: "enum", values: paddingValues2, default: void 0, responsive: true },
  pr: { type: "enum", values: paddingValues2, default: void 0, responsive: true },
  pb: { type: "enum", values: paddingValues2, default: void 0, responsive: true },
  pl: { type: "enum", values: paddingValues2, default: void 0, responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/inset.js
var Inset = React10.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, side = insetPropDefs.side.default, clip = insetPropDefs.clip.default, p, px, py, pt, pr, pb, pl, ...insetProps } = marginRest;
  return React10.createElement("div", { ...insetProps, ref: forwardedRef, className: (0, import_classnames7.default)("rt-Inset", className, withBreakpoints(side, "rt-r-side"), withBreakpoints(clip, "rt-r-clip"), withBreakpoints(p, "rt-r-p"), withBreakpoints(px, "rt-r-px"), withBreakpoints(py, "rt-r-py"), withBreakpoints(pt, "rt-r-pt"), withBreakpoints(pr, "rt-r-pr"), withBreakpoints(pb, "rt-r-pb"), withBreakpoints(pl, "rt-r-pl"), withMarginProps(marginProps)) });
});
Inset.displayName = "Inset";

// node_modules/@radix-ui/themes/dist/esm/components/heading.js
var React11 = __toESM(require_react());
var import_classnames8 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/heading.props.js
var sizes3 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var weights2 = weightProp.values;
var headingPropDefs = {
  size: { type: "enum", values: sizes3, default: "6", responsive: true },
  weight: { ...weightProp, default: "bold" },
  align: alignProp,
  trim: trimProp,
  color: colorProp,
  highContrast: highContrastProp
};

// node_modules/@radix-ui/themes/dist/esm/components/heading.js
var Heading = React11.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { children, className, asChild = false, as: Tag = "h1", size = headingPropDefs.size.default, weight = headingPropDefs.weight.default, align = headingPropDefs.align.default, trim = headingPropDefs.trim.default, color = headingPropDefs.color.default, highContrast = headingPropDefs.highContrast.default, ...headingProps } = marginRest;
  return React11.createElement(Slot, { "data-accent-color": color, ...headingProps, ref: forwardedRef, className: (0, import_classnames8.default)("rt-Heading", className, withBreakpoints(size, "rt-r-size"), withBreakpoints(weight, "rt-r-weight"), withBreakpoints(align, "rt-r-ta"), withBreakpoints(trim, "rt-r-lt"), { "rt-high-contrast": highContrast }, withMarginProps(marginProps)) }, asChild ? children : React11.createElement(Tag, null, children));
});
Heading.displayName = "Heading";

// node_modules/@radix-ui/themes/dist/esm/components/text.js
var React12 = __toESM(require_react());
var import_classnames9 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/text.props.js
var sizes4 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var textPropDefs = {
  size: { type: "enum", values: sizes4, default: void 0, responsive: true },
  weight: weightProp,
  align: alignProp,
  trim: trimProp,
  color: colorProp,
  highContrast: highContrastProp
};

// node_modules/@radix-ui/themes/dist/esm/components/text.js
var Text = React12.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { children, className, asChild = false, as: Tag = "span", size = textPropDefs.size.default, weight = textPropDefs.weight.default, align = textPropDefs.align.default, trim = textPropDefs.trim.default, color = textPropDefs.color.default, highContrast = textPropDefs.highContrast.default, ...textProps } = marginRest;
  return React12.createElement(Slot, { "data-accent-color": color, ...textProps, ref: forwardedRef, className: (0, import_classnames9.default)("rt-Text", className, withBreakpoints(size, "rt-r-size"), withBreakpoints(weight, "rt-r-weight"), withBreakpoints(align, "rt-r-ta"), withBreakpoints(trim, "rt-r-lt"), { "rt-high-contrast": highContrast }, withMarginProps(marginProps)) }, asChild ? children : React12.createElement(Tag, null, children));
});
Text.displayName = "Text";

// node_modules/@radix-ui/themes/dist/esm/components/code.js
var React13 = __toESM(require_react());
var import_classnames10 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/code.props.js
var sizes5 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var variants = ["solid", "soft", "outline", "ghost"];
var codePropDefs = {
  size: { type: "enum", values: sizes5, default: void 0, responsive: true },
  variant: { type: "enum", values: variants, default: "soft" },
  weight: weightProp,
  color: colorProp,
  highContrast: highContrastProp
};

// node_modules/@radix-ui/themes/dist/esm/components/code.js
var Code = React13.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, size = codePropDefs.size.default, variant = codePropDefs.variant.default, weight = codePropDefs.weight.default, color = codePropDefs.color.default, highContrast = codePropDefs.highContrast.default, ...codeProps } = marginRest;
  return React13.createElement("code", { "data-accent-color": color, ...codeProps, ref: forwardedRef, className: (0, import_classnames10.default)("rt-Code", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, withBreakpoints(weight, "rt-r-weight"), { "rt-high-contrast": highContrast }, withMarginProps(marginProps)) });
});
Code.displayName = "Code";

// node_modules/@radix-ui/themes/dist/esm/components/em.js
var React14 = __toESM(require_react());
var import_classnames11 = __toESM(require_classnames());
var Em = React14.forwardRef((props, forwardedRef) => React14.createElement("em", { ...props, ref: forwardedRef, className: (0, import_classnames11.default)("rt-Em", props.className) }));
Em.displayName = "Em";

// node_modules/@radix-ui/themes/dist/esm/components/kbd.js
var React15 = __toESM(require_react());
var import_classnames12 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/kbd.props.js
var sizes6 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var kbdPropDefs = {
  size: { type: "enum", values: sizes6, default: void 0, responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/kbd.js
var Kbd = React15.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, size = kbdPropDefs.size.default, ...kbdProps } = marginRest;
  return React15.createElement("kbd", { ...kbdProps, ref: forwardedRef, className: (0, import_classnames12.default)("rt-Kbd", className, withBreakpoints(size, "rt-r-size"), withMarginProps(marginProps)) });
});
Kbd.displayName = "Kbd";

// node_modules/@radix-ui/themes/dist/esm/components/quote.js
var React16 = __toESM(require_react());
var import_classnames13 = __toESM(require_classnames());
var Quote = React16.forwardRef((props, forwardedRef) => React16.createElement("q", { ...props, ref: forwardedRef, className: (0, import_classnames13.default)("rt-Quote", props.className) }));
Quote.displayName = "Quote";

// node_modules/@radix-ui/themes/dist/esm/components/strong.js
var React17 = __toESM(require_react());
var import_classnames14 = __toESM(require_classnames());
var Strong = React17.forwardRef((props, forwardedRef) => React17.createElement("strong", { ...props, ref: forwardedRef, className: (0, import_classnames14.default)("rt-Strong", props.className) }));
Strong.displayName = "Strong";

// node_modules/@radix-ui/themes/dist/esm/components/checkbox.js
var React21 = __toESM(require_react());
var import_classnames15 = __toESM(require_classnames());

// node_modules/@radix-ui/react-checkbox/dist/index.mjs
var React19 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-use-previous/dist/index.mjs
var React18 = __toESM(require_react(), 1);
function usePrevious(value) {
  const ref = React18.useRef({ value, previous: value });
  return React18.useMemo(() => {
    if (ref.current.value !== value) {
      ref.current.previous = ref.current.value;
      ref.current.value = value;
    }
    return ref.current.previous;
  }, [value]);
}

// node_modules/@radix-ui/react-checkbox/dist/index.mjs
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var CHECKBOX_NAME = "Checkbox";
var [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);
var [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
var Checkbox = React19.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeCheckbox,
      name,
      checked: checkedProp,
      defaultChecked,
      required,
      disabled,
      value = "on",
      onCheckedChange,
      ...checkboxProps
    } = props;
    const [button, setButton] = React19.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
    const hasConsumerStoppedPropagationRef = React19.useRef(false);
    const isFormControl = button ? Boolean(button.closest("form")) : true;
    const [checked = false, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked,
      onChange: onCheckedChange
    });
    const initialCheckedStateRef = React19.useRef(checked);
    React19.useEffect(() => {
      const form = button == null ? void 0 : button.form;
      if (form) {
        const reset = () => setChecked(initialCheckedStateRef.current);
        form.addEventListener("reset", reset);
        return () => form.removeEventListener("reset", reset);
      }
    }, [button, setChecked]);
    return (0, import_jsx_runtime4.jsxs)(CheckboxProvider, { scope: __scopeCheckbox, state: checked, disabled, children: [
      (0, import_jsx_runtime4.jsx)(
        Primitive.button,
        {
          type: "button",
          role: "checkbox",
          "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
          "aria-required": required,
          "data-state": getState(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          value,
          ...checkboxProps,
          ref: composedRefs,
          onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
            if (event.key === "Enter")
              event.preventDefault();
          }),
          onClick: composeEventHandlers(props.onClick, (event) => {
            setChecked((prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked);
            if (isFormControl) {
              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
              if (!hasConsumerStoppedPropagationRef.current)
                event.stopPropagation();
            }
          })
        }
      ),
      isFormControl && (0, import_jsx_runtime4.jsx)(
        BubbleInput,
        {
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled,
          style: { transform: "translateX(-100%)" }
        }
      )
    ] });
  }
);
Checkbox.displayName = CHECKBOX_NAME;
var INDICATOR_NAME = "CheckboxIndicator";
var CheckboxIndicator = React19.forwardRef(
  (props, forwardedRef) => {
    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;
    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);
    return (0, import_jsx_runtime4.jsx)(Presence, { present: forceMount || isIndeterminate(context.state) || context.state === true, children: (0, import_jsx_runtime4.jsx)(
      Primitive.span,
      {
        "data-state": getState(context.state),
        "data-disabled": context.disabled ? "" : void 0,
        ...indicatorProps,
        ref: forwardedRef,
        style: { pointerEvents: "none", ...props.style }
      }
    ) });
  }
);
CheckboxIndicator.displayName = INDICATOR_NAME;
var BubbleInput = (props) => {
  const { control, checked, bubbles = true, ...inputProps } = props;
  const ref = React19.useRef(null);
  const prevChecked = usePrevious(checked);
  const controlSize = useSize(control);
  React19.useEffect(() => {
    const input = ref.current;
    const inputProto = window.HTMLInputElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(inputProto, "checked");
    const setChecked = descriptor.set;
    if (prevChecked !== checked && setChecked) {
      const event = new Event("click", { bubbles });
      input.indeterminate = isIndeterminate(checked);
      setChecked.call(input, isIndeterminate(checked) ? false : checked);
      input.dispatchEvent(event);
    }
  }, [prevChecked, checked, bubbles]);
  return (0, import_jsx_runtime4.jsx)(
    "input",
    {
      type: "checkbox",
      "aria-hidden": true,
      defaultChecked: isIndeterminate(checked) ? false : checked,
      ...inputProps,
      tabIndex: -1,
      ref,
      style: {
        ...props.style,
        ...controlSize,
        position: "absolute",
        pointerEvents: "none",
        opacity: 0,
        margin: 0
      }
    }
  );
};
function isIndeterminate(checked) {
  return checked === "indeterminate";
}
function getState(checked) {
  return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}
var Root5 = Checkbox;
var Indicator = CheckboxIndicator;

// node_modules/@radix-ui/themes/dist/esm/components/checkbox.props.js
var sizes7 = ["1", "2", "3"];
var variants2 = ["classic", "surface", "soft"];
var checkboxPropDefs = {
  size: { type: "enum", values: sizes7, default: "2", responsive: true },
  variant: { type: "enum", values: variants2, default: "surface" },
  color: colorProp,
  highContrast: highContrastProp
};

// node_modules/@radix-ui/themes/dist/esm/icons.js
var React20 = __toESM(require_react());
var ThickCheckIcon = React20.forwardRef(({ color = "currentColor", ...props }, forwardedRef) => {
  return React20.createElement(
    "svg",
    { width: "9", height: "9", viewBox: "0 0 9 9", fill: color, xmlns: "http://www.w3.org/2000/svg", ...props, ref: forwardedRef },
    React20.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M8.53547 0.62293C8.88226 0.849446 8.97976 1.3142 8.75325 1.66099L4.5083 8.1599C4.38833 8.34356 4.19397 8.4655 3.9764 8.49358C3.75883 8.52167 3.53987 8.45309 3.3772 8.30591L0.616113 5.80777C0.308959 5.52987 0.285246 5.05559 0.563148 4.74844C0.84105 4.44128 1.31533 4.41757 1.62249 4.69547L3.73256 6.60459L7.49741 0.840706C7.72393 0.493916 8.18868 0.396414 8.53547 0.62293Z" })
  );
});
ThickCheckIcon.displayName = "ThickCheckIcon";
var ChevronDownIcon = React20.forwardRef(({ color = "currentColor", ...props }, forwardedRef) => {
  return React20.createElement(
    "svg",
    { width: "9", height: "9", viewBox: "0 0 9 9", fill: color, xmlns: "http://www.w3.org/2000/svg", ...props, ref: forwardedRef },
    React20.createElement("path", { d: "M0.135232 3.15803C0.324102 2.95657 0.640521 2.94637 0.841971 3.13523L4.5 6.56464L8.158 3.13523C8.3595 2.94637 8.6759 2.95657 8.8648 3.15803C9.0536 3.35949 9.0434 3.67591 8.842 3.86477L4.84197 7.6148C4.64964 7.7951 4.35036 7.7951 4.15803 7.6148L0.158031 3.86477C-0.0434285 3.67591 -0.0536285 3.35949 0.135232 3.15803Z" })
  );
});
ChevronDownIcon.displayName = "ChevronDownIcon";
var ThickChevronRightIcon = React20.forwardRef(({ color = "currentColor", ...props }, forwardedRef) => {
  return React20.createElement(
    "svg",
    { width: "9", height: "9", viewBox: "0 0 9 9", fill: color, xmlns: "http://www.w3.org/2000/svg", ...props, ref: forwardedRef },
    React20.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M3.23826 0.201711C3.54108 -0.0809141 4.01567 -0.0645489 4.29829 0.238264L7.79829 3.98826C8.06724 4.27642 8.06724 4.72359 7.79829 5.01174L4.29829 8.76174C4.01567 9.06455 3.54108 9.08092 3.23826 8.79829C2.93545 8.51567 2.91909 8.04108 3.20171 7.73826L6.22409 4.5L3.20171 1.26174C2.91909 0.958928 2.93545 0.484337 3.23826 0.201711Z" })
  );
});
ThickChevronRightIcon.displayName = "ThickChevronRightIcon";
var InfoCircledIcon = React20.forwardRef(({ color = "currentColor", ...props }, forwardedRef) => {
  return React20.createElement(
    "svg",
    { width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props, ref: forwardedRef },
    React20.createElement("path", { d: "M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82707 7.49972C1.82707 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82707 10.6327 1.82707 7.49972ZM8.24992 4.49999C8.24992 4.9142 7.91413 5.24999 7.49992 5.24999C7.08571 5.24999 6.74992 4.9142 6.74992 4.49999C6.74992 4.08577 7.08571 3.74999 7.49992 3.74999C7.91413 3.74999 8.24992 4.08577 8.24992 4.49999ZM6.00003 5.99999H6.50003H7.50003C7.77618 5.99999 8.00003 6.22384 8.00003 6.49999V9.99999H8.50003H9.00003V11H8.50003H7.50003H6.50003H6.00003V9.99999H6.50003H7.00003V6.99999H6.50003H6.00003V5.99999Z", fill: color, fillRule: "evenodd", clipRule: "evenodd" })
  );
});
InfoCircledIcon.displayName = "InfoCircledIcon";

// node_modules/@radix-ui/themes/dist/esm/components/checkbox.js
var Checkbox2 = React21.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, style, size = checkboxPropDefs.size.default, variant = checkboxPropDefs.variant.default, color = checkboxPropDefs.color.default, highContrast = checkboxPropDefs.highContrast.default, ...checkboxProps } = marginRest;
  return React21.createElement(
    "span",
    { className: (0, import_classnames15.default)("rt-CheckboxRoot", className, withBreakpoints(size, "rt-r-size"), withMarginProps(marginProps)), style },
    React21.createElement(
      Root5,
      { "data-accent-color": color, ...checkboxProps, ref: forwardedRef, className: (0, import_classnames15.default)("rt-reset", "rt-CheckboxButton", `rt-variant-${variant}`, {
        "rt-high-contrast": highContrast
      }) },
      React21.createElement(
        Indicator,
        { className: "rt-CheckboxIndicator" },
        React21.createElement(ThickCheckIcon, { className: "rt-CheckboxIndicatorIcon" })
      )
    )
  );
});
Checkbox2.displayName = "Checkbox";

// node_modules/@radix-ui/themes/dist/esm/components/radio-group.js
var React24 = __toESM(require_react());
var import_classnames16 = __toESM(require_classnames());

// node_modules/@radix-ui/react-radio-group/dist/index.mjs
var React22 = __toESM(require_react(), 1);
var React23 = __toESM(require_react(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var RADIO_NAME = "Radio";
var [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);
var [RadioProvider, useRadioContext] = createRadioContext(RADIO_NAME);
var Radio = React23.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeRadio,
      name,
      checked = false,
      required,
      disabled,
      value = "on",
      onCheck,
      ...radioProps
    } = props;
    const [button, setButton] = React23.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
    const hasConsumerStoppedPropagationRef = React23.useRef(false);
    const isFormControl = button ? Boolean(button.closest("form")) : true;
    return (0, import_jsx_runtime5.jsxs)(RadioProvider, { scope: __scopeRadio, checked, disabled, children: [
      (0, import_jsx_runtime5.jsx)(
        Primitive.button,
        {
          type: "button",
          role: "radio",
          "aria-checked": checked,
          "data-state": getState2(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          value,
          ...radioProps,
          ref: composedRefs,
          onClick: composeEventHandlers(props.onClick, (event) => {
            if (!checked)
              onCheck == null ? void 0 : onCheck();
            if (isFormControl) {
              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
              if (!hasConsumerStoppedPropagationRef.current)
                event.stopPropagation();
            }
          })
        }
      ),
      isFormControl && (0, import_jsx_runtime5.jsx)(
        BubbleInput2,
        {
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled,
          style: { transform: "translateX(-100%)" }
        }
      )
    ] });
  }
);
Radio.displayName = RADIO_NAME;
var INDICATOR_NAME2 = "RadioIndicator";
var RadioIndicator = React23.forwardRef(
  (props, forwardedRef) => {
    const { __scopeRadio, forceMount, ...indicatorProps } = props;
    const context = useRadioContext(INDICATOR_NAME2, __scopeRadio);
    return (0, import_jsx_runtime5.jsx)(Presence, { present: forceMount || context.checked, children: (0, import_jsx_runtime5.jsx)(
      Primitive.span,
      {
        "data-state": getState2(context.checked),
        "data-disabled": context.disabled ? "" : void 0,
        ...indicatorProps,
        ref: forwardedRef
      }
    ) });
  }
);
RadioIndicator.displayName = INDICATOR_NAME2;
var BubbleInput2 = (props) => {
  const { control, checked, bubbles = true, ...inputProps } = props;
  const ref = React23.useRef(null);
  const prevChecked = usePrevious(checked);
  const controlSize = useSize(control);
  React23.useEffect(() => {
    const input = ref.current;
    const inputProto = window.HTMLInputElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(inputProto, "checked");
    const setChecked = descriptor.set;
    if (prevChecked !== checked && setChecked) {
      const event = new Event("click", { bubbles });
      setChecked.call(input, checked);
      input.dispatchEvent(event);
    }
  }, [prevChecked, checked, bubbles]);
  return (0, import_jsx_runtime5.jsx)(
    "input",
    {
      type: "radio",
      "aria-hidden": true,
      defaultChecked: checked,
      ...inputProps,
      tabIndex: -1,
      ref,
      style: {
        ...props.style,
        ...controlSize,
        position: "absolute",
        pointerEvents: "none",
        opacity: 0,
        margin: 0
      }
    }
  );
};
function getState2(checked) {
  return checked ? "checked" : "unchecked";
}
var ARROW_KEYS = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
var RADIO_GROUP_NAME = "RadioGroup";
var [createRadioGroupContext, createRadioGroupScope] = createContextScope(RADIO_GROUP_NAME, [
  createRovingFocusGroupScope,
  createRadioScope
]);
var useRovingFocusGroupScope = createRovingFocusGroupScope();
var useRadioScope = createRadioScope();
var [RadioGroupProvider, useRadioGroupContext] = createRadioGroupContext(RADIO_GROUP_NAME);
var RadioGroup3 = React22.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeRadioGroup,
      name,
      defaultValue,
      value: valueProp,
      required = false,
      disabled = false,
      orientation,
      dir,
      loop = true,
      onValueChange,
      ...groupProps
    } = props;
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);
    const direction = useDirection(dir);
    const [value, setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue,
      onChange: onValueChange
    });
    return (0, import_jsx_runtime6.jsx)(
      RadioGroupProvider,
      {
        scope: __scopeRadioGroup,
        name,
        required,
        disabled,
        value,
        onValueChange: setValue,
        children: (0, import_jsx_runtime6.jsx)(
          Root,
          {
            asChild: true,
            ...rovingFocusGroupScope,
            orientation,
            dir: direction,
            loop,
            children: (0, import_jsx_runtime6.jsx)(
              Primitive.div,
              {
                role: "radiogroup",
                "aria-required": required,
                "aria-orientation": orientation,
                "data-disabled": disabled ? "" : void 0,
                dir: direction,
                ...groupProps,
                ref: forwardedRef
              }
            )
          }
        )
      }
    );
  }
);
RadioGroup3.displayName = RADIO_GROUP_NAME;
var ITEM_NAME = "RadioGroupItem";
var RadioGroupItem = React22.forwardRef(
  (props, forwardedRef) => {
    const { __scopeRadioGroup, disabled, ...itemProps } = props;
    const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);
    const isDisabled = context.disabled || disabled;
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);
    const radioScope = useRadioScope(__scopeRadioGroup);
    const ref = React22.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const checked = context.value === itemProps.value;
    const isArrowKeyPressedRef = React22.useRef(false);
    React22.useEffect(() => {
      const handleKeyDown = (event) => {
        if (ARROW_KEYS.includes(event.key)) {
          isArrowKeyPressedRef.current = true;
        }
      };
      const handleKeyUp = () => isArrowKeyPressedRef.current = false;
      document.addEventListener("keydown", handleKeyDown);
      document.addEventListener("keyup", handleKeyUp);
      return () => {
        document.removeEventListener("keydown", handleKeyDown);
        document.removeEventListener("keyup", handleKeyUp);
      };
    }, []);
    return (0, import_jsx_runtime6.jsx)(
      Item,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        focusable: !isDisabled,
        active: checked,
        children: (0, import_jsx_runtime6.jsx)(
          Radio,
          {
            disabled: isDisabled,
            required: context.required,
            checked,
            ...radioScope,
            ...itemProps,
            name: context.name,
            ref: composedRefs,
            onCheck: () => context.onValueChange(itemProps.value),
            onKeyDown: composeEventHandlers((event) => {
              if (event.key === "Enter")
                event.preventDefault();
            }),
            onFocus: composeEventHandlers(itemProps.onFocus, () => {
              var _a;
              if (isArrowKeyPressedRef.current)
                (_a = ref.current) == null ? void 0 : _a.click();
            })
          }
        )
      }
    );
  }
);
RadioGroupItem.displayName = ITEM_NAME;
var INDICATOR_NAME22 = "RadioGroupIndicator";
var RadioGroupIndicator = React22.forwardRef(
  (props, forwardedRef) => {
    const { __scopeRadioGroup, ...indicatorProps } = props;
    const radioScope = useRadioScope(__scopeRadioGroup);
    return (0, import_jsx_runtime6.jsx)(RadioIndicator, { ...radioScope, ...indicatorProps, ref: forwardedRef });
  }
);
RadioGroupIndicator.displayName = INDICATOR_NAME22;
var Root23 = RadioGroup3;
var Item23 = RadioGroupItem;
var Indicator2 = RadioGroupIndicator;

// node_modules/@radix-ui/themes/dist/esm/components/radio-group.props.js
var sizes8 = ["1", "2", "3"];
var variants3 = ["classic", "surface", "soft"];
var radioGroupPropDefs = {
  size: { type: "enum", values: sizes8, default: "2", responsive: true },
  variant: { type: "enum", values: variants3, default: "surface" },
  color: colorProp,
  highContrast: highContrastProp
};

// node_modules/@radix-ui/themes/dist/esm/components/radio-group.js
var RadioGroupRoot = React24.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, size = radioGroupPropDefs.size.default, variant = radioGroupPropDefs.variant.default, color = radioGroupPropDefs.color.default, highContrast = radioGroupPropDefs.highContrast.default, ...rootProps } = marginRest;
  return React24.createElement(Root23, { "data-accent-color": color, ...rootProps, ref: forwardedRef, className: (0, import_classnames16.default)("rt-RadioGroupRoot", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast }, withMarginProps(marginProps)) });
});
RadioGroupRoot.displayName = "RadioGroupRoot";
var RadioGroupItem2 = React24.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, style, ...itemProps } = marginRest;
  return React24.createElement(
    "span",
    { className: (0, import_classnames16.default)("rt-RadioGroupItem", className, withMarginProps(marginProps)), style },
    React24.createElement(
      Item23,
      { ...itemProps, ref: forwardedRef, className: (0, import_classnames16.default)("rt-reset", "rt-RadioGroupButton") },
      React24.createElement(Indicator2, { className: "rt-RadioGroupIndicator" })
    )
  );
});
RadioGroupItem2.displayName = "RadioGroupItem";
var RadioGroup4 = Object.assign({}, {
  Root: RadioGroupRoot,
  Item: RadioGroupItem2
});

// node_modules/@radix-ui/themes/dist/esm/components/select.js
var React28 = __toESM(require_react());
var import_classnames17 = __toESM(require_classnames());

// node_modules/@radix-ui/react-select/dist/index.mjs
var React25 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);

// node_modules/@radix-ui/number/dist/index.mjs
function clamp(value, [min, max]) {
  return Math.min(max, Math.max(min, value));
}

// node_modules/@radix-ui/react-select/dist/index.mjs
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var OPEN_KEYS = [" ", "Enter", "ArrowUp", "ArrowDown"];
var SELECTION_KEYS = [" ", "Enter"];
var SELECT_NAME = "Select";
var [Collection, useCollection, createCollectionScope] = createCollection(SELECT_NAME);
var [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [
  createCollectionScope,
  createPopperScope
]);
var usePopperScope2 = createPopperScope();
var [SelectProvider, useSelectContext] = createSelectContext(SELECT_NAME);
var [SelectNativeOptionsProvider, useSelectNativeOptionsContext] = createSelectContext(SELECT_NAME);
var Select = (props) => {
  const {
    __scopeSelect,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    value: valueProp,
    defaultValue,
    onValueChange,
    dir,
    name,
    autoComplete,
    disabled,
    required
  } = props;
  const popperScope = usePopperScope2(__scopeSelect);
  const [trigger, setTrigger] = React25.useState(null);
  const [valueNode, setValueNode] = React25.useState(null);
  const [valueNodeHasChildren, setValueNodeHasChildren] = React25.useState(false);
  const direction = useDirection(dir);
  const [open = false, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  const [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange: onValueChange
  });
  const triggerPointerDownPosRef = React25.useRef(null);
  const isFormControl = trigger ? Boolean(trigger.closest("form")) : true;
  const [nativeOptionsSet, setNativeOptionsSet] = React25.useState(/* @__PURE__ */ new Set());
  const nativeSelectKey = Array.from(nativeOptionsSet).map((option) => option.props.value).join(";");
  return (0, import_jsx_runtime7.jsx)(Root2, { ...popperScope, children: (0, import_jsx_runtime7.jsxs)(
    SelectProvider,
    {
      required,
      scope: __scopeSelect,
      trigger,
      onTriggerChange: setTrigger,
      valueNode,
      onValueNodeChange: setValueNode,
      valueNodeHasChildren,
      onValueNodeHasChildrenChange: setValueNodeHasChildren,
      contentId: useId(),
      value,
      onValueChange: setValue,
      open,
      onOpenChange: setOpen,
      dir: direction,
      triggerPointerDownPosRef,
      disabled,
      children: [
        (0, import_jsx_runtime7.jsx)(Collection.Provider, { scope: __scopeSelect, children: (0, import_jsx_runtime7.jsx)(
          SelectNativeOptionsProvider,
          {
            scope: props.__scopeSelect,
            onNativeOptionAdd: React25.useCallback((option) => {
              setNativeOptionsSet((prev) => new Set(prev).add(option));
            }, []),
            onNativeOptionRemove: React25.useCallback((option) => {
              setNativeOptionsSet((prev) => {
                const optionsSet = new Set(prev);
                optionsSet.delete(option);
                return optionsSet;
              });
            }, []),
            children
          }
        ) }),
        isFormControl ? (0, import_jsx_runtime7.jsxs)(
          BubbleSelect,
          {
            "aria-hidden": true,
            required,
            tabIndex: -1,
            name,
            autoComplete,
            value,
            onChange: (event) => setValue(event.target.value),
            disabled,
            children: [
              value === void 0 ? (0, import_jsx_runtime7.jsx)("option", { value: "" }) : null,
              Array.from(nativeOptionsSet)
            ]
          },
          nativeSelectKey
        ) : null
      ]
    }
  ) });
};
Select.displayName = SELECT_NAME;
var TRIGGER_NAME2 = "SelectTrigger";
var SelectTrigger = React25.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, disabled = false, ...triggerProps } = props;
    const popperScope = usePopperScope2(__scopeSelect);
    const context = useSelectContext(TRIGGER_NAME2, __scopeSelect);
    const isDisabled = context.disabled || disabled;
    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);
    const getItems = useCollection(__scopeSelect);
    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {
      const enabledItems = getItems().filter((item) => !item.disabled);
      const currentItem = enabledItems.find((item) => item.value === context.value);
      const nextItem = findNextItem(enabledItems, search, currentItem);
      if (nextItem !== void 0) {
        context.onValueChange(nextItem.value);
      }
    });
    const handleOpen = () => {
      if (!isDisabled) {
        context.onOpenChange(true);
        resetTypeahead();
      }
    };
    return (0, import_jsx_runtime7.jsx)(Anchor, { asChild: true, ...popperScope, children: (0, import_jsx_runtime7.jsx)(
      Primitive.button,
      {
        type: "button",
        role: "combobox",
        "aria-controls": context.contentId,
        "aria-expanded": context.open,
        "aria-required": context.required,
        "aria-autocomplete": "none",
        dir: context.dir,
        "data-state": context.open ? "open" : "closed",
        disabled: isDisabled,
        "data-disabled": isDisabled ? "" : void 0,
        "data-placeholder": shouldShowPlaceholder(context.value) ? "" : void 0,
        ...triggerProps,
        ref: composedRefs,
        onClick: composeEventHandlers(triggerProps.onClick, (event) => {
          event.currentTarget.focus();
        }),
        onPointerDown: composeEventHandlers(triggerProps.onPointerDown, (event) => {
          const target = event.target;
          if (target.hasPointerCapture(event.pointerId)) {
            target.releasePointerCapture(event.pointerId);
          }
          if (event.button === 0 && event.ctrlKey === false) {
            handleOpen();
            context.triggerPointerDownPosRef.current = {
              x: Math.round(event.pageX),
              y: Math.round(event.pageY)
            };
            event.preventDefault();
          }
        }),
        onKeyDown: composeEventHandlers(triggerProps.onKeyDown, (event) => {
          const isTypingAhead = searchRef.current !== "";
          const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
          if (!isModifierKey && event.key.length === 1)
            handleTypeaheadSearch(event.key);
          if (isTypingAhead && event.key === " ")
            return;
          if (OPEN_KEYS.includes(event.key)) {
            handleOpen();
            event.preventDefault();
          }
        })
      }
    ) });
  }
);
SelectTrigger.displayName = TRIGGER_NAME2;
var VALUE_NAME = "SelectValue";
var SelectValue = React25.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, className, style, children, placeholder = "", ...valueProps } = props;
    const context = useSelectContext(VALUE_NAME, __scopeSelect);
    const { onValueNodeHasChildrenChange } = context;
    const hasChildren = children !== void 0;
    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);
    useLayoutEffect2(() => {
      onValueNodeHasChildrenChange(hasChildren);
    }, [onValueNodeHasChildrenChange, hasChildren]);
    return (0, import_jsx_runtime7.jsx)(
      Primitive.span,
      {
        ...valueProps,
        ref: composedRefs,
        style: { pointerEvents: "none" },
        children: shouldShowPlaceholder(context.value) ? (0, import_jsx_runtime7.jsx)(import_jsx_runtime7.Fragment, { children: placeholder }) : children
      }
    );
  }
);
SelectValue.displayName = VALUE_NAME;
var ICON_NAME = "SelectIcon";
var SelectIcon = React25.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, children, ...iconProps } = props;
    return (0, import_jsx_runtime7.jsx)(Primitive.span, { "aria-hidden": true, ...iconProps, ref: forwardedRef, children: children || "▼" });
  }
);
SelectIcon.displayName = ICON_NAME;
var PORTAL_NAME2 = "SelectPortal";
var SelectPortal = (props) => {
  return (0, import_jsx_runtime7.jsx)(Portal, { asChild: true, ...props });
};
SelectPortal.displayName = PORTAL_NAME2;
var CONTENT_NAME2 = "SelectContent";
var SelectContent = React25.forwardRef(
  (props, forwardedRef) => {
    const context = useSelectContext(CONTENT_NAME2, props.__scopeSelect);
    const [fragment, setFragment] = React25.useState();
    useLayoutEffect2(() => {
      setFragment(new DocumentFragment());
    }, []);
    if (!context.open) {
      const frag = fragment;
      return frag ? ReactDOM.createPortal(
        (0, import_jsx_runtime7.jsx)(SelectContentProvider, { scope: props.__scopeSelect, children: (0, import_jsx_runtime7.jsx)(Collection.Slot, { scope: props.__scopeSelect, children: (0, import_jsx_runtime7.jsx)("div", { children: props.children }) }) }),
        frag
      ) : null;
    }
    return (0, import_jsx_runtime7.jsx)(SelectContentImpl, { ...props, ref: forwardedRef });
  }
);
SelectContent.displayName = CONTENT_NAME2;
var CONTENT_MARGIN = 10;
var [SelectContentProvider, useSelectContentContext] = createSelectContext(CONTENT_NAME2);
var CONTENT_IMPL_NAME = "SelectContentImpl";
var SelectContentImpl = React25.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSelect,
      position = "item-aligned",
      onCloseAutoFocus,
      onEscapeKeyDown,
      onPointerDownOutside,
      //
      // PopperContent props
      side,
      sideOffset,
      align,
      alignOffset,
      arrowPadding,
      collisionBoundary,
      collisionPadding,
      sticky,
      hideWhenDetached,
      avoidCollisions,
      //
      ...contentProps
    } = props;
    const context = useSelectContext(CONTENT_NAME2, __scopeSelect);
    const [content, setContent] = React25.useState(null);
    const [viewport, setViewport] = React25.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
    const [selectedItem, setSelectedItem] = React25.useState(null);
    const [selectedItemText, setSelectedItemText] = React25.useState(
      null
    );
    const getItems = useCollection(__scopeSelect);
    const [isPositioned, setIsPositioned] = React25.useState(false);
    const firstValidItemFoundRef = React25.useRef(false);
    React25.useEffect(() => {
      if (content)
        return hideOthers(content);
    }, [content]);
    useFocusGuards();
    const focusFirst = React25.useCallback(
      (candidates) => {
        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);
        const [lastItem] = restItems.slice(-1);
        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
        for (const candidate of candidates) {
          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
            return;
          candidate == null ? void 0 : candidate.scrollIntoView({ block: "nearest" });
          if (candidate === firstItem && viewport)
            viewport.scrollTop = 0;
          if (candidate === lastItem && viewport)
            viewport.scrollTop = viewport.scrollHeight;
          candidate == null ? void 0 : candidate.focus();
          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
            return;
        }
      },
      [getItems, viewport]
    );
    const focusSelectedItem = React25.useCallback(
      () => focusFirst([selectedItem, content]),
      [focusFirst, selectedItem, content]
    );
    React25.useEffect(() => {
      if (isPositioned) {
        focusSelectedItem();
      }
    }, [isPositioned, focusSelectedItem]);
    const { onOpenChange, triggerPointerDownPosRef } = context;
    React25.useEffect(() => {
      if (content) {
        let pointerMoveDelta = { x: 0, y: 0 };
        const handlePointerMove = (event) => {
          var _a, _b;
          pointerMoveDelta = {
            x: Math.abs(Math.round(event.pageX) - (((_a = triggerPointerDownPosRef.current) == null ? void 0 : _a.x) ?? 0)),
            y: Math.abs(Math.round(event.pageY) - (((_b = triggerPointerDownPosRef.current) == null ? void 0 : _b.y) ?? 0))
          };
        };
        const handlePointerUp = (event) => {
          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {
            event.preventDefault();
          } else {
            if (!content.contains(event.target)) {
              onOpenChange(false);
            }
          }
          document.removeEventListener("pointermove", handlePointerMove);
          triggerPointerDownPosRef.current = null;
        };
        if (triggerPointerDownPosRef.current !== null) {
          document.addEventListener("pointermove", handlePointerMove);
          document.addEventListener("pointerup", handlePointerUp, { capture: true, once: true });
        }
        return () => {
          document.removeEventListener("pointermove", handlePointerMove);
          document.removeEventListener("pointerup", handlePointerUp, { capture: true });
        };
      }
    }, [content, onOpenChange, triggerPointerDownPosRef]);
    React25.useEffect(() => {
      const close = () => onOpenChange(false);
      window.addEventListener("blur", close);
      window.addEventListener("resize", close);
      return () => {
        window.removeEventListener("blur", close);
        window.removeEventListener("resize", close);
      };
    }, [onOpenChange]);
    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {
      const enabledItems = getItems().filter((item) => !item.disabled);
      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);
      const nextItem = findNextItem(enabledItems, search, currentItem);
      if (nextItem) {
        setTimeout(() => nextItem.ref.current.focus());
      }
    });
    const itemRefCallback = React25.useCallback(
      (node, value, disabled) => {
        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
        const isSelectedItem = context.value !== void 0 && context.value === value;
        if (isSelectedItem || isFirstValidItem) {
          setSelectedItem(node);
          if (isFirstValidItem)
            firstValidItemFoundRef.current = true;
        }
      },
      [context.value]
    );
    const handleItemLeave = React25.useCallback(() => content == null ? void 0 : content.focus(), [content]);
    const itemTextRefCallback = React25.useCallback(
      (node, value, disabled) => {
        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
        const isSelectedItem = context.value !== void 0 && context.value === value;
        if (isSelectedItem || isFirstValidItem) {
          setSelectedItemText(node);
        }
      },
      [context.value]
    );
    const SelectPosition = position === "popper" ? SelectPopperPosition : SelectItemAlignedPosition;
    const popperContentProps = SelectPosition === SelectPopperPosition ? {
      side,
      sideOffset,
      align,
      alignOffset,
      arrowPadding,
      collisionBoundary,
      collisionPadding,
      sticky,
      hideWhenDetached,
      avoidCollisions
    } : {};
    return (0, import_jsx_runtime7.jsx)(
      SelectContentProvider,
      {
        scope: __scopeSelect,
        content,
        viewport,
        onViewportChange: setViewport,
        itemRefCallback,
        selectedItem,
        onItemLeave: handleItemLeave,
        itemTextRefCallback,
        focusSelectedItem,
        selectedItemText,
        position,
        isPositioned,
        searchRef,
        children: (0, import_jsx_runtime7.jsx)(Combination_default, { as: Slot, allowPinchZoom: true, children: (0, import_jsx_runtime7.jsx)(
          FocusScope,
          {
            asChild: true,
            trapped: context.open,
            onMountAutoFocus: (event) => {
              event.preventDefault();
            },
            onUnmountAutoFocus: composeEventHandlers(onCloseAutoFocus, (event) => {
              var _a;
              (_a = context.trigger) == null ? void 0 : _a.focus({ preventScroll: true });
              event.preventDefault();
            }),
            children: (0, import_jsx_runtime7.jsx)(
              DismissableLayer,
              {
                asChild: true,
                disableOutsidePointerEvents: true,
                onEscapeKeyDown,
                onPointerDownOutside,
                onFocusOutside: (event) => event.preventDefault(),
                onDismiss: () => context.onOpenChange(false),
                children: (0, import_jsx_runtime7.jsx)(
                  SelectPosition,
                  {
                    role: "listbox",
                    id: context.contentId,
                    "data-state": context.open ? "open" : "closed",
                    dir: context.dir,
                    onContextMenu: (event) => event.preventDefault(),
                    ...contentProps,
                    ...popperContentProps,
                    onPlaced: () => setIsPositioned(true),
                    ref: composedRefs,
                    style: {
                      // flex layout so we can place the scroll buttons properly
                      display: "flex",
                      flexDirection: "column",
                      // reset the outline by default as the content MAY get focused
                      outline: "none",
                      ...contentProps.style
                    },
                    onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event) => {
                      const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
                      if (event.key === "Tab")
                        event.preventDefault();
                      if (!isModifierKey && event.key.length === 1)
                        handleTypeaheadSearch(event.key);
                      if (["ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
                        const items = getItems().filter((item) => !item.disabled);
                        let candidateNodes = items.map((item) => item.ref.current);
                        if (["ArrowUp", "End"].includes(event.key)) {
                          candidateNodes = candidateNodes.slice().reverse();
                        }
                        if (["ArrowUp", "ArrowDown"].includes(event.key)) {
                          const currentElement = event.target;
                          const currentIndex = candidateNodes.indexOf(currentElement);
                          candidateNodes = candidateNodes.slice(currentIndex + 1);
                        }
                        setTimeout(() => focusFirst(candidateNodes));
                        event.preventDefault();
                      }
                    })
                  }
                )
              }
            )
          }
        ) })
      }
    );
  }
);
SelectContentImpl.displayName = CONTENT_IMPL_NAME;
var ITEM_ALIGNED_POSITION_NAME = "SelectItemAlignedPosition";
var SelectItemAlignedPosition = React25.forwardRef((props, forwardedRef) => {
  const { __scopeSelect, onPlaced, ...popperProps } = props;
  const context = useSelectContext(CONTENT_NAME2, __scopeSelect);
  const contentContext = useSelectContentContext(CONTENT_NAME2, __scopeSelect);
  const [contentWrapper, setContentWrapper] = React25.useState(null);
  const [content, setContent] = React25.useState(null);
  const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
  const getItems = useCollection(__scopeSelect);
  const shouldExpandOnScrollRef = React25.useRef(false);
  const shouldRepositionRef = React25.useRef(true);
  const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;
  const position = React25.useCallback(() => {
    if (context.trigger && context.valueNode && contentWrapper && content && viewport && selectedItem && selectedItemText) {
      const triggerRect = context.trigger.getBoundingClientRect();
      const contentRect = content.getBoundingClientRect();
      const valueNodeRect = context.valueNode.getBoundingClientRect();
      const itemTextRect = selectedItemText.getBoundingClientRect();
      if (context.dir !== "rtl") {
        const itemTextOffset = itemTextRect.left - contentRect.left;
        const left = valueNodeRect.left - itemTextOffset;
        const leftDelta = triggerRect.left - left;
        const minContentWidth = triggerRect.width + leftDelta;
        const contentWidth = Math.max(minContentWidth, contentRect.width);
        const rightEdge = window.innerWidth - CONTENT_MARGIN;
        const clampedLeft = clamp(left, [CONTENT_MARGIN, rightEdge - contentWidth]);
        contentWrapper.style.minWidth = minContentWidth + "px";
        contentWrapper.style.left = clampedLeft + "px";
      } else {
        const itemTextOffset = contentRect.right - itemTextRect.right;
        const right = window.innerWidth - valueNodeRect.right - itemTextOffset;
        const rightDelta = window.innerWidth - triggerRect.right - right;
        const minContentWidth = triggerRect.width + rightDelta;
        const contentWidth = Math.max(minContentWidth, contentRect.width);
        const leftEdge = window.innerWidth - CONTENT_MARGIN;
        const clampedRight = clamp(right, [CONTENT_MARGIN, leftEdge - contentWidth]);
        contentWrapper.style.minWidth = minContentWidth + "px";
        contentWrapper.style.right = clampedRight + "px";
      }
      const items = getItems();
      const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;
      const itemsHeight = viewport.scrollHeight;
      const contentStyles = window.getComputedStyle(content);
      const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);
      const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);
      const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);
      const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);
      const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth;
      const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);
      const viewportStyles = window.getComputedStyle(viewport);
      const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);
      const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);
      const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;
      const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;
      const selectedItemHalfHeight = selectedItem.offsetHeight / 2;
      const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;
      const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;
      const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;
      const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;
      if (willAlignWithoutTopOverflow) {
        const isLastItem = selectedItem === items[items.length - 1].ref.current;
        contentWrapper.style.bottom = "0px";
        const viewportOffsetBottom = content.clientHeight - viewport.offsetTop - viewport.offsetHeight;
        const clampedTriggerMiddleToBottomEdge = Math.max(
          triggerMiddleToBottomEdge,
          selectedItemHalfHeight + // viewport might have padding bottom, include it to avoid a scrollable viewport
          (isLastItem ? viewportPaddingBottom : 0) + viewportOffsetBottom + contentBorderBottomWidth
        );
        const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;
        contentWrapper.style.height = height + "px";
      } else {
        const isFirstItem = selectedItem === items[0].ref.current;
        contentWrapper.style.top = "0px";
        const clampedTopEdgeToTriggerMiddle = Math.max(
          topEdgeToTriggerMiddle,
          contentBorderTopWidth + viewport.offsetTop + // viewport might have padding top, include it to avoid a scrollable viewport
          (isFirstItem ? viewportPaddingTop : 0) + selectedItemHalfHeight
        );
        const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;
        contentWrapper.style.height = height + "px";
        viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;
      }
      contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;
      contentWrapper.style.minHeight = minContentHeight + "px";
      contentWrapper.style.maxHeight = availableHeight + "px";
      onPlaced == null ? void 0 : onPlaced();
      requestAnimationFrame(() => shouldExpandOnScrollRef.current = true);
    }
  }, [
    getItems,
    context.trigger,
    context.valueNode,
    contentWrapper,
    content,
    viewport,
    selectedItem,
    selectedItemText,
    context.dir,
    onPlaced
  ]);
  useLayoutEffect2(() => position(), [position]);
  const [contentZIndex, setContentZIndex] = React25.useState();
  useLayoutEffect2(() => {
    if (content)
      setContentZIndex(window.getComputedStyle(content).zIndex);
  }, [content]);
  const handleScrollButtonChange = React25.useCallback(
    (node) => {
      if (node && shouldRepositionRef.current === true) {
        position();
        focusSelectedItem == null ? void 0 : focusSelectedItem();
        shouldRepositionRef.current = false;
      }
    },
    [position, focusSelectedItem]
  );
  return (0, import_jsx_runtime7.jsx)(
    SelectViewportProvider,
    {
      scope: __scopeSelect,
      contentWrapper,
      shouldExpandOnScrollRef,
      onScrollButtonChange: handleScrollButtonChange,
      children: (0, import_jsx_runtime7.jsx)(
        "div",
        {
          ref: setContentWrapper,
          style: {
            display: "flex",
            flexDirection: "column",
            position: "fixed",
            zIndex: contentZIndex
          },
          children: (0, import_jsx_runtime7.jsx)(
            Primitive.div,
            {
              ...popperProps,
              ref: composedRefs,
              style: {
                // When we get the height of the content, it includes borders. If we were to set
                // the height without having `boxSizing: 'border-box'` it would be too big.
                boxSizing: "border-box",
                // We need to ensure the content doesn't get taller than the wrapper
                maxHeight: "100%",
                ...popperProps.style
              }
            }
          )
        }
      )
    }
  );
});
SelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;
var POPPER_POSITION_NAME = "SelectPopperPosition";
var SelectPopperPosition = React25.forwardRef((props, forwardedRef) => {
  const {
    __scopeSelect,
    align = "start",
    collisionPadding = CONTENT_MARGIN,
    ...popperProps
  } = props;
  const popperScope = usePopperScope2(__scopeSelect);
  return (0, import_jsx_runtime7.jsx)(
    Content,
    {
      ...popperScope,
      ...popperProps,
      ref: forwardedRef,
      align,
      collisionPadding,
      style: {
        // Ensure border-box for floating-ui calculations
        boxSizing: "border-box",
        ...popperProps.style,
        // re-namespace exposed content custom properties
        ...{
          "--radix-select-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-select-content-available-width": "var(--radix-popper-available-width)",
          "--radix-select-content-available-height": "var(--radix-popper-available-height)",
          "--radix-select-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-select-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    }
  );
});
SelectPopperPosition.displayName = POPPER_POSITION_NAME;
var [SelectViewportProvider, useSelectViewportContext] = createSelectContext(CONTENT_NAME2, {});
var VIEWPORT_NAME = "SelectViewport";
var SelectViewport = React25.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, nonce, ...viewportProps } = props;
    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);
    const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);
    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);
    const prevScrollTopRef = React25.useRef(0);
    return (0, import_jsx_runtime7.jsxs)(import_jsx_runtime7.Fragment, { children: [
      (0, import_jsx_runtime7.jsx)(
        "style",
        {
          dangerouslySetInnerHTML: {
            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`
          },
          nonce
        }
      ),
      (0, import_jsx_runtime7.jsx)(Collection.Slot, { scope: __scopeSelect, children: (0, import_jsx_runtime7.jsx)(
        Primitive.div,
        {
          "data-radix-select-viewport": "",
          role: "presentation",
          ...viewportProps,
          ref: composedRefs,
          style: {
            // we use position: 'relative' here on the `viewport` so that when we call
            // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport
            // (independent of the scrollUpButton).
            position: "relative",
            flex: 1,
            overflow: "auto",
            ...viewportProps.style
          },
          onScroll: composeEventHandlers(viewportProps.onScroll, (event) => {
            const viewport = event.currentTarget;
            const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;
            if ((shouldExpandOnScrollRef == null ? void 0 : shouldExpandOnScrollRef.current) && contentWrapper) {
              const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);
              if (scrolledBy > 0) {
                const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;
                const cssMinHeight = parseFloat(contentWrapper.style.minHeight);
                const cssHeight = parseFloat(contentWrapper.style.height);
                const prevHeight = Math.max(cssMinHeight, cssHeight);
                if (prevHeight < availableHeight) {
                  const nextHeight = prevHeight + scrolledBy;
                  const clampedNextHeight = Math.min(availableHeight, nextHeight);
                  const heightDiff = nextHeight - clampedNextHeight;
                  contentWrapper.style.height = clampedNextHeight + "px";
                  if (contentWrapper.style.bottom === "0px") {
                    viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;
                    contentWrapper.style.justifyContent = "flex-end";
                  }
                }
              }
            }
            prevScrollTopRef.current = viewport.scrollTop;
          })
        }
      ) })
    ] });
  }
);
SelectViewport.displayName = VIEWPORT_NAME;
var GROUP_NAME = "SelectGroup";
var [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME);
var SelectGroup = React25.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...groupProps } = props;
    const groupId = useId();
    return (0, import_jsx_runtime7.jsx)(SelectGroupContextProvider, { scope: __scopeSelect, id: groupId, children: (0, import_jsx_runtime7.jsx)(Primitive.div, { role: "group", "aria-labelledby": groupId, ...groupProps, ref: forwardedRef }) });
  }
);
SelectGroup.displayName = GROUP_NAME;
var LABEL_NAME = "SelectLabel";
var SelectLabel = React25.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...labelProps } = props;
    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);
    return (0, import_jsx_runtime7.jsx)(Primitive.div, { id: groupContext.id, ...labelProps, ref: forwardedRef });
  }
);
SelectLabel.displayName = LABEL_NAME;
var ITEM_NAME2 = "SelectItem";
var [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME2);
var SelectItem = React25.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSelect,
      value,
      disabled = false,
      textValue: textValueProp,
      ...itemProps
    } = props;
    const context = useSelectContext(ITEM_NAME2, __scopeSelect);
    const contentContext = useSelectContentContext(ITEM_NAME2, __scopeSelect);
    const isSelected = context.value === value;
    const [textValue, setTextValue] = React25.useState(textValueProp ?? "");
    const [isFocused, setIsFocused] = React25.useState(false);
    const composedRefs = useComposedRefs(
      forwardedRef,
      (node) => {
        var _a;
        return (_a = contentContext.itemRefCallback) == null ? void 0 : _a.call(contentContext, node, value, disabled);
      }
    );
    const textId = useId();
    const handleSelect = () => {
      if (!disabled) {
        context.onValueChange(value);
        context.onOpenChange(false);
      }
    };
    if (value === "") {
      throw new Error(
        "A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder."
      );
    }
    return (0, import_jsx_runtime7.jsx)(
      SelectItemContextProvider,
      {
        scope: __scopeSelect,
        value,
        disabled,
        textId,
        isSelected,
        onItemTextChange: React25.useCallback((node) => {
          setTextValue((prevTextValue) => prevTextValue || ((node == null ? void 0 : node.textContent) ?? "").trim());
        }, []),
        children: (0, import_jsx_runtime7.jsx)(
          Collection.ItemSlot,
          {
            scope: __scopeSelect,
            value,
            disabled,
            textValue,
            children: (0, import_jsx_runtime7.jsx)(
              Primitive.div,
              {
                role: "option",
                "aria-labelledby": textId,
                "data-highlighted": isFocused ? "" : void 0,
                "aria-selected": isSelected && isFocused,
                "data-state": isSelected ? "checked" : "unchecked",
                "aria-disabled": disabled || void 0,
                "data-disabled": disabled ? "" : void 0,
                tabIndex: disabled ? void 0 : -1,
                ...itemProps,
                ref: composedRefs,
                onFocus: composeEventHandlers(itemProps.onFocus, () => setIsFocused(true)),
                onBlur: composeEventHandlers(itemProps.onBlur, () => setIsFocused(false)),
                onPointerUp: composeEventHandlers(itemProps.onPointerUp, handleSelect),
                onPointerMove: composeEventHandlers(itemProps.onPointerMove, (event) => {
                  var _a;
                  if (disabled) {
                    (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);
                  } else {
                    event.currentTarget.focus({ preventScroll: true });
                  }
                }),
                onPointerLeave: composeEventHandlers(itemProps.onPointerLeave, (event) => {
                  var _a;
                  if (event.currentTarget === document.activeElement) {
                    (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);
                  }
                }),
                onKeyDown: composeEventHandlers(itemProps.onKeyDown, (event) => {
                  var _a;
                  const isTypingAhead = ((_a = contentContext.searchRef) == null ? void 0 : _a.current) !== "";
                  if (isTypingAhead && event.key === " ")
                    return;
                  if (SELECTION_KEYS.includes(event.key))
                    handleSelect();
                  if (event.key === " ")
                    event.preventDefault();
                })
              }
            )
          }
        )
      }
    );
  }
);
SelectItem.displayName = ITEM_NAME2;
var ITEM_TEXT_NAME = "SelectItemText";
var SelectItemText = React25.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, className, style, ...itemTextProps } = props;
    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);
    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);
    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);
    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);
    const [itemTextNode, setItemTextNode] = React25.useState(null);
    const composedRefs = useComposedRefs(
      forwardedRef,
      (node) => setItemTextNode(node),
      itemContext.onItemTextChange,
      (node) => {
        var _a;
        return (_a = contentContext.itemTextRefCallback) == null ? void 0 : _a.call(contentContext, node, itemContext.value, itemContext.disabled);
      }
    );
    const textContent = itemTextNode == null ? void 0 : itemTextNode.textContent;
    const nativeOption = React25.useMemo(
      () => (0, import_jsx_runtime7.jsx)("option", { value: itemContext.value, disabled: itemContext.disabled, children: textContent }, itemContext.value),
      [itemContext.disabled, itemContext.value, textContent]
    );
    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;
    useLayoutEffect2(() => {
      onNativeOptionAdd(nativeOption);
      return () => onNativeOptionRemove(nativeOption);
    }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);
    return (0, import_jsx_runtime7.jsxs)(import_jsx_runtime7.Fragment, { children: [
      (0, import_jsx_runtime7.jsx)(Primitive.span, { id: itemContext.textId, ...itemTextProps, ref: composedRefs }),
      itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren ? ReactDOM.createPortal(itemTextProps.children, context.valueNode) : null
    ] });
  }
);
SelectItemText.displayName = ITEM_TEXT_NAME;
var ITEM_INDICATOR_NAME = "SelectItemIndicator";
var SelectItemIndicator = React25.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...itemIndicatorProps } = props;
    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);
    return itemContext.isSelected ? (0, import_jsx_runtime7.jsx)(Primitive.span, { "aria-hidden": true, ...itemIndicatorProps, ref: forwardedRef }) : null;
  }
);
SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
var SCROLL_UP_BUTTON_NAME = "SelectScrollUpButton";
var SelectScrollUpButton = React25.forwardRef((props, forwardedRef) => {
  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
  const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
  const [canScrollUp, setCanScrollUp] = React25.useState(false);
  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);
  useLayoutEffect2(() => {
    if (contentContext.viewport && contentContext.isPositioned) {
      let handleScroll2 = function() {
        const canScrollUp2 = viewport.scrollTop > 0;
        setCanScrollUp(canScrollUp2);
      };
      var handleScroll = handleScroll2;
      const viewport = contentContext.viewport;
      handleScroll2();
      viewport.addEventListener("scroll", handleScroll2);
      return () => viewport.removeEventListener("scroll", handleScroll2);
    }
  }, [contentContext.viewport, contentContext.isPositioned]);
  return canScrollUp ? (0, import_jsx_runtime7.jsx)(
    SelectScrollButtonImpl,
    {
      ...props,
      ref: composedRefs,
      onAutoScroll: () => {
        const { viewport, selectedItem } = contentContext;
        if (viewport && selectedItem) {
          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;
        }
      }
    }
  ) : null;
});
SelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;
var SCROLL_DOWN_BUTTON_NAME = "SelectScrollDownButton";
var SelectScrollDownButton = React25.forwardRef((props, forwardedRef) => {
  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
  const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
  const [canScrollDown, setCanScrollDown] = React25.useState(false);
  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);
  useLayoutEffect2(() => {
    if (contentContext.viewport && contentContext.isPositioned) {
      let handleScroll2 = function() {
        const maxScroll = viewport.scrollHeight - viewport.clientHeight;
        const canScrollDown2 = Math.ceil(viewport.scrollTop) < maxScroll;
        setCanScrollDown(canScrollDown2);
      };
      var handleScroll = handleScroll2;
      const viewport = contentContext.viewport;
      handleScroll2();
      viewport.addEventListener("scroll", handleScroll2);
      return () => viewport.removeEventListener("scroll", handleScroll2);
    }
  }, [contentContext.viewport, contentContext.isPositioned]);
  return canScrollDown ? (0, import_jsx_runtime7.jsx)(
    SelectScrollButtonImpl,
    {
      ...props,
      ref: composedRefs,
      onAutoScroll: () => {
        const { viewport, selectedItem } = contentContext;
        if (viewport && selectedItem) {
          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;
        }
      }
    }
  ) : null;
});
SelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;
var SelectScrollButtonImpl = React25.forwardRef((props, forwardedRef) => {
  const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;
  const contentContext = useSelectContentContext("SelectScrollButton", __scopeSelect);
  const autoScrollTimerRef = React25.useRef(null);
  const getItems = useCollection(__scopeSelect);
  const clearAutoScrollTimer = React25.useCallback(() => {
    if (autoScrollTimerRef.current !== null) {
      window.clearInterval(autoScrollTimerRef.current);
      autoScrollTimerRef.current = null;
    }
  }, []);
  React25.useEffect(() => {
    return () => clearAutoScrollTimer();
  }, [clearAutoScrollTimer]);
  useLayoutEffect2(() => {
    var _a;
    const activeItem = getItems().find((item) => item.ref.current === document.activeElement);
    (_a = activeItem == null ? void 0 : activeItem.ref.current) == null ? void 0 : _a.scrollIntoView({ block: "nearest" });
  }, [getItems]);
  return (0, import_jsx_runtime7.jsx)(
    Primitive.div,
    {
      "aria-hidden": true,
      ...scrollIndicatorProps,
      ref: forwardedRef,
      style: { flexShrink: 0, ...scrollIndicatorProps.style },
      onPointerDown: composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {
        if (autoScrollTimerRef.current === null) {
          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);
        }
      }),
      onPointerMove: composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {
        var _a;
        (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);
        if (autoScrollTimerRef.current === null) {
          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);
        }
      }),
      onPointerLeave: composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {
        clearAutoScrollTimer();
      })
    }
  );
});
var SEPARATOR_NAME = "SelectSeparator";
var SelectSeparator = React25.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...separatorProps } = props;
    return (0, import_jsx_runtime7.jsx)(Primitive.div, { "aria-hidden": true, ...separatorProps, ref: forwardedRef });
  }
);
SelectSeparator.displayName = SEPARATOR_NAME;
var ARROW_NAME2 = "SelectArrow";
var SelectArrow = React25.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...arrowProps } = props;
    const popperScope = usePopperScope2(__scopeSelect);
    const context = useSelectContext(ARROW_NAME2, __scopeSelect);
    const contentContext = useSelectContentContext(ARROW_NAME2, __scopeSelect);
    return context.open && contentContext.position === "popper" ? (0, import_jsx_runtime7.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef }) : null;
  }
);
SelectArrow.displayName = ARROW_NAME2;
function shouldShowPlaceholder(value) {
  return value === "" || value === void 0;
}
var BubbleSelect = React25.forwardRef(
  (props, forwardedRef) => {
    const { value, ...selectProps } = props;
    const ref = React25.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const prevValue = usePrevious(value);
    React25.useEffect(() => {
      const select = ref.current;
      const selectProto = window.HTMLSelectElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(
        selectProto,
        "value"
      );
      const setValue = descriptor.set;
      if (prevValue !== value && setValue) {
        const event = new Event("change", { bubbles: true });
        setValue.call(select, value);
        select.dispatchEvent(event);
      }
    }, [prevValue, value]);
    return (0, import_jsx_runtime7.jsx)(VisuallyHidden, { asChild: true, children: (0, import_jsx_runtime7.jsx)("select", { ...selectProps, ref: composedRefs, defaultValue: value }) });
  }
);
BubbleSelect.displayName = "BubbleSelect";
function useTypeaheadSearch(onSearchChange) {
  const handleSearchChange = useCallbackRef(onSearchChange);
  const searchRef = React25.useRef("");
  const timerRef = React25.useRef(0);
  const handleTypeaheadSearch = React25.useCallback(
    (key) => {
      const search = searchRef.current + key;
      handleSearchChange(search);
      (function updateSearch(value) {
        searchRef.current = value;
        window.clearTimeout(timerRef.current);
        if (value !== "")
          timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
      })(search);
    },
    [handleSearchChange]
  );
  const resetTypeahead = React25.useCallback(() => {
    searchRef.current = "";
    window.clearTimeout(timerRef.current);
  }, []);
  React25.useEffect(() => {
    return () => window.clearTimeout(timerRef.current);
  }, []);
  return [searchRef, handleTypeaheadSearch, resetTypeahead];
}
function findNextItem(items, search, currentItem) {
  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
  const normalizedSearch = isRepeated ? search[0] : search;
  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;
  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));
  const excludeCurrentItem = normalizedSearch.length === 1;
  if (excludeCurrentItem)
    wrappedItems = wrappedItems.filter((v) => v !== currentItem);
  const nextItem = wrappedItems.find(
    (item) => item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())
  );
  return nextItem !== currentItem ? nextItem : void 0;
}
function wrapArray(array, startIndex) {
  return array.map((_, index) => array[(startIndex + index) % array.length]);
}
var Root24 = Select;
var Trigger4 = SelectTrigger;
var Value = SelectValue;
var Icon = SelectIcon;
var Portal5 = SelectPortal;
var Content25 = SelectContent;
var Viewport = SelectViewport;
var Group3 = SelectGroup;
var Label3 = SelectLabel;
var Item3 = SelectItem;
var ItemText = SelectItemText;
var ItemIndicator3 = SelectItemIndicator;
var Separator3 = SelectSeparator;

// node_modules/@radix-ui/react-scroll-area/dist/index.mjs
var React26 = __toESM(require_react(), 1);
var React27 = __toESM(require_react(), 1);
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
function useStateMachine(initialState, machine) {
  return React27.useReducer((state, event) => {
    const nextState = machine[state][event];
    return nextState ?? state;
  }, initialState);
}
var SCROLL_AREA_NAME = "ScrollArea";
var [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);
var [ScrollAreaProvider, useScrollAreaContext] = createScrollAreaContext(SCROLL_AREA_NAME);
var ScrollArea = React26.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeScrollArea,
      type = "hover",
      dir,
      scrollHideDelay = 600,
      ...scrollAreaProps
    } = props;
    const [scrollArea, setScrollArea] = React26.useState(null);
    const [viewport, setViewport] = React26.useState(null);
    const [content, setContent] = React26.useState(null);
    const [scrollbarX, setScrollbarX] = React26.useState(null);
    const [scrollbarY, setScrollbarY] = React26.useState(null);
    const [cornerWidth, setCornerWidth] = React26.useState(0);
    const [cornerHeight, setCornerHeight] = React26.useState(0);
    const [scrollbarXEnabled, setScrollbarXEnabled] = React26.useState(false);
    const [scrollbarYEnabled, setScrollbarYEnabled] = React26.useState(false);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setScrollArea(node));
    const direction = useDirection(dir);
    return (0, import_jsx_runtime8.jsx)(
      ScrollAreaProvider,
      {
        scope: __scopeScrollArea,
        type,
        dir: direction,
        scrollHideDelay,
        scrollArea,
        viewport,
        onViewportChange: setViewport,
        content,
        onContentChange: setContent,
        scrollbarX,
        onScrollbarXChange: setScrollbarX,
        scrollbarXEnabled,
        onScrollbarXEnabledChange: setScrollbarXEnabled,
        scrollbarY,
        onScrollbarYChange: setScrollbarY,
        scrollbarYEnabled,
        onScrollbarYEnabledChange: setScrollbarYEnabled,
        onCornerWidthChange: setCornerWidth,
        onCornerHeightChange: setCornerHeight,
        children: (0, import_jsx_runtime8.jsx)(
          Primitive.div,
          {
            dir: direction,
            ...scrollAreaProps,
            ref: composedRefs,
            style: {
              position: "relative",
              // Pass corner sizes as CSS vars to reduce re-renders of context consumers
              ["--radix-scroll-area-corner-width"]: cornerWidth + "px",
              ["--radix-scroll-area-corner-height"]: cornerHeight + "px",
              ...props.style
            }
          }
        )
      }
    );
  }
);
ScrollArea.displayName = SCROLL_AREA_NAME;
var VIEWPORT_NAME2 = "ScrollAreaViewport";
var ScrollAreaViewport = React26.forwardRef(
  (props, forwardedRef) => {
    const { __scopeScrollArea, children, nonce, ...viewportProps } = props;
    const context = useScrollAreaContext(VIEWPORT_NAME2, __scopeScrollArea);
    const ref = React26.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);
    return (0, import_jsx_runtime8.jsxs)(import_jsx_runtime8.Fragment, { children: [
      (0, import_jsx_runtime8.jsx)(
        "style",
        {
          dangerouslySetInnerHTML: {
            __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`
          },
          nonce
        }
      ),
      (0, import_jsx_runtime8.jsx)(
        Primitive.div,
        {
          "data-radix-scroll-area-viewport": "",
          ...viewportProps,
          ref: composedRefs,
          style: {
            /**
             * We don't support `visible` because the intention is to have at least one scrollbar
             * if this component is used and `visible` will behave like `auto` in that case
             * https://developer.mozilla.org/en-US/docs/Web/CSS/overflowed#description
             *
             * We don't handle `auto` because the intention is for the native implementation
             * to be hidden if using this component. We just want to ensure the node is scrollable
             * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent
             * the browser from having to work out whether to render native scrollbars or not,
             * we tell it to with the intention of hiding them in CSS.
             */
            overflowX: context.scrollbarXEnabled ? "scroll" : "hidden",
            overflowY: context.scrollbarYEnabled ? "scroll" : "hidden",
            ...props.style
          },
          children: (0, import_jsx_runtime8.jsx)("div", { ref: context.onContentChange, style: { minWidth: "100%", display: "table" }, children })
        }
      )
    ] });
  }
);
ScrollAreaViewport.displayName = VIEWPORT_NAME2;
var SCROLLBAR_NAME = "ScrollAreaScrollbar";
var ScrollAreaScrollbar = React26.forwardRef(
  (props, forwardedRef) => {
    const { forceMount, ...scrollbarProps } = props;
    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;
    const isHorizontal = props.orientation === "horizontal";
    React26.useEffect(() => {
      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);
      return () => {
        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);
      };
    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);
    return context.type === "hover" ? (0, import_jsx_runtime8.jsx)(ScrollAreaScrollbarHover, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "scroll" ? (0, import_jsx_runtime8.jsx)(ScrollAreaScrollbarScroll, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "auto" ? (0, import_jsx_runtime8.jsx)(ScrollAreaScrollbarAuto, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "always" ? (0, import_jsx_runtime8.jsx)(ScrollAreaScrollbarVisible, { ...scrollbarProps, ref: forwardedRef }) : null;
  }
);
ScrollAreaScrollbar.displayName = SCROLLBAR_NAME;
var ScrollAreaScrollbarHover = React26.forwardRef((props, forwardedRef) => {
  const { forceMount, ...scrollbarProps } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const [visible, setVisible] = React26.useState(false);
  React26.useEffect(() => {
    const scrollArea = context.scrollArea;
    let hideTimer = 0;
    if (scrollArea) {
      const handlePointerEnter = () => {
        window.clearTimeout(hideTimer);
        setVisible(true);
      };
      const handlePointerLeave = () => {
        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);
      };
      scrollArea.addEventListener("pointerenter", handlePointerEnter);
      scrollArea.addEventListener("pointerleave", handlePointerLeave);
      return () => {
        window.clearTimeout(hideTimer);
        scrollArea.removeEventListener("pointerenter", handlePointerEnter);
        scrollArea.removeEventListener("pointerleave", handlePointerLeave);
      };
    }
  }, [context.scrollArea, context.scrollHideDelay]);
  return (0, import_jsx_runtime8.jsx)(Presence, { present: forceMount || visible, children: (0, import_jsx_runtime8.jsx)(
    ScrollAreaScrollbarAuto,
    {
      "data-state": visible ? "visible" : "hidden",
      ...scrollbarProps,
      ref: forwardedRef
    }
  ) });
});
var ScrollAreaScrollbarScroll = React26.forwardRef((props, forwardedRef) => {
  const { forceMount, ...scrollbarProps } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const isHorizontal = props.orientation === "horizontal";
  const debounceScrollEnd = useDebounceCallback(() => send("SCROLL_END"), 100);
  const [state, send] = useStateMachine("hidden", {
    hidden: {
      SCROLL: "scrolling"
    },
    scrolling: {
      SCROLL_END: "idle",
      POINTER_ENTER: "interacting"
    },
    interacting: {
      SCROLL: "interacting",
      POINTER_LEAVE: "idle"
    },
    idle: {
      HIDE: "hidden",
      SCROLL: "scrolling",
      POINTER_ENTER: "interacting"
    }
  });
  React26.useEffect(() => {
    if (state === "idle") {
      const hideTimer = window.setTimeout(() => send("HIDE"), context.scrollHideDelay);
      return () => window.clearTimeout(hideTimer);
    }
  }, [state, context.scrollHideDelay, send]);
  React26.useEffect(() => {
    const viewport = context.viewport;
    const scrollDirection = isHorizontal ? "scrollLeft" : "scrollTop";
    if (viewport) {
      let prevScrollPos = viewport[scrollDirection];
      const handleScroll = () => {
        const scrollPos = viewport[scrollDirection];
        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;
        if (hasScrollInDirectionChanged) {
          send("SCROLL");
          debounceScrollEnd();
        }
        prevScrollPos = scrollPos;
      };
      viewport.addEventListener("scroll", handleScroll);
      return () => viewport.removeEventListener("scroll", handleScroll);
    }
  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);
  return (0, import_jsx_runtime8.jsx)(Presence, { present: forceMount || state !== "hidden", children: (0, import_jsx_runtime8.jsx)(
    ScrollAreaScrollbarVisible,
    {
      "data-state": state === "hidden" ? "hidden" : "visible",
      ...scrollbarProps,
      ref: forwardedRef,
      onPointerEnter: composeEventHandlers(props.onPointerEnter, () => send("POINTER_ENTER")),
      onPointerLeave: composeEventHandlers(props.onPointerLeave, () => send("POINTER_LEAVE"))
    }
  ) });
});
var ScrollAreaScrollbarAuto = React26.forwardRef((props, forwardedRef) => {
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const { forceMount, ...scrollbarProps } = props;
  const [visible, setVisible] = React26.useState(false);
  const isHorizontal = props.orientation === "horizontal";
  const handleResize = useDebounceCallback(() => {
    if (context.viewport) {
      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;
      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;
      setVisible(isHorizontal ? isOverflowX : isOverflowY);
    }
  }, 10);
  useResizeObserver(context.viewport, handleResize);
  useResizeObserver(context.content, handleResize);
  return (0, import_jsx_runtime8.jsx)(Presence, { present: forceMount || visible, children: (0, import_jsx_runtime8.jsx)(
    ScrollAreaScrollbarVisible,
    {
      "data-state": visible ? "visible" : "hidden",
      ...scrollbarProps,
      ref: forwardedRef
    }
  ) });
});
var ScrollAreaScrollbarVisible = React26.forwardRef((props, forwardedRef) => {
  const { orientation = "vertical", ...scrollbarProps } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const thumbRef = React26.useRef(null);
  const pointerOffsetRef = React26.useRef(0);
  const [sizes23, setSizes] = React26.useState({
    content: 0,
    viewport: 0,
    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 }
  });
  const thumbRatio = getThumbRatio(sizes23.viewport, sizes23.content);
  const commonProps = {
    ...scrollbarProps,
    sizes: sizes23,
    onSizesChange: setSizes,
    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),
    onThumbChange: (thumb) => thumbRef.current = thumb,
    onThumbPointerUp: () => pointerOffsetRef.current = 0,
    onThumbPointerDown: (pointerPos) => pointerOffsetRef.current = pointerPos
  };
  function getScrollPosition(pointerPos, dir) {
    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes23, dir);
  }
  if (orientation === "horizontal") {
    return (0, import_jsx_runtime8.jsx)(
      ScrollAreaScrollbarX,
      {
        ...commonProps,
        ref: forwardedRef,
        onThumbPositionChange: () => {
          if (context.viewport && thumbRef.current) {
            const scrollPos = context.viewport.scrollLeft;
            const offset = getThumbOffsetFromScroll(scrollPos, sizes23, context.dir);
            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;
          }
        },
        onWheelScroll: (scrollPos) => {
          if (context.viewport)
            context.viewport.scrollLeft = scrollPos;
        },
        onDragScroll: (pointerPos) => {
          if (context.viewport) {
            context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);
          }
        }
      }
    );
  }
  if (orientation === "vertical") {
    return (0, import_jsx_runtime8.jsx)(
      ScrollAreaScrollbarY,
      {
        ...commonProps,
        ref: forwardedRef,
        onThumbPositionChange: () => {
          if (context.viewport && thumbRef.current) {
            const scrollPos = context.viewport.scrollTop;
            const offset = getThumbOffsetFromScroll(scrollPos, sizes23);
            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;
          }
        },
        onWheelScroll: (scrollPos) => {
          if (context.viewport)
            context.viewport.scrollTop = scrollPos;
        },
        onDragScroll: (pointerPos) => {
          if (context.viewport)
            context.viewport.scrollTop = getScrollPosition(pointerPos);
        }
      }
    );
  }
  return null;
});
var ScrollAreaScrollbarX = React26.forwardRef((props, forwardedRef) => {
  const { sizes: sizes23, onSizesChange, ...scrollbarProps } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const [computedStyle, setComputedStyle] = React26.useState();
  const ref = React26.useRef(null);
  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);
  React26.useEffect(() => {
    if (ref.current)
      setComputedStyle(getComputedStyle(ref.current));
  }, [ref]);
  return (0, import_jsx_runtime8.jsx)(
    ScrollAreaScrollbarImpl,
    {
      "data-orientation": "horizontal",
      ...scrollbarProps,
      ref: composeRefs,
      sizes: sizes23,
      style: {
        bottom: 0,
        left: context.dir === "rtl" ? "var(--radix-scroll-area-corner-width)" : 0,
        right: context.dir === "ltr" ? "var(--radix-scroll-area-corner-width)" : 0,
        ["--radix-scroll-area-thumb-width"]: getThumbSize(sizes23) + "px",
        ...props.style
      },
      onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.x),
      onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.x),
      onWheelScroll: (event, maxScrollPos) => {
        if (context.viewport) {
          const scrollPos = context.viewport.scrollLeft + event.deltaX;
          props.onWheelScroll(scrollPos);
          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {
            event.preventDefault();
          }
        }
      },
      onResize: () => {
        if (ref.current && context.viewport && computedStyle) {
          onSizesChange({
            content: context.viewport.scrollWidth,
            viewport: context.viewport.offsetWidth,
            scrollbar: {
              size: ref.current.clientWidth,
              paddingStart: toInt(computedStyle.paddingLeft),
              paddingEnd: toInt(computedStyle.paddingRight)
            }
          });
        }
      }
    }
  );
});
var ScrollAreaScrollbarY = React26.forwardRef((props, forwardedRef) => {
  const { sizes: sizes23, onSizesChange, ...scrollbarProps } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
  const [computedStyle, setComputedStyle] = React26.useState();
  const ref = React26.useRef(null);
  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);
  React26.useEffect(() => {
    if (ref.current)
      setComputedStyle(getComputedStyle(ref.current));
  }, [ref]);
  return (0, import_jsx_runtime8.jsx)(
    ScrollAreaScrollbarImpl,
    {
      "data-orientation": "vertical",
      ...scrollbarProps,
      ref: composeRefs,
      sizes: sizes23,
      style: {
        top: 0,
        right: context.dir === "ltr" ? 0 : void 0,
        left: context.dir === "rtl" ? 0 : void 0,
        bottom: "var(--radix-scroll-area-corner-height)",
        ["--radix-scroll-area-thumb-height"]: getThumbSize(sizes23) + "px",
        ...props.style
      },
      onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.y),
      onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.y),
      onWheelScroll: (event, maxScrollPos) => {
        if (context.viewport) {
          const scrollPos = context.viewport.scrollTop + event.deltaY;
          props.onWheelScroll(scrollPos);
          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {
            event.preventDefault();
          }
        }
      },
      onResize: () => {
        if (ref.current && context.viewport && computedStyle) {
          onSizesChange({
            content: context.viewport.scrollHeight,
            viewport: context.viewport.offsetHeight,
            scrollbar: {
              size: ref.current.clientHeight,
              paddingStart: toInt(computedStyle.paddingTop),
              paddingEnd: toInt(computedStyle.paddingBottom)
            }
          });
        }
      }
    }
  );
});
var [ScrollbarProvider, useScrollbarContext] = createScrollAreaContext(SCROLLBAR_NAME);
var ScrollAreaScrollbarImpl = React26.forwardRef((props, forwardedRef) => {
  const {
    __scopeScrollArea,
    sizes: sizes23,
    hasThumb,
    onThumbChange,
    onThumbPointerUp,
    onThumbPointerDown,
    onThumbPositionChange,
    onDragScroll,
    onWheelScroll,
    onResize,
    ...scrollbarProps
  } = props;
  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);
  const [scrollbar, setScrollbar] = React26.useState(null);
  const composeRefs = useComposedRefs(forwardedRef, (node) => setScrollbar(node));
  const rectRef = React26.useRef(null);
  const prevWebkitUserSelectRef = React26.useRef("");
  const viewport = context.viewport;
  const maxScrollPos = sizes23.content - sizes23.viewport;
  const handleWheelScroll = useCallbackRef(onWheelScroll);
  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);
  const handleResize = useDebounceCallback(onResize, 10);
  function handleDragScroll(event) {
    if (rectRef.current) {
      const x = event.clientX - rectRef.current.left;
      const y = event.clientY - rectRef.current.top;
      onDragScroll({ x, y });
    }
  }
  React26.useEffect(() => {
    const handleWheel = (event) => {
      const element = event.target;
      const isScrollbarWheel = scrollbar == null ? void 0 : scrollbar.contains(element);
      if (isScrollbarWheel)
        handleWheelScroll(event, maxScrollPos);
    };
    document.addEventListener("wheel", handleWheel, { passive: false });
    return () => document.removeEventListener("wheel", handleWheel, { passive: false });
  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);
  React26.useEffect(handleThumbPositionChange, [sizes23, handleThumbPositionChange]);
  useResizeObserver(scrollbar, handleResize);
  useResizeObserver(context.content, handleResize);
  return (0, import_jsx_runtime8.jsx)(
    ScrollbarProvider,
    {
      scope: __scopeScrollArea,
      scrollbar,
      hasThumb,
      onThumbChange: useCallbackRef(onThumbChange),
      onThumbPointerUp: useCallbackRef(onThumbPointerUp),
      onThumbPositionChange: handleThumbPositionChange,
      onThumbPointerDown: useCallbackRef(onThumbPointerDown),
      children: (0, import_jsx_runtime8.jsx)(
        Primitive.div,
        {
          ...scrollbarProps,
          ref: composeRefs,
          style: { position: "absolute", ...scrollbarProps.style },
          onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
            const mainPointer = 0;
            if (event.button === mainPointer) {
              const element = event.target;
              element.setPointerCapture(event.pointerId);
              rectRef.current = scrollbar.getBoundingClientRect();
              prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;
              document.body.style.webkitUserSelect = "none";
              if (context.viewport)
                context.viewport.style.scrollBehavior = "auto";
              handleDragScroll(event);
            }
          }),
          onPointerMove: composeEventHandlers(props.onPointerMove, handleDragScroll),
          onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
            const element = event.target;
            if (element.hasPointerCapture(event.pointerId)) {
              element.releasePointerCapture(event.pointerId);
            }
            document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;
            if (context.viewport)
              context.viewport.style.scrollBehavior = "";
            rectRef.current = null;
          })
        }
      )
    }
  );
});
var THUMB_NAME = "ScrollAreaThumb";
var ScrollAreaThumb = React26.forwardRef(
  (props, forwardedRef) => {
    const { forceMount, ...thumbProps } = props;
    const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);
    return (0, import_jsx_runtime8.jsx)(Presence, { present: forceMount || scrollbarContext.hasThumb, children: (0, import_jsx_runtime8.jsx)(ScrollAreaThumbImpl, { ref: forwardedRef, ...thumbProps }) });
  }
);
var ScrollAreaThumbImpl = React26.forwardRef(
  (props, forwardedRef) => {
    const { __scopeScrollArea, style, ...thumbProps } = props;
    const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);
    const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);
    const { onThumbPositionChange } = scrollbarContext;
    const composedRef = useComposedRefs(
      forwardedRef,
      (node) => scrollbarContext.onThumbChange(node)
    );
    const removeUnlinkedScrollListenerRef = React26.useRef();
    const debounceScrollEnd = useDebounceCallback(() => {
      if (removeUnlinkedScrollListenerRef.current) {
        removeUnlinkedScrollListenerRef.current();
        removeUnlinkedScrollListenerRef.current = void 0;
      }
    }, 100);
    React26.useEffect(() => {
      const viewport = scrollAreaContext.viewport;
      if (viewport) {
        const handleScroll = () => {
          debounceScrollEnd();
          if (!removeUnlinkedScrollListenerRef.current) {
            const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);
            removeUnlinkedScrollListenerRef.current = listener;
            onThumbPositionChange();
          }
        };
        onThumbPositionChange();
        viewport.addEventListener("scroll", handleScroll);
        return () => viewport.removeEventListener("scroll", handleScroll);
      }
    }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);
    return (0, import_jsx_runtime8.jsx)(
      Primitive.div,
      {
        "data-state": scrollbarContext.hasThumb ? "visible" : "hidden",
        ...thumbProps,
        ref: composedRef,
        style: {
          width: "var(--radix-scroll-area-thumb-width)",
          height: "var(--radix-scroll-area-thumb-height)",
          ...style
        },
        onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, (event) => {
          const thumb = event.target;
          const thumbRect = thumb.getBoundingClientRect();
          const x = event.clientX - thumbRect.left;
          const y = event.clientY - thumbRect.top;
          scrollbarContext.onThumbPointerDown({ x, y });
        }),
        onPointerUp: composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)
      }
    );
  }
);
ScrollAreaThumb.displayName = THUMB_NAME;
var CORNER_NAME = "ScrollAreaCorner";
var ScrollAreaCorner = React26.forwardRef(
  (props, forwardedRef) => {
    const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);
    const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);
    const hasCorner = context.type !== "scroll" && hasBothScrollbarsVisible;
    return hasCorner ? (0, import_jsx_runtime8.jsx)(ScrollAreaCornerImpl, { ...props, ref: forwardedRef }) : null;
  }
);
ScrollAreaCorner.displayName = CORNER_NAME;
var ScrollAreaCornerImpl = React26.forwardRef((props, forwardedRef) => {
  const { __scopeScrollArea, ...cornerProps } = props;
  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);
  const [width, setWidth] = React26.useState(0);
  const [height, setHeight] = React26.useState(0);
  const hasSize = Boolean(width && height);
  useResizeObserver(context.scrollbarX, () => {
    var _a;
    const height2 = ((_a = context.scrollbarX) == null ? void 0 : _a.offsetHeight) || 0;
    context.onCornerHeightChange(height2);
    setHeight(height2);
  });
  useResizeObserver(context.scrollbarY, () => {
    var _a;
    const width2 = ((_a = context.scrollbarY) == null ? void 0 : _a.offsetWidth) || 0;
    context.onCornerWidthChange(width2);
    setWidth(width2);
  });
  return hasSize ? (0, import_jsx_runtime8.jsx)(
    Primitive.div,
    {
      ...cornerProps,
      ref: forwardedRef,
      style: {
        width,
        height,
        position: "absolute",
        right: context.dir === "ltr" ? 0 : void 0,
        left: context.dir === "rtl" ? 0 : void 0,
        bottom: 0,
        ...props.style
      }
    }
  ) : null;
});
function toInt(value) {
  return value ? parseInt(value, 10) : 0;
}
function getThumbRatio(viewportSize, contentSize) {
  const ratio = viewportSize / contentSize;
  return isNaN(ratio) ? 0 : ratio;
}
function getThumbSize(sizes23) {
  const ratio = getThumbRatio(sizes23.viewport, sizes23.content);
  const scrollbarPadding = sizes23.scrollbar.paddingStart + sizes23.scrollbar.paddingEnd;
  const thumbSize = (sizes23.scrollbar.size - scrollbarPadding) * ratio;
  return Math.max(thumbSize, 18);
}
function getScrollPositionFromPointer(pointerPos, pointerOffset, sizes23, dir = "ltr") {
  const thumbSizePx = getThumbSize(sizes23);
  const thumbCenter = thumbSizePx / 2;
  const offset = pointerOffset || thumbCenter;
  const thumbOffsetFromEnd = thumbSizePx - offset;
  const minPointerPos = sizes23.scrollbar.paddingStart + offset;
  const maxPointerPos = sizes23.scrollbar.size - sizes23.scrollbar.paddingEnd - thumbOffsetFromEnd;
  const maxScrollPos = sizes23.content - sizes23.viewport;
  const scrollRange = dir === "ltr" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];
  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange);
  return interpolate(pointerPos);
}
function getThumbOffsetFromScroll(scrollPos, sizes23, dir = "ltr") {
  const thumbSizePx = getThumbSize(sizes23);
  const scrollbarPadding = sizes23.scrollbar.paddingStart + sizes23.scrollbar.paddingEnd;
  const scrollbar = sizes23.scrollbar.size - scrollbarPadding;
  const maxScrollPos = sizes23.content - sizes23.viewport;
  const maxThumbPos = scrollbar - thumbSizePx;
  const scrollClampRange = dir === "ltr" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];
  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange);
  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);
  return interpolate(scrollWithoutMomentum);
}
function linearScale(input, output) {
  return (value) => {
    if (input[0] === input[1] || output[0] === output[1])
      return output[0];
    const ratio = (output[1] - output[0]) / (input[1] - input[0]);
    return output[0] + ratio * (value - input[0]);
  };
}
function isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos) {
  return scrollPos > 0 && scrollPos < maxScrollPos;
}
var addUnlinkedScrollListener = (node, handler = () => {
}) => {
  let prevPosition = { left: node.scrollLeft, top: node.scrollTop };
  let rAF = 0;
  (function loop() {
    const position = { left: node.scrollLeft, top: node.scrollTop };
    const isHorizontalScroll = prevPosition.left !== position.left;
    const isVerticalScroll = prevPosition.top !== position.top;
    if (isHorizontalScroll || isVerticalScroll)
      handler();
    prevPosition = position;
    rAF = window.requestAnimationFrame(loop);
  })();
  return () => window.cancelAnimationFrame(rAF);
};
function useDebounceCallback(callback, delay) {
  const handleCallback = useCallbackRef(callback);
  const debounceTimerRef = React26.useRef(0);
  React26.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);
  return React26.useCallback(() => {
    window.clearTimeout(debounceTimerRef.current);
    debounceTimerRef.current = window.setTimeout(handleCallback, delay);
  }, [handleCallback, delay]);
}
function useResizeObserver(element, onResize) {
  const handleResize = useCallbackRef(onResize);
  useLayoutEffect2(() => {
    let rAF = 0;
    if (element) {
      const resizeObserver = new ResizeObserver(() => {
        cancelAnimationFrame(rAF);
        rAF = window.requestAnimationFrame(handleResize);
      });
      resizeObserver.observe(element);
      return () => {
        window.cancelAnimationFrame(rAF);
        resizeObserver.unobserve(element);
      };
    }
  }, [element, handleResize]);
}
var Root6 = ScrollArea;
var Viewport2 = ScrollAreaViewport;
var Scrollbar = ScrollAreaScrollbar;
var Thumb = ScrollAreaThumb;
var Corner = ScrollAreaCorner;

// node_modules/@radix-ui/themes/dist/esm/components/select.props.js
var sizes9 = ["1", "2", "3"];
var selectRootPropDefs = {
  size: { type: "enum", values: sizes9, default: "2", responsive: true }
};
var triggerVariants = ["classic", "surface", "soft", "ghost"];
var selectTriggerPropDefs = {
  variant: { type: "enum", values: triggerVariants, default: "surface" },
  color: colorProp,
  radius: radiusProp
};
var contentVariants = ["solid", "soft"];
var selectContentPropDefs = {
  variant: { type: "enum", values: contentVariants, default: "solid" },
  color: colorProp,
  highContrast: highContrastProp
};

// node_modules/@radix-ui/themes/dist/esm/components/select.js
var SelectContext = React28.createContext({});
var SelectRoot = (props) => {
  const { children, size = selectRootPropDefs.size.default, ...rootProps } = props;
  return React28.createElement(
    Root24,
    { ...rootProps },
    React28.createElement(SelectContext.Provider, { value: React28.useMemo(() => ({ size }), [size]) }, children)
  );
};
SelectRoot.displayName = "SelectRoot";
var SelectTrigger2 = React28.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, variant = selectTriggerPropDefs.variant.default, color = selectTriggerPropDefs.color.default, radius = selectTriggerPropDefs.radius.default, placeholder, ...triggerProps } = marginRest;
  const { size } = React28.useContext(SelectContext);
  return React28.createElement(
    Trigger4,
    { asChild: true },
    React28.createElement(
      "button",
      { "data-accent-color": color, "data-radius": radius, ...triggerProps, ref: forwardedRef, className: (0, import_classnames17.default)("rt-reset", "rt-SelectTrigger", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, withMarginProps(marginProps)) },
      React28.createElement(
        "span",
        { className: "rt-SelectTriggerInner" },
        React28.createElement(Value, { placeholder })
      ),
      React28.createElement(
        Icon,
        { asChild: true },
        React28.createElement(ChevronDownIcon, { className: "rt-SelectIcon" })
      )
    )
  );
});
SelectTrigger2.displayName = "SelectTrigger";
var SelectContent2 = React28.forwardRef((props, forwardedRef) => {
  const { className, children, variant = selectContentPropDefs.variant.default, highContrast = selectContentPropDefs.highContrast.default, color = selectContentPropDefs.color.default, container, ...contentProps } = props;
  const { size } = React28.useContext(SelectContext);
  const themeContext = useThemeContext();
  const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
  return React28.createElement(
    Portal5,
    { container },
    React28.createElement(
      Theme,
      { asChild: true },
      React28.createElement(
        Content25,
        { "data-accent-color": resolvedColor, sideOffset: 4, ...contentProps, ref: forwardedRef, className: (0, import_classnames17.default)({ "rt-PopperContent": contentProps.position === "popper" }, "rt-SelectContent", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast }) },
        React28.createElement(
          Root6,
          { type: "auto", className: "rt-ScrollAreaRoot" },
          React28.createElement(
            Viewport,
            { asChild: true, className: "rt-SelectViewport" },
            React28.createElement(Viewport2, { className: "rt-ScrollAreaViewport", style: { overflowY: void 0 } }, children)
          ),
          React28.createElement(
            Scrollbar,
            { className: "rt-ScrollAreaScrollbar rt-r-size-1", orientation: "vertical" },
            React28.createElement(Thumb, { className: "rt-ScrollAreaThumb" })
          )
        )
      )
    )
  );
});
SelectContent2.displayName = "SelectContent";
var SelectItem2 = React28.forwardRef((props, forwardedRef) => {
  const { className, children, ...itemProps } = props;
  return React28.createElement(
    Item3,
    { ...itemProps, ref: forwardedRef, className: (0, import_classnames17.default)("rt-SelectItem", className) },
    React28.createElement(
      ItemIndicator3,
      { className: "rt-SelectItemIndicator" },
      React28.createElement(ThickCheckIcon, { className: "rt-SelectItemIndicatorIcon" })
    ),
    React28.createElement(ItemText, null, children)
  );
});
SelectItem2.displayName = "SelectItem";
var SelectGroup2 = React28.forwardRef((props, forwardedRef) => React28.createElement(Group3, { ...props, ref: forwardedRef, className: (0, import_classnames17.default)("rt-SelectGroup", props.className) }));
SelectGroup2.displayName = "SelectGroup";
var SelectLabel2 = React28.forwardRef((props, forwardedRef) => React28.createElement(Label3, { ...props, ref: forwardedRef, className: (0, import_classnames17.default)("rt-SelectLabel", props.className) }));
SelectLabel2.displayName = "SelectLabel";
var SelectSeparator2 = React28.forwardRef((props, forwardedRef) => React28.createElement(Separator3, { ...props, ref: forwardedRef, className: (0, import_classnames17.default)("rt-SelectSeparator", props.className) }));
SelectSeparator2.displayName = "SelectSeparator";
var Select2 = Object.assign({}, {
  Root: SelectRoot,
  Trigger: SelectTrigger2,
  Content: SelectContent2,
  Item: SelectItem2,
  Group: SelectGroup2,
  Label: SelectLabel2,
  Separator: SelectSeparator2
});

// node_modules/@radix-ui/themes/dist/esm/components/slider.js
var React30 = __toESM(require_react());
var import_classnames18 = __toESM(require_classnames());

// node_modules/@radix-ui/react-slider/dist/index.mjs
var React29 = __toESM(require_react(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var PAGE_KEYS = ["PageUp", "PageDown"];
var ARROW_KEYS2 = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
var BACK_KEYS = {
  "from-left": ["Home", "PageDown", "ArrowDown", "ArrowLeft"],
  "from-right": ["Home", "PageDown", "ArrowDown", "ArrowRight"],
  "from-bottom": ["Home", "PageDown", "ArrowDown", "ArrowLeft"],
  "from-top": ["Home", "PageDown", "ArrowUp", "ArrowLeft"]
};
var SLIDER_NAME = "Slider";
var [Collection2, useCollection2, createCollectionScope2] = createCollection(SLIDER_NAME);
var [createSliderContext, createSliderScope] = createContextScope(SLIDER_NAME, [
  createCollectionScope2
]);
var [SliderProvider, useSliderContext] = createSliderContext(SLIDER_NAME);
var Slider = React29.forwardRef(
  (props, forwardedRef) => {
    const {
      name,
      min = 0,
      max = 100,
      step = 1,
      orientation = "horizontal",
      disabled = false,
      minStepsBetweenThumbs = 0,
      defaultValue = [min],
      value,
      onValueChange = () => {
      },
      onValueCommit = () => {
      },
      inverted = false,
      ...sliderProps
    } = props;
    const thumbRefs = React29.useRef(/* @__PURE__ */ new Set());
    const valueIndexToChangeRef = React29.useRef(0);
    const isHorizontal = orientation === "horizontal";
    const SliderOrientation = isHorizontal ? SliderHorizontal : SliderVertical;
    const [values = [], setValues] = useControllableState({
      prop: value,
      defaultProp: defaultValue,
      onChange: (value2) => {
        var _a;
        const thumbs = [...thumbRefs.current];
        (_a = thumbs[valueIndexToChangeRef.current]) == null ? void 0 : _a.focus();
        onValueChange(value2);
      }
    });
    const valuesBeforeSlideStartRef = React29.useRef(values);
    function handleSlideStart(value2) {
      const closestIndex = getClosestValueIndex(values, value2);
      updateValues(value2, closestIndex);
    }
    function handleSlideMove(value2) {
      updateValues(value2, valueIndexToChangeRef.current);
    }
    function handleSlideEnd() {
      const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];
      const nextValue = values[valueIndexToChangeRef.current];
      const hasChanged = nextValue !== prevValue;
      if (hasChanged)
        onValueCommit(values);
    }
    function updateValues(value2, atIndex, { commit } = { commit: false }) {
      const decimalCount = getDecimalCount(step);
      const snapToStep = roundValue(Math.round((value2 - min) / step) * step + min, decimalCount);
      const nextValue = clamp(snapToStep, [min, max]);
      setValues((prevValues = []) => {
        const nextValues = getNextSortedValues(prevValues, nextValue, atIndex);
        if (hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {
          valueIndexToChangeRef.current = nextValues.indexOf(nextValue);
          const hasChanged = String(nextValues) !== String(prevValues);
          if (hasChanged && commit)
            onValueCommit(nextValues);
          return hasChanged ? nextValues : prevValues;
        } else {
          return prevValues;
        }
      });
    }
    return (0, import_jsx_runtime9.jsx)(
      SliderProvider,
      {
        scope: props.__scopeSlider,
        name,
        disabled,
        min,
        max,
        valueIndexToChangeRef,
        thumbs: thumbRefs.current,
        values,
        orientation,
        children: (0, import_jsx_runtime9.jsx)(Collection2.Provider, { scope: props.__scopeSlider, children: (0, import_jsx_runtime9.jsx)(Collection2.Slot, { scope: props.__scopeSlider, children: (0, import_jsx_runtime9.jsx)(
          SliderOrientation,
          {
            "aria-disabled": disabled,
            "data-disabled": disabled ? "" : void 0,
            ...sliderProps,
            ref: forwardedRef,
            onPointerDown: composeEventHandlers(sliderProps.onPointerDown, () => {
              if (!disabled)
                valuesBeforeSlideStartRef.current = values;
            }),
            min,
            max,
            inverted,
            onSlideStart: disabled ? void 0 : handleSlideStart,
            onSlideMove: disabled ? void 0 : handleSlideMove,
            onSlideEnd: disabled ? void 0 : handleSlideEnd,
            onHomeKeyDown: () => !disabled && updateValues(min, 0, { commit: true }),
            onEndKeyDown: () => !disabled && updateValues(max, values.length - 1, { commit: true }),
            onStepKeyDown: ({ event, direction: stepDirection }) => {
              if (!disabled) {
                const isPageKey = PAGE_KEYS.includes(event.key);
                const isSkipKey = isPageKey || event.shiftKey && ARROW_KEYS2.includes(event.key);
                const multiplier = isSkipKey ? 10 : 1;
                const atIndex = valueIndexToChangeRef.current;
                const value2 = values[atIndex];
                const stepInDirection = step * multiplier * stepDirection;
                updateValues(value2 + stepInDirection, atIndex, { commit: true });
              }
            }
          }
        ) }) })
      }
    );
  }
);
Slider.displayName = SLIDER_NAME;
var [SliderOrientationProvider, useSliderOrientationContext] = createSliderContext(SLIDER_NAME, {
  startEdge: "left",
  endEdge: "right",
  size: "width",
  direction: 1
});
var SliderHorizontal = React29.forwardRef(
  (props, forwardedRef) => {
    const {
      min,
      max,
      dir,
      inverted,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const [slider, setSlider] = React29.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setSlider(node));
    const rectRef = React29.useRef();
    const direction = useDirection(dir);
    const isDirectionLTR = direction === "ltr";
    const isSlidingFromLeft = isDirectionLTR && !inverted || !isDirectionLTR && inverted;
    function getValueFromPointer(pointerPosition) {
      const rect = rectRef.current || slider.getBoundingClientRect();
      const input = [0, rect.width];
      const output = isSlidingFromLeft ? [min, max] : [max, min];
      const value = linearScale2(input, output);
      rectRef.current = rect;
      return value(pointerPosition - rect.left);
    }
    return (0, import_jsx_runtime9.jsx)(
      SliderOrientationProvider,
      {
        scope: props.__scopeSlider,
        startEdge: isSlidingFromLeft ? "left" : "right",
        endEdge: isSlidingFromLeft ? "right" : "left",
        direction: isSlidingFromLeft ? 1 : -1,
        size: "width",
        children: (0, import_jsx_runtime9.jsx)(
          SliderImpl,
          {
            dir: direction,
            "data-orientation": "horizontal",
            ...sliderProps,
            ref: composedRefs,
            style: {
              ...sliderProps.style,
              ["--radix-slider-thumb-transform"]: "translateX(-50%)"
            },
            onSlideStart: (event) => {
              const value = getValueFromPointer(event.clientX);
              onSlideStart == null ? void 0 : onSlideStart(value);
            },
            onSlideMove: (event) => {
              const value = getValueFromPointer(event.clientX);
              onSlideMove == null ? void 0 : onSlideMove(value);
            },
            onSlideEnd: () => {
              rectRef.current = void 0;
              onSlideEnd == null ? void 0 : onSlideEnd();
            },
            onStepKeyDown: (event) => {
              const slideDirection = isSlidingFromLeft ? "from-left" : "from-right";
              const isBackKey = BACK_KEYS[slideDirection].includes(event.key);
              onStepKeyDown == null ? void 0 : onStepKeyDown({ event, direction: isBackKey ? -1 : 1 });
            }
          }
        )
      }
    );
  }
);
var SliderVertical = React29.forwardRef(
  (props, forwardedRef) => {
    const {
      min,
      max,
      inverted,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const sliderRef = React29.useRef(null);
    const ref = useComposedRefs(forwardedRef, sliderRef);
    const rectRef = React29.useRef();
    const isSlidingFromBottom = !inverted;
    function getValueFromPointer(pointerPosition) {
      const rect = rectRef.current || sliderRef.current.getBoundingClientRect();
      const input = [0, rect.height];
      const output = isSlidingFromBottom ? [max, min] : [min, max];
      const value = linearScale2(input, output);
      rectRef.current = rect;
      return value(pointerPosition - rect.top);
    }
    return (0, import_jsx_runtime9.jsx)(
      SliderOrientationProvider,
      {
        scope: props.__scopeSlider,
        startEdge: isSlidingFromBottom ? "bottom" : "top",
        endEdge: isSlidingFromBottom ? "top" : "bottom",
        size: "height",
        direction: isSlidingFromBottom ? 1 : -1,
        children: (0, import_jsx_runtime9.jsx)(
          SliderImpl,
          {
            "data-orientation": "vertical",
            ...sliderProps,
            ref,
            style: {
              ...sliderProps.style,
              ["--radix-slider-thumb-transform"]: "translateY(50%)"
            },
            onSlideStart: (event) => {
              const value = getValueFromPointer(event.clientY);
              onSlideStart == null ? void 0 : onSlideStart(value);
            },
            onSlideMove: (event) => {
              const value = getValueFromPointer(event.clientY);
              onSlideMove == null ? void 0 : onSlideMove(value);
            },
            onSlideEnd: () => {
              rectRef.current = void 0;
              onSlideEnd == null ? void 0 : onSlideEnd();
            },
            onStepKeyDown: (event) => {
              const slideDirection = isSlidingFromBottom ? "from-bottom" : "from-top";
              const isBackKey = BACK_KEYS[slideDirection].includes(event.key);
              onStepKeyDown == null ? void 0 : onStepKeyDown({ event, direction: isBackKey ? -1 : 1 });
            }
          }
        )
      }
    );
  }
);
var SliderImpl = React29.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSlider,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onHomeKeyDown,
      onEndKeyDown,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const context = useSliderContext(SLIDER_NAME, __scopeSlider);
    return (0, import_jsx_runtime9.jsx)(
      Primitive.span,
      {
        ...sliderProps,
        ref: forwardedRef,
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          if (event.key === "Home") {
            onHomeKeyDown(event);
            event.preventDefault();
          } else if (event.key === "End") {
            onEndKeyDown(event);
            event.preventDefault();
          } else if (PAGE_KEYS.concat(ARROW_KEYS2).includes(event.key)) {
            onStepKeyDown(event);
            event.preventDefault();
          }
        }),
        onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
          const target = event.target;
          target.setPointerCapture(event.pointerId);
          event.preventDefault();
          if (context.thumbs.has(target)) {
            target.focus();
          } else {
            onSlideStart(event);
          }
        }),
        onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
          const target = event.target;
          if (target.hasPointerCapture(event.pointerId))
            onSlideMove(event);
        }),
        onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
          const target = event.target;
          if (target.hasPointerCapture(event.pointerId)) {
            target.releasePointerCapture(event.pointerId);
            onSlideEnd(event);
          }
        })
      }
    );
  }
);
var TRACK_NAME = "SliderTrack";
var SliderTrack = React29.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSlider, ...trackProps } = props;
    const context = useSliderContext(TRACK_NAME, __scopeSlider);
    return (0, import_jsx_runtime9.jsx)(
      Primitive.span,
      {
        "data-disabled": context.disabled ? "" : void 0,
        "data-orientation": context.orientation,
        ...trackProps,
        ref: forwardedRef
      }
    );
  }
);
SliderTrack.displayName = TRACK_NAME;
var RANGE_NAME = "SliderRange";
var SliderRange = React29.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSlider, ...rangeProps } = props;
    const context = useSliderContext(RANGE_NAME, __scopeSlider);
    const orientation = useSliderOrientationContext(RANGE_NAME, __scopeSlider);
    const ref = React29.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const valuesCount = context.values.length;
    const percentages = context.values.map(
      (value) => convertValueToPercentage(value, context.min, context.max)
    );
    const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;
    const offsetEnd = 100 - Math.max(...percentages);
    return (0, import_jsx_runtime9.jsx)(
      Primitive.span,
      {
        "data-orientation": context.orientation,
        "data-disabled": context.disabled ? "" : void 0,
        ...rangeProps,
        ref: composedRefs,
        style: {
          ...props.style,
          [orientation.startEdge]: offsetStart + "%",
          [orientation.endEdge]: offsetEnd + "%"
        }
      }
    );
  }
);
SliderRange.displayName = RANGE_NAME;
var THUMB_NAME2 = "SliderThumb";
var SliderThumb = React29.forwardRef(
  (props, forwardedRef) => {
    const getItems = useCollection2(props.__scopeSlider);
    const [thumb, setThumb] = React29.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));
    const index = React29.useMemo(
      () => thumb ? getItems().findIndex((item) => item.ref.current === thumb) : -1,
      [getItems, thumb]
    );
    return (0, import_jsx_runtime9.jsx)(SliderThumbImpl, { ...props, ref: composedRefs, index });
  }
);
var SliderThumbImpl = React29.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSlider, index, name, ...thumbProps } = props;
    const context = useSliderContext(THUMB_NAME2, __scopeSlider);
    const orientation = useSliderOrientationContext(THUMB_NAME2, __scopeSlider);
    const [thumb, setThumb] = React29.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));
    const isFormControl = thumb ? Boolean(thumb.closest("form")) : true;
    const size = useSize(thumb);
    const value = context.values[index];
    const percent = value === void 0 ? 0 : convertValueToPercentage(value, context.min, context.max);
    const label = getLabel(index, context.values.length);
    const orientationSize = size == null ? void 0 : size[orientation.size];
    const thumbInBoundsOffset = orientationSize ? getThumbInBoundsOffset(orientationSize, percent, orientation.direction) : 0;
    React29.useEffect(() => {
      if (thumb) {
        context.thumbs.add(thumb);
        return () => {
          context.thumbs.delete(thumb);
        };
      }
    }, [thumb, context.thumbs]);
    return (0, import_jsx_runtime9.jsxs)(
      "span",
      {
        style: {
          transform: "var(--radix-slider-thumb-transform)",
          position: "absolute",
          [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`
        },
        children: [
          (0, import_jsx_runtime9.jsx)(Collection2.ItemSlot, { scope: props.__scopeSlider, children: (0, import_jsx_runtime9.jsx)(
            Primitive.span,
            {
              role: "slider",
              "aria-label": props["aria-label"] || label,
              "aria-valuemin": context.min,
              "aria-valuenow": value,
              "aria-valuemax": context.max,
              "aria-orientation": context.orientation,
              "data-orientation": context.orientation,
              "data-disabled": context.disabled ? "" : void 0,
              tabIndex: context.disabled ? void 0 : 0,
              ...thumbProps,
              ref: composedRefs,
              style: value === void 0 ? { display: "none" } : props.style,
              onFocus: composeEventHandlers(props.onFocus, () => {
                context.valueIndexToChangeRef.current = index;
              })
            }
          ) }),
          isFormControl && (0, import_jsx_runtime9.jsx)(
            BubbleInput3,
            {
              name: name ?? (context.name ? context.name + (context.values.length > 1 ? "[]" : "") : void 0),
              value
            },
            index
          )
        ]
      }
    );
  }
);
SliderThumb.displayName = THUMB_NAME2;
var BubbleInput3 = (props) => {
  const { value, ...inputProps } = props;
  const ref = React29.useRef(null);
  const prevValue = usePrevious(value);
  React29.useEffect(() => {
    const input = ref.current;
    const inputProto = window.HTMLInputElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(inputProto, "value");
    const setValue = descriptor.set;
    if (prevValue !== value && setValue) {
      const event = new Event("input", { bubbles: true });
      setValue.call(input, value);
      input.dispatchEvent(event);
    }
  }, [prevValue, value]);
  return (0, import_jsx_runtime9.jsx)("input", { style: { display: "none" }, ...inputProps, ref, defaultValue: value });
};
function getNextSortedValues(prevValues = [], nextValue, atIndex) {
  const nextValues = [...prevValues];
  nextValues[atIndex] = nextValue;
  return nextValues.sort((a, b) => a - b);
}
function convertValueToPercentage(value, min, max) {
  const maxSteps = max - min;
  const percentPerStep = 100 / maxSteps;
  const percentage = percentPerStep * (value - min);
  return clamp(percentage, [0, 100]);
}
function getLabel(index, totalValues) {
  if (totalValues > 2) {
    return `Value ${index + 1} of ${totalValues}`;
  } else if (totalValues === 2) {
    return ["Minimum", "Maximum"][index];
  } else {
    return void 0;
  }
}
function getClosestValueIndex(values, nextValue) {
  if (values.length === 1)
    return 0;
  const distances = values.map((value) => Math.abs(value - nextValue));
  const closestDistance = Math.min(...distances);
  return distances.indexOf(closestDistance);
}
function getThumbInBoundsOffset(width, left, direction) {
  const halfWidth = width / 2;
  const halfPercent = 50;
  const offset = linearScale2([0, halfPercent], [0, halfWidth]);
  return (halfWidth - offset(left) * direction) * direction;
}
function getStepsBetweenValues(values) {
  return values.slice(0, -1).map((value, index) => values[index + 1] - value);
}
function hasMinStepsBetweenValues(values, minStepsBetweenValues) {
  if (minStepsBetweenValues > 0) {
    const stepsBetweenValues = getStepsBetweenValues(values);
    const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);
    return actualMinStepsBetweenValues >= minStepsBetweenValues;
  }
  return true;
}
function linearScale2(input, output) {
  return (value) => {
    if (input[0] === input[1] || output[0] === output[1])
      return output[0];
    const ratio = (output[1] - output[0]) / (input[1] - input[0]);
    return output[0] + ratio * (value - input[0]);
  };
}
function getDecimalCount(value) {
  return (String(value).split(".")[1] || "").length;
}
function roundValue(value, decimalCount) {
  const rounder = Math.pow(10, decimalCount);
  return Math.round(value * rounder) / rounder;
}
var Root7 = Slider;
var Track = SliderTrack;
var Range = SliderRange;
var Thumb2 = SliderThumb;

// node_modules/@radix-ui/themes/dist/esm/components/slider.props.js
var sizes10 = ["1", "2", "3"];
var variants4 = ["classic", "surface", "soft"];
var sliderPropDefs = {
  size: { type: "enum", values: sizes10, default: "2", responsive: true },
  variant: { type: "enum", values: variants4, default: "surface" },
  color: colorProp,
  highContrast: highContrastProp,
  radius: radiusProp
};

// node_modules/@radix-ui/themes/dist/esm/components/slider.js
var Slider2 = React30.forwardRef((props, forwardedRef) => {
  var _a, _b;
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, size = sliderPropDefs.size.default, variant = sliderPropDefs.variant.default, color = sliderPropDefs.color.default, highContrast = sliderPropDefs.highContrast.default, radius = sliderPropDefs.radius.default, tabIndex, ...sliderProps } = marginRest;
  return React30.createElement(
    Root7,
    { "data-accent-color": color, "data-radius": radius, ref: forwardedRef, ...sliderProps, className: (0, import_classnames18.default)("rt-SliderRoot", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast }, withMarginProps(marginProps)) },
    React30.createElement(
      Track,
      { className: "rt-SliderTrack" },
      React30.createElement(Range, { className: (0, import_classnames18.default)("rt-SliderRange", { "rt-high-contrast": highContrast }), "data-inverted": sliderProps.inverted ? "" : void 0 })
    ),
    ((_b = (_a = sliderProps.value) !== null && _a !== void 0 ? _a : sliderProps.defaultValue) !== null && _b !== void 0 ? _b : []).map((value, index) => React30.createElement(Thumb2, { key: index, className: "rt-SliderThumb", ...tabIndex !== void 0 ? { tabIndex } : void 0 }))
  );
});
Slider2.displayName = "Slider";

// node_modules/@radix-ui/themes/dist/esm/components/switch.js
var React32 = __toESM(require_react());
var import_classnames19 = __toESM(require_classnames());

// node_modules/@radix-ui/react-switch/dist/index.mjs
var React31 = __toESM(require_react(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var SWITCH_NAME = "Switch";
var [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);
var [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);
var Switch = React31.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSwitch,
      name,
      checked: checkedProp,
      defaultChecked,
      required,
      disabled,
      value = "on",
      onCheckedChange,
      ...switchProps
    } = props;
    const [button, setButton] = React31.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
    const hasConsumerStoppedPropagationRef = React31.useRef(false);
    const isFormControl = button ? Boolean(button.closest("form")) : true;
    const [checked = false, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked,
      onChange: onCheckedChange
    });
    return (0, import_jsx_runtime10.jsxs)(SwitchProvider, { scope: __scopeSwitch, checked, disabled, children: [
      (0, import_jsx_runtime10.jsx)(
        Primitive.button,
        {
          type: "button",
          role: "switch",
          "aria-checked": checked,
          "aria-required": required,
          "data-state": getState3(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          value,
          ...switchProps,
          ref: composedRefs,
          onClick: composeEventHandlers(props.onClick, (event) => {
            setChecked((prevChecked) => !prevChecked);
            if (isFormControl) {
              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
              if (!hasConsumerStoppedPropagationRef.current)
                event.stopPropagation();
            }
          })
        }
      ),
      isFormControl && (0, import_jsx_runtime10.jsx)(
        BubbleInput4,
        {
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled,
          style: { transform: "translateX(-100%)" }
        }
      )
    ] });
  }
);
Switch.displayName = SWITCH_NAME;
var THUMB_NAME3 = "SwitchThumb";
var SwitchThumb = React31.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSwitch, ...thumbProps } = props;
    const context = useSwitchContext(THUMB_NAME3, __scopeSwitch);
    return (0, import_jsx_runtime10.jsx)(
      Primitive.span,
      {
        "data-state": getState3(context.checked),
        "data-disabled": context.disabled ? "" : void 0,
        ...thumbProps,
        ref: forwardedRef
      }
    );
  }
);
SwitchThumb.displayName = THUMB_NAME3;
var BubbleInput4 = (props) => {
  const { control, checked, bubbles = true, ...inputProps } = props;
  const ref = React31.useRef(null);
  const prevChecked = usePrevious(checked);
  const controlSize = useSize(control);
  React31.useEffect(() => {
    const input = ref.current;
    const inputProto = window.HTMLInputElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(inputProto, "checked");
    const setChecked = descriptor.set;
    if (prevChecked !== checked && setChecked) {
      const event = new Event("click", { bubbles });
      setChecked.call(input, checked);
      input.dispatchEvent(event);
    }
  }, [prevChecked, checked, bubbles]);
  return (0, import_jsx_runtime10.jsx)(
    "input",
    {
      type: "checkbox",
      "aria-hidden": true,
      defaultChecked: checked,
      ...inputProps,
      tabIndex: -1,
      ref,
      style: {
        ...props.style,
        ...controlSize,
        position: "absolute",
        pointerEvents: "none",
        opacity: 0,
        margin: 0
      }
    }
  );
};
function getState3(checked) {
  return checked ? "checked" : "unchecked";
}
var Root8 = Switch;
var Thumb3 = SwitchThumb;

// node_modules/@radix-ui/themes/dist/esm/components/switch.props.js
var sizes11 = ["1", "2", "3"];
var variants5 = ["classic", "surface", "soft"];
var switchPropDefs = {
  size: { type: "enum", values: sizes11, default: "2", responsive: true },
  variant: { type: "enum", values: variants5, default: "surface" },
  color: colorProp,
  highContrast: highContrastProp,
  radius: radiusProp
};

// node_modules/@radix-ui/themes/dist/esm/components/switch.js
var Switch2 = React32.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, style, size = switchPropDefs.size.default, variant = switchPropDefs.variant.default, color = switchPropDefs.color.default, highContrast = switchPropDefs.highContrast.default, radius = switchPropDefs.radius.default, ...switchProps } = marginRest;
  return React32.createElement(
    "span",
    { "data-radius": radius, className: (0, import_classnames19.default)("rt-SwitchRoot", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast }, withMarginProps(marginProps)), style },
    React32.createElement(
      Root8,
      { "data-accent-color": color, ...switchProps, ref: forwardedRef, className: (0, import_classnames19.default)("rt-reset", "rt-SwitchButton", {
        "rt-high-contrast": highContrast
      }) },
      React32.createElement(Thumb3, { className: (0, import_classnames19.default)("rt-SwitchThumb", { "rt-high-contrast": highContrast }) })
    )
  );
});
Switch2.displayName = "Switch";

// node_modules/@radix-ui/themes/dist/esm/components/text-area.js
var React33 = __toESM(require_react());
var import_classnames20 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/text-area.props.js
var sizes12 = ["1", "2", "3"];
var variants6 = ["classic", "surface", "soft"];
var textAreaPropDefs = {
  size: { type: "enum", values: sizes12, default: "2", responsive: true },
  variant: { type: "enum", values: variants6, default: "surface" },
  color: colorProp
};

// node_modules/@radix-ui/themes/dist/esm/components/text-area.js
var TextArea = React33.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, size = textAreaPropDefs.size.default, variant = textAreaPropDefs.variant.default, color = textAreaPropDefs.color.default, style, ...textAreaProps } = marginRest;
  return React33.createElement(
    "div",
    { "data-accent-color": color, style, className: (0, import_classnames20.default)("rt-TextAreaRoot", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, withMarginProps(marginProps)) },
    React33.createElement("textarea", { className: "rt-TextAreaInput", ref: forwardedRef, ...textAreaProps }),
    React33.createElement("div", { className: "rt-TextAreaChrome" })
  );
});
TextArea.displayName = "TextArea";

// node_modules/@radix-ui/themes/dist/esm/components/text-field.js
var React34 = __toESM(require_react());
var import_classnames21 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/text-field.props.js
var sizes13 = ["1", "2", "3"];
var variants7 = ["classic", "surface", "soft"];
var textFieldPropDefs = {
  size: { type: "enum", values: sizes13, default: "2", responsive: true },
  variant: { type: "enum", values: variants7, default: "surface" },
  color: colorProp,
  radius: radiusProp
};
var textFieldSlotPropDefs = {
  color: colorProp,
  gap: flexPropDefs.gap
};

// node_modules/@radix-ui/themes/dist/esm/components/text-field.js
var TextFieldContext = React34.createContext(void 0);
var TextFieldRoot = React34.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { children, className, size = textFieldPropDefs.size.default, variant = textFieldPropDefs.variant.default, color = textFieldPropDefs.color.default, radius = textFieldPropDefs.radius.default, ...rootProps } = marginRest;
  return React34.createElement(
    "div",
    { "data-radius": radius, ...rootProps, ref: forwardedRef, className: (0, import_classnames21.default)("rt-TextFieldRoot", className, withMarginProps(marginProps)), onPointerDown: composeEventHandlers(rootProps.onPointerDown, (event) => {
      const target = event.target;
      if (target.closest("input, button, a"))
        return;
      const input = event.currentTarget.querySelector(".rt-TextFieldInput");
      if (!input)
        return;
      const position = input.compareDocumentPosition(target);
      const targetIsBeforeInput = (position & Node.DOCUMENT_POSITION_PRECEDING) !== 0;
      const cursorPosition = targetIsBeforeInput ? 0 : input.value.length;
      requestAnimationFrame(() => {
        input.setSelectionRange(cursorPosition, cursorPosition);
        input.focus();
      });
    }) },
    React34.createElement(TextFieldContext.Provider, { value: { size, variant, color, radius } }, children)
  );
});
TextFieldRoot.displayName = "TextFieldRoot";
var TextFieldSlot = React34.forwardRef((props, forwardedRef) => {
  const { rest: paddingRest, ...paddingProps } = extractPaddingProps(props);
  const { className, color = textFieldSlotPropDefs.color.default, gap = textFieldSlotPropDefs.gap.default, ...slotProps } = paddingRest;
  const context = React34.useContext(TextFieldContext);
  return React34.createElement("div", { "data-accent-color": color, ...slotProps, ref: forwardedRef, className: (0, import_classnames21.default)("rt-TextFieldSlot", className, withBreakpoints(context === null || context === void 0 ? void 0 : context.size, "rt-r-size"), withBreakpoints(gap, "rt-r-gap"), withPaddingProps(paddingProps)) });
});
TextFieldSlot.displayName = "TextFieldSlot";
var TextFieldInput = React34.forwardRef((props, forwardedRef) => {
  var _a, _b, _c, _d;
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const context = React34.useContext(TextFieldContext);
  const hasRoot = context !== void 0;
  const { className, size = (_a = context === null || context === void 0 ? void 0 : context.size) !== null && _a !== void 0 ? _a : textFieldPropDefs.size.default, variant = (_b = context === null || context === void 0 ? void 0 : context.variant) !== null && _b !== void 0 ? _b : textFieldPropDefs.variant.default, color = (_c = context === null || context === void 0 ? void 0 : context.color) !== null && _c !== void 0 ? _c : textFieldPropDefs.color.default, radius = (_d = context === null || context === void 0 ? void 0 : context.radius) !== null && _d !== void 0 ? _d : textFieldPropDefs.radius.default, ...inputProps } = marginRest;
  const input = React34.createElement(
    React34.Fragment,
    null,
    React34.createElement("input", { "data-accent-color": color, spellCheck: "false", ...inputProps, ref: forwardedRef, className: (0, import_classnames21.default)("rt-TextFieldInput", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`) }),
    React34.createElement("div", { "data-accent-color": color, "data-radius": (context === null || context === void 0 ? void 0 : context.radius) ? void 0 : radius, className: "rt-TextFieldChrome" })
  );
  return hasRoot ? input : React34.createElement(TextFieldRoot, { ...marginProps, size, variant, color, radius }, input);
});
TextFieldInput.displayName = "TextFieldInput";
var TextField = Object.assign({}, {
  Root: TextFieldRoot,
  Slot: TextFieldSlot,
  Input: TextFieldInput
});

// node_modules/@radix-ui/themes/dist/esm/components/dialog.js
var React35 = __toESM(require_react());
var import_classnames22 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/dialog.props.js
var contentSizes = ["1", "2", "3", "4"];
var dialogContentPropDefs = {
  size: { type: "enum", values: contentSizes, default: "3", responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/dialog.js
var DialogRoot = (props) => React35.createElement(Root3, { ...props, modal: true });
DialogRoot.displayName = "DialogRoot";
var DialogTrigger = React35.forwardRef((props, forwardedRef) => React35.createElement(Trigger, { ...props, ref: forwardedRef, asChild: true }));
DialogTrigger.displayName = "DialogTrigger";
var DialogContent = React35.forwardRef((props, forwardedRef) => {
  const { className, forceMount, container, size = dialogContentPropDefs.size.default, ...contentProps } = props;
  return React35.createElement(
    Portal2,
    { container, forceMount },
    React35.createElement(
      Theme,
      { asChild: true },
      React35.createElement(
        Overlay,
        { className: "rt-DialogOverlay" },
        React35.createElement(Content2, { ...contentProps, ref: forwardedRef, className: (0, import_classnames22.default)("rt-DialogContent", className, withBreakpoints(size, "rt-r-size")) })
      )
    )
  );
});
DialogContent.displayName = "DialogContent";
var DialogTitle = React35.forwardRef((props, forwardedRef) => React35.createElement(
  Title,
  { asChild: true },
  React35.createElement(Heading, { size: "5", mb: "3", trim: "start", ...props, ref: forwardedRef })
));
DialogTitle.displayName = "DialogTitle";
var DialogDescription = React35.forwardRef((props, forwardedRef) => React35.createElement(
  Description,
  { asChild: true },
  React35.createElement(Text, { as: "p", size: "3", ...props, ref: forwardedRef })
));
DialogDescription.displayName = "DialogDescription";
var DialogClose = React35.forwardRef((props, forwardedRef) => React35.createElement(Close, { ...props, ref: forwardedRef, asChild: true }));
DialogClose.displayName = "DialogClose";
var Dialog = Object.assign({}, {
  Root: DialogRoot,
  Trigger: DialogTrigger,
  Content: DialogContent,
  Title: DialogTitle,
  Description: DialogDescription,
  Close: DialogClose
});

// node_modules/@radix-ui/themes/dist/esm/components/alert-dialog.js
var React37 = __toESM(require_react());
var import_classnames23 = __toESM(require_classnames());

// node_modules/@radix-ui/react-alert-dialog/dist/index.mjs
var React36 = __toESM(require_react(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var ROOT_NAME = "AlertDialog";
var [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [
  createDialogScope
]);
var useDialogScope = createDialogScope();
var AlertDialog = (props) => {
  const { __scopeAlertDialog, ...alertDialogProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime11.jsx)(Root3, { ...dialogScope, ...alertDialogProps, modal: true });
};
AlertDialog.displayName = ROOT_NAME;
var TRIGGER_NAME3 = "AlertDialogTrigger";
var AlertDialogTrigger = React36.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...triggerProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return (0, import_jsx_runtime11.jsx)(Trigger, { ...dialogScope, ...triggerProps, ref: forwardedRef });
  }
);
AlertDialogTrigger.displayName = TRIGGER_NAME3;
var PORTAL_NAME3 = "AlertDialogPortal";
var AlertDialogPortal = (props) => {
  const { __scopeAlertDialog, ...portalProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime11.jsx)(Portal2, { ...dialogScope, ...portalProps });
};
AlertDialogPortal.displayName = PORTAL_NAME3;
var OVERLAY_NAME = "AlertDialogOverlay";
var AlertDialogOverlay = React36.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...overlayProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return (0, import_jsx_runtime11.jsx)(Overlay, { ...dialogScope, ...overlayProps, ref: forwardedRef });
  }
);
AlertDialogOverlay.displayName = OVERLAY_NAME;
var CONTENT_NAME3 = "AlertDialogContent";
var [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME3);
var AlertDialogContent = React36.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, children, ...contentProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    const contentRef = React36.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef);
    const cancelRef = React36.useRef(null);
    return (0, import_jsx_runtime11.jsx)(
      WarningProvider,
      {
        contentName: CONTENT_NAME3,
        titleName: TITLE_NAME,
        docsSlug: "alert-dialog",
        children: (0, import_jsx_runtime11.jsx)(AlertDialogContentProvider, { scope: __scopeAlertDialog, cancelRef, children: (0, import_jsx_runtime11.jsxs)(
          Content2,
          {
            role: "alertdialog",
            ...dialogScope,
            ...contentProps,
            ref: composedRefs,
            onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {
              var _a;
              event.preventDefault();
              (_a = cancelRef.current) == null ? void 0 : _a.focus({ preventScroll: true });
            }),
            onPointerDownOutside: (event) => event.preventDefault(),
            onInteractOutside: (event) => event.preventDefault(),
            children: [
              (0, import_jsx_runtime11.jsx)(Slottable, { children }),
              (0, import_jsx_runtime11.jsx)(DescriptionWarning, { contentRef })
            ]
          }
        ) })
      }
    );
  }
);
AlertDialogContent.displayName = CONTENT_NAME3;
var TITLE_NAME = "AlertDialogTitle";
var AlertDialogTitle = React36.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...titleProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return (0, import_jsx_runtime11.jsx)(Title, { ...dialogScope, ...titleProps, ref: forwardedRef });
  }
);
AlertDialogTitle.displayName = TITLE_NAME;
var DESCRIPTION_NAME = "AlertDialogDescription";
var AlertDialogDescription = React36.forwardRef((props, forwardedRef) => {
  const { __scopeAlertDialog, ...descriptionProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime11.jsx)(Description, { ...dialogScope, ...descriptionProps, ref: forwardedRef });
});
AlertDialogDescription.displayName = DESCRIPTION_NAME;
var ACTION_NAME = "AlertDialogAction";
var AlertDialogAction = React36.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...actionProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return (0, import_jsx_runtime11.jsx)(Close, { ...dialogScope, ...actionProps, ref: forwardedRef });
  }
);
AlertDialogAction.displayName = ACTION_NAME;
var CANCEL_NAME = "AlertDialogCancel";
var AlertDialogCancel = React36.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...cancelProps } = props;
    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);
    const dialogScope = useDialogScope(__scopeAlertDialog);
    const ref = useComposedRefs(forwardedRef, cancelRef);
    return (0, import_jsx_runtime11.jsx)(Close, { ...dialogScope, ...cancelProps, ref });
  }
);
AlertDialogCancel.displayName = CANCEL_NAME;
var DescriptionWarning = ({ contentRef }) => {
  const MESSAGE = `\`${CONTENT_NAME3}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${CONTENT_NAME3}\` by passing a \`${DESCRIPTION_NAME}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${CONTENT_NAME3}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;
  React36.useEffect(() => {
    var _a;
    const hasDescription = document.getElementById(
      (_a = contentRef.current) == null ? void 0 : _a.getAttribute("aria-describedby")
    );
    if (!hasDescription)
      console.warn(MESSAGE);
  }, [MESSAGE, contentRef]);
  return null;
};
var Root25 = AlertDialog;
var Trigger22 = AlertDialogTrigger;
var Portal23 = AlertDialogPortal;
var Overlay2 = AlertDialogOverlay;
var Content26 = AlertDialogContent;
var Action = AlertDialogAction;
var Cancel = AlertDialogCancel;
var Title2 = AlertDialogTitle;
var Description2 = AlertDialogDescription;

// node_modules/@radix-ui/themes/dist/esm/components/alert-dialog.js
var AlertDialogRoot = (props) => React37.createElement(Root25, { ...props });
AlertDialogRoot.displayName = "AlertDialogRoot";
var AlertDialogTrigger2 = React37.forwardRef((props, forwardedRef) => React37.createElement(Trigger22, { ...props, ref: forwardedRef, asChild: true }));
AlertDialogTrigger2.displayName = "AlertDialogTrigger";
var AlertDialogContent2 = React37.forwardRef((props, forwardedRef) => {
  const { className, forceMount, container, size = dialogContentPropDefs.size.default, ...contentProps } = props;
  return React37.createElement(
    Portal23,
    { container, forceMount },
    React37.createElement(
      Theme,
      { asChild: true },
      React37.createElement(
        Overlay2,
        { className: "rt-DialogOverlay rt-AlertDialogOverlay" },
        React37.createElement(Content26, { ...contentProps, ref: forwardedRef, className: (0, import_classnames23.default)("rt-DialogContent", "rt-AlertDialogContent", className, withBreakpoints(size, "rt-r-size")) })
      )
    )
  );
});
AlertDialogContent2.displayName = "AlertDialogContent";
var AlertDialogTitle2 = React37.forwardRef((props, forwardedRef) => React37.createElement(
  Title2,
  { asChild: true },
  React37.createElement(Heading, { size: "5", mb: "3", trim: "start", ...props, ref: forwardedRef })
));
AlertDialogTitle2.displayName = "AlertDialogTitle";
var AlertDialogDescription2 = React37.forwardRef((props, forwardedRef) => React37.createElement(
  Description2,
  { asChild: true },
  React37.createElement(Text, { as: "p", size: "3", ...props, ref: forwardedRef })
));
AlertDialogDescription2.displayName = "AlertDialogDescription";
var AlertDialogAction2 = React37.forwardRef((props, forwardedRef) => React37.createElement(Action, { ...props, ref: forwardedRef, asChild: true }));
AlertDialogAction2.displayName = "AlertDialogAction";
var AlertDialogCancel2 = React37.forwardRef((props, forwardedRef) => React37.createElement(Cancel, { ...props, ref: forwardedRef, asChild: true }));
AlertDialogCancel2.displayName = "AlertDialogCancel";
var AlertDialog2 = Object.assign({}, {
  Root: AlertDialogRoot,
  Trigger: AlertDialogTrigger2,
  Content: AlertDialogContent2,
  Title: AlertDialogTitle2,
  Description: AlertDialogDescription2,
  Action: AlertDialogAction2,
  Cancel: AlertDialogCancel2
});

// node_modules/@radix-ui/themes/dist/esm/components/dropdown-menu.js
var React39 = __toESM(require_react());
var import_classnames25 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/scroll-area.js
var React38 = __toESM(require_react());
var import_classnames24 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/scroll-area.props.js
var sizes14 = ["1", "2", "3"];
var scrollbarsValues = ["vertical", "horizontal", "both"];
var scrollAreaPropDefs = {
  size: { type: "enum", values: sizes14, default: "1", responsive: true },
  radius: radiusProp,
  scrollbars: { type: "enum", values: scrollbarsValues, default: "both" }
};

// node_modules/@radix-ui/themes/dist/esm/components/scroll-area.js
var ScrollArea2 = React38.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, style, type, scrollHideDelay = type !== "scroll" ? 0 : void 0, dir, size = scrollAreaPropDefs.size.default, radius = scrollAreaPropDefs.radius.default, scrollbars = scrollAreaPropDefs.scrollbars.default, ...viewportProps } = marginRest;
  return React38.createElement(
    Root6,
    { type, scrollHideDelay, className: (0, import_classnames24.default)("rt-ScrollAreaRoot", className, withMarginProps(marginProps)), style },
    React38.createElement(Viewport2, { ...viewportProps, ref: forwardedRef, className: "rt-ScrollAreaViewport" }),
    React38.createElement("div", { className: "rt-ScrollAreaViewportFocusRing" }),
    scrollbars !== "vertical" ? React38.createElement(
      Scrollbar,
      { "data-radius": radius, orientation: "horizontal", className: (0, import_classnames24.default)("rt-ScrollAreaScrollbar", withBreakpoints(size, "rt-r-size")) },
      React38.createElement(Thumb, { className: "rt-ScrollAreaThumb" })
    ) : null,
    scrollbars !== "horizontal" ? React38.createElement(
      Scrollbar,
      { "data-radius": radius, orientation: "vertical", className: (0, import_classnames24.default)("rt-ScrollAreaScrollbar", withBreakpoints(size, "rt-r-size")) },
      React38.createElement(Thumb, { className: "rt-ScrollAreaThumb" })
    ) : null,
    scrollbars === "both" ? React38.createElement(Corner, { className: "rt-ScrollAreaCorner" }) : null
  );
});
ScrollArea2.displayName = "ScrollArea";

// node_modules/@radix-ui/themes/dist/esm/components/base-menu.props.js
var contentSizes2 = ["1", "2"];
var contentVariants2 = ["solid", "soft"];
var baseMenuContentPropDefs = {
  size: { type: "enum", values: contentSizes2, default: "2", responsive: true },
  variant: { type: "enum", values: contentVariants2, default: "solid" },
  color: colorProp,
  highContrast: highContrastProp
};
var baseMenuItemPropDefs = {
  color: colorProp,
  shortcut: { type: "string", default: void 0 }
};
var baseMenuCheckboxItemPropDefs = {
  shortcut: { type: "string", default: void 0 }
};

// node_modules/@radix-ui/themes/dist/esm/components/dropdown-menu.js
var DropdownMenuRoot = (props) => React39.createElement(Root22, { ...props });
DropdownMenuRoot.displayName = "DropdownMenuRoot";
var DropdownMenuTrigger = React39.forwardRef((props, forwardedRef) => React39.createElement(Trigger2, { ...props, ref: forwardedRef, asChild: true }));
DropdownMenuTrigger.displayName = "DropdownMenuTrigger";
var DropdownMenuContentContext = React39.createContext({});
var DropdownMenuContent = React39.forwardRef((props, forwardedRef) => {
  const themeContext = useThemeContext();
  const { className, children, size = baseMenuContentPropDefs.size.default, variant = baseMenuContentPropDefs.variant.default, highContrast = baseMenuContentPropDefs.highContrast.default, color = baseMenuItemPropDefs.color.default, container, forceMount, ...contentProps } = props;
  const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
  return React39.createElement(
    Portal22,
    { container, forceMount },
    React39.createElement(
      Theme,
      { asChild: true },
      React39.createElement(
        Content23,
        { "data-accent-color": resolvedColor, align: "start", sideOffset: 4, collisionPadding: 10, ...contentProps, ref: forwardedRef, className: (0, import_classnames25.default)("rt-PopperContent", "rt-BaseMenuContent", "rt-DropdownMenuContent", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast }) },
        React39.createElement(
          ScrollArea2,
          { type: "auto" },
          React39.createElement(
            "div",
            { className: (0, import_classnames25.default)("rt-BaseMenuViewport", "rt-DropdownMenuViewport") },
            React39.createElement(DropdownMenuContentContext.Provider, { value: React39.useMemo(() => ({ size, variant, color: resolvedColor, highContrast }), [size, variant, resolvedColor, highContrast]) }, children)
          )
        )
      )
    )
  );
});
DropdownMenuContent.displayName = "DropdownMenuContent";
var DropdownMenuLabel = React39.forwardRef((props, forwardedRef) => React39.createElement(Label2, { ...props, ref: forwardedRef, className: (0, import_classnames25.default)("rt-BaseMenuLabel", "rt-DropdownMenuLabel", props.className) }));
DropdownMenuLabel.displayName = "DropdownMenuLabel";
var DropdownMenuItem = React39.forwardRef((props, forwardedRef) => {
  const { className, children, color = baseMenuItemPropDefs.color.default, shortcut, ...itemProps } = props;
  return React39.createElement(
    Item22,
    { "data-accent-color": color, ...itemProps, ref: forwardedRef, className: (0, import_classnames25.default)("rt-reset", "rt-BaseMenuItem", "rt-DropdownMenuItem", className) },
    React39.createElement(Slottable, null, children),
    shortcut && React39.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" }, shortcut)
  );
});
DropdownMenuItem.displayName = "DropdownMenuItem";
var DropdownMenuGroup = React39.forwardRef((props, forwardedRef) => React39.createElement(Group2, { ...props, ref: forwardedRef, className: (0, import_classnames25.default)("rt-BaseMenuGroup", "rt-DropdownMenuGroup", props.className) }));
DropdownMenuGroup.displayName = "DropdownMenuGroup";
var DropdownMenuRadioGroup = React39.forwardRef((props, forwardedRef) => React39.createElement(RadioGroup2, { ...props, ref: forwardedRef, className: (0, import_classnames25.default)("rt-BaseMenuRadioGroup", "rt-DropdownMenuRadioGroup", props.className) }));
DropdownMenuRadioGroup.displayName = "DropdownMenuRadioGroup";
var DropdownMenuRadioItem = React39.forwardRef((props, forwardedRef) => {
  const { children, className, ...itemProps } = props;
  return React39.createElement(
    RadioItem2,
    { ...itemProps, ref: forwardedRef, className: (0, import_classnames25.default)("rt-BaseMenuItem", "rt-BaseMenuRadioItem", "rt-DropdownMenuItem", "rt-DropdownMenuRadioItem", className) },
    React39.createElement(Slottable, null, children),
    React39.createElement(
      ItemIndicator2,
      { className: "rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator" },
      React39.createElement(ThickCheckIcon, { className: "rt-BaseMenuItemIndicatorIcon rt-DropdownMenuItemIndicatorIcon" })
    )
  );
});
DropdownMenuRadioItem.displayName = "DropdownMenuRadioItem";
var DropdownMenuCheckboxItem = React39.forwardRef((props, forwardedRef) => {
  const { children, className, shortcut, ...itemProps } = props;
  return React39.createElement(
    CheckboxItem2,
    { ...itemProps, ref: forwardedRef, className: (0, import_classnames25.default)("rt-BaseMenuItem", "rt-BaseMenuCheckboxItem", "rt-DropdownMenuItem", "rt-DropdownMenuCheckboxItem", className) },
    React39.createElement(Slottable, null, children),
    React39.createElement(
      ItemIndicator2,
      { className: "rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator" },
      React39.createElement(ThickCheckIcon, { className: "rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" })
    ),
    shortcut && React39.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" }, shortcut)
  );
});
DropdownMenuCheckboxItem.displayName = "DropdownMenuCheckboxItem";
var DropdownMenuSub = (props) => React39.createElement(Sub2, { ...props });
DropdownMenuSub.displayName = "DropdownMenuSub";
var DropdownMenuSubTrigger = React39.forwardRef((props, forwardedRef) => {
  const { className, children, ...subTriggerProps } = props;
  return React39.createElement(
    SubTrigger2,
    { ...subTriggerProps, ref: forwardedRef, className: (0, import_classnames25.default)("rt-BaseMenuItem", "rt-BaseMenuSubTrigger", "rt-DropdownMenuItem", "rt-DropdownMenuSubTrigger", className) },
    React39.createElement(Slottable, null, children),
    React39.createElement(
      "div",
      { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" },
      React39.createElement(ThickChevronRightIcon, { className: "rt-BaseMenuSubTriggerIcon rt-DropdownMenuSubtriggerIcon" })
    )
  );
});
DropdownMenuSubTrigger.displayName = "DropdownMenuSubTrigger";
var DropdownMenuSubContent = React39.forwardRef((props, forwardedRef) => {
  const { className, children, container, forceMount, ...subContentProps } = props;
  const { size, variant, color, highContrast } = React39.useContext(DropdownMenuContentContext);
  return React39.createElement(
    Portal22,
    { container, forceMount },
    React39.createElement(
      Theme,
      { asChild: true },
      React39.createElement(
        SubContent2,
        {
          "data-accent-color": color,
          alignOffset: -Number(size) * 4,
          // Side offset accounts for the outer solid box-shadow
          sideOffset: 1,
          collisionPadding: 10,
          ...subContentProps,
          ref: forwardedRef,
          className: (0, import_classnames25.default)("rt-PopperContent", "rt-BaseMenuContent", "rt-BaseMenuSubContent", "rt-DropdownMenuContent", "rt-DropdownMenuSubContent", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast })
        },
        React39.createElement(
          ScrollArea2,
          { type: "auto" },
          React39.createElement("div", { className: (0, import_classnames25.default)("rt-BaseMenuViewport", "rt-DropdownMenuViewport") }, children)
        )
      )
    )
  );
});
DropdownMenuSubContent.displayName = "DropdownMenuSubContent";
var DropdownMenuSeparator = React39.forwardRef((props, forwardedRef) => React39.createElement(Separator2, { ...props, ref: forwardedRef, className: (0, import_classnames25.default)("rt-BaseMenuSeparator", "rt-DropdownMenuSeparator", props.className) }));
DropdownMenuSeparator.displayName = "DropdownMenuSeparator";
var DropdownMenu = Object.assign({}, {
  Root: DropdownMenuRoot,
  Trigger: DropdownMenuTrigger,
  Content: DropdownMenuContent,
  Label: DropdownMenuLabel,
  Item: DropdownMenuItem,
  Group: DropdownMenuGroup,
  RadioGroup: DropdownMenuRadioGroup,
  RadioItem: DropdownMenuRadioItem,
  CheckboxItem: DropdownMenuCheckboxItem,
  Sub: DropdownMenuSub,
  SubTrigger: DropdownMenuSubTrigger,
  SubContent: DropdownMenuSubContent,
  Separator: DropdownMenuSeparator
});

// node_modules/@radix-ui/themes/dist/esm/components/context-menu.js
var React41 = __toESM(require_react());
var import_classnames26 = __toESM(require_classnames());

// node_modules/@radix-ui/react-context-menu/dist/index.mjs
var React40 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var CONTEXT_MENU_NAME = "ContextMenu";
var [createContextMenuContext, createContextMenuScope] = createContextScope(CONTEXT_MENU_NAME, [
  createMenuScope
]);
var useMenuScope = createMenuScope();
var [ContextMenuProvider, useContextMenuContext] = createContextMenuContext(CONTEXT_MENU_NAME);
var ContextMenu = (props) => {
  const { __scopeContextMenu, children, onOpenChange, dir, modal = true } = props;
  const [open, setOpen] = React40.useState(false);
  const menuScope = useMenuScope(__scopeContextMenu);
  const handleOpenChangeProp = useCallbackRef(onOpenChange);
  const handleOpenChange = React40.useCallback(
    (open2) => {
      setOpen(open2);
      handleOpenChangeProp(open2);
    },
    [handleOpenChangeProp]
  );
  return (0, import_jsx_runtime12.jsx)(
    ContextMenuProvider,
    {
      scope: __scopeContextMenu,
      open,
      onOpenChange: handleOpenChange,
      modal,
      children: (0, import_jsx_runtime12.jsx)(
        Root32,
        {
          ...menuScope,
          dir,
          open,
          onOpenChange: handleOpenChange,
          modal,
          children
        }
      )
    }
  );
};
ContextMenu.displayName = CONTEXT_MENU_NAME;
var TRIGGER_NAME4 = "ContextMenuTrigger";
var ContextMenuTrigger = React40.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, disabled = false, ...triggerProps } = props;
    const context = useContextMenuContext(TRIGGER_NAME4, __scopeContextMenu);
    const menuScope = useMenuScope(__scopeContextMenu);
    const pointRef = React40.useRef({ x: 0, y: 0 });
    const virtualRef = React40.useRef({
      getBoundingClientRect: () => DOMRect.fromRect({ width: 0, height: 0, ...pointRef.current })
    });
    const longPressTimerRef = React40.useRef(0);
    const clearLongPress = React40.useCallback(
      () => window.clearTimeout(longPressTimerRef.current),
      []
    );
    const handleOpen = (event) => {
      pointRef.current = { x: event.clientX, y: event.clientY };
      context.onOpenChange(true);
    };
    React40.useEffect(() => clearLongPress, [clearLongPress]);
    React40.useEffect(() => void (disabled && clearLongPress()), [disabled, clearLongPress]);
    return (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
      (0, import_jsx_runtime12.jsx)(Anchor2, { ...menuScope, virtualRef }),
      (0, import_jsx_runtime12.jsx)(
        Primitive.span,
        {
          "data-state": context.open ? "open" : "closed",
          "data-disabled": disabled ? "" : void 0,
          ...triggerProps,
          ref: forwardedRef,
          style: { WebkitTouchCallout: "none", ...props.style },
          onContextMenu: disabled ? props.onContextMenu : composeEventHandlers(props.onContextMenu, (event) => {
            clearLongPress();
            handleOpen(event);
            event.preventDefault();
          }),
          onPointerDown: disabled ? props.onPointerDown : composeEventHandlers(
            props.onPointerDown,
            whenTouchOrPen((event) => {
              clearLongPress();
              longPressTimerRef.current = window.setTimeout(() => handleOpen(event), 700);
            })
          ),
          onPointerMove: disabled ? props.onPointerMove : composeEventHandlers(props.onPointerMove, whenTouchOrPen(clearLongPress)),
          onPointerCancel: disabled ? props.onPointerCancel : composeEventHandlers(props.onPointerCancel, whenTouchOrPen(clearLongPress)),
          onPointerUp: disabled ? props.onPointerUp : composeEventHandlers(props.onPointerUp, whenTouchOrPen(clearLongPress))
        }
      )
    ] });
  }
);
ContextMenuTrigger.displayName = TRIGGER_NAME4;
var PORTAL_NAME4 = "ContextMenuPortal";
var ContextMenuPortal = (props) => {
  const { __scopeContextMenu, ...portalProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime12.jsx)(Portal3, { ...menuScope, ...portalProps });
};
ContextMenuPortal.displayName = PORTAL_NAME4;
var CONTENT_NAME4 = "ContextMenuContent";
var ContextMenuContent = React40.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, ...contentProps } = props;
    const context = useContextMenuContext(CONTENT_NAME4, __scopeContextMenu);
    const menuScope = useMenuScope(__scopeContextMenu);
    const hasInteractedOutsideRef = React40.useRef(false);
    return (0, import_jsx_runtime12.jsx)(
      Content22,
      {
        ...menuScope,
        ...contentProps,
        ref: forwardedRef,
        side: "right",
        sideOffset: 2,
        align: "start",
        onCloseAutoFocus: (event) => {
          var _a;
          (_a = props.onCloseAutoFocus) == null ? void 0 : _a.call(props, event);
          if (!event.defaultPrevented && hasInteractedOutsideRef.current) {
            event.preventDefault();
          }
          hasInteractedOutsideRef.current = false;
        },
        onInteractOutside: (event) => {
          var _a;
          (_a = props.onInteractOutside) == null ? void 0 : _a.call(props, event);
          if (!event.defaultPrevented && !context.modal)
            hasInteractedOutsideRef.current = true;
        },
        style: {
          ...props.style,
          // re-namespace exposed content custom properties
          ...{
            "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
            "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
            "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
          }
        }
      }
    );
  }
);
ContextMenuContent.displayName = CONTENT_NAME4;
var GROUP_NAME2 = "ContextMenuGroup";
var ContextMenuGroup = React40.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, ...groupProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return (0, import_jsx_runtime12.jsx)(Group, { ...menuScope, ...groupProps, ref: forwardedRef });
  }
);
ContextMenuGroup.displayName = GROUP_NAME2;
var LABEL_NAME2 = "ContextMenuLabel";
var ContextMenuLabel = React40.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, ...labelProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return (0, import_jsx_runtime12.jsx)(Label, { ...menuScope, ...labelProps, ref: forwardedRef });
  }
);
ContextMenuLabel.displayName = LABEL_NAME2;
var ITEM_NAME3 = "ContextMenuItem";
var ContextMenuItem = React40.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, ...itemProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return (0, import_jsx_runtime12.jsx)(Item2, { ...menuScope, ...itemProps, ref: forwardedRef });
  }
);
ContextMenuItem.displayName = ITEM_NAME3;
var CHECKBOX_ITEM_NAME = "ContextMenuCheckboxItem";
var ContextMenuCheckboxItem = React40.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...checkboxItemProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime12.jsx)(CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });
});
ContextMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;
var RADIO_GROUP_NAME2 = "ContextMenuRadioGroup";
var ContextMenuRadioGroup = React40.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...radioGroupProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime12.jsx)(RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });
});
ContextMenuRadioGroup.displayName = RADIO_GROUP_NAME2;
var RADIO_ITEM_NAME = "ContextMenuRadioItem";
var ContextMenuRadioItem = React40.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...radioItemProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime12.jsx)(RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });
});
ContextMenuRadioItem.displayName = RADIO_ITEM_NAME;
var INDICATOR_NAME3 = "ContextMenuItemIndicator";
var ContextMenuItemIndicator = React40.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...itemIndicatorProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime12.jsx)(ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });
});
ContextMenuItemIndicator.displayName = INDICATOR_NAME3;
var SEPARATOR_NAME2 = "ContextMenuSeparator";
var ContextMenuSeparator = React40.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...separatorProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime12.jsx)(Separator, { ...menuScope, ...separatorProps, ref: forwardedRef });
});
ContextMenuSeparator.displayName = SEPARATOR_NAME2;
var ARROW_NAME3 = "ContextMenuArrow";
var ContextMenuArrow = React40.forwardRef(
  (props, forwardedRef) => {
    const { __scopeContextMenu, ...arrowProps } = props;
    const menuScope = useMenuScope(__scopeContextMenu);
    return (0, import_jsx_runtime12.jsx)(Arrow2, { ...menuScope, ...arrowProps, ref: forwardedRef });
  }
);
ContextMenuArrow.displayName = ARROW_NAME3;
var SUB_NAME = "ContextMenuSub";
var ContextMenuSub = (props) => {
  const { __scopeContextMenu, children, onOpenChange, open: openProp, defaultOpen } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return (0, import_jsx_runtime12.jsx)(Sub, { ...menuScope, open, onOpenChange: setOpen, children });
};
ContextMenuSub.displayName = SUB_NAME;
var SUB_TRIGGER_NAME = "ContextMenuSubTrigger";
var ContextMenuSubTrigger = React40.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...triggerItemProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime12.jsx)(SubTrigger, { ...menuScope, ...triggerItemProps, ref: forwardedRef });
});
ContextMenuSubTrigger.displayName = SUB_TRIGGER_NAME;
var SUB_CONTENT_NAME = "ContextMenuSubContent";
var ContextMenuSubContent = React40.forwardRef((props, forwardedRef) => {
  const { __scopeContextMenu, ...subContentProps } = props;
  const menuScope = useMenuScope(__scopeContextMenu);
  return (0, import_jsx_runtime12.jsx)(
    SubContent,
    {
      ...menuScope,
      ...subContentProps,
      ref: forwardedRef,
      style: {
        ...props.style,
        // re-namespace exposed content custom properties
        ...{
          "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
          "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
          "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    }
  );
});
ContextMenuSubContent.displayName = SUB_CONTENT_NAME;
function whenTouchOrPen(handler) {
  return (event) => event.pointerType !== "mouse" ? handler(event) : void 0;
}
var Root26 = ContextMenu;
var Trigger5 = ContextMenuTrigger;
var Portal24 = ContextMenuPortal;
var Content27 = ContextMenuContent;
var Group22 = ContextMenuGroup;
var Label22 = ContextMenuLabel;
var Item24 = ContextMenuItem;
var CheckboxItem22 = ContextMenuCheckboxItem;
var RadioGroup22 = ContextMenuRadioGroup;
var RadioItem22 = ContextMenuRadioItem;
var ItemIndicator22 = ContextMenuItemIndicator;
var Separator22 = ContextMenuSeparator;
var Sub22 = ContextMenuSub;
var SubTrigger22 = ContextMenuSubTrigger;
var SubContent22 = ContextMenuSubContent;

// node_modules/@radix-ui/themes/dist/esm/components/context-menu.js
var ContextMenuRoot = (props) => React41.createElement(Root26, { ...props });
ContextMenuRoot.displayName = "ContextMenuRoot";
var ContextMenuTrigger2 = React41.forwardRef((props, forwardedRef) => React41.createElement(Trigger5, { ...props, ref: forwardedRef, asChild: true }));
ContextMenuTrigger2.displayName = "ContextMenuTrigger";
var ContextMenuContentContext = React41.createContext({});
var ContextMenuContent2 = React41.forwardRef((props, forwardedRef) => {
  const themeContext = useThemeContext();
  const { className, children, size = baseMenuContentPropDefs.size.default, variant = baseMenuContentPropDefs.variant.default, color = baseMenuContentPropDefs.color.default, highContrast = baseMenuContentPropDefs.highContrast.default, container, forceMount, ...contentProps } = props;
  const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
  return React41.createElement(
    Portal24,
    { container, forceMount },
    React41.createElement(
      Theme,
      { asChild: true },
      React41.createElement(
        Content27,
        { "data-accent-color": resolvedColor, alignOffset: -Number(size) * 4, collisionPadding: 10, ...contentProps, ref: forwardedRef, className: (0, import_classnames26.default)("rt-PopperContent", "rt-BaseMenuContent", "rt-ContextMenuContent", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast }) },
        React41.createElement(
          ScrollArea2,
          { type: "auto" },
          React41.createElement(
            "div",
            { className: (0, import_classnames26.default)("rt-BaseMenuViewport", "rt-ContextMenuViewport") },
            React41.createElement(ContextMenuContentContext.Provider, { value: React41.useMemo(() => ({ size, variant, color: resolvedColor, highContrast }), [size, variant, resolvedColor, highContrast]) }, children)
          )
        )
      )
    )
  );
});
ContextMenuContent2.displayName = "ContextMenuContent";
var ContextMenuLabel2 = React41.forwardRef((props, forwardedRef) => React41.createElement(Label22, { ...props, ref: forwardedRef, className: (0, import_classnames26.default)("rt-BaseMenuLabel", "rt-ContextMenuLabel", props.className) }));
ContextMenuLabel2.displayName = "ContextMenuLabel";
var ContextMenuItem2 = React41.forwardRef((props, forwardedRef) => {
  const { className, children, color = baseMenuItemPropDefs.color.default, shortcut, ...itemProps } = props;
  return React41.createElement(
    Item24,
    { "data-accent-color": color, ...itemProps, ref: forwardedRef, className: (0, import_classnames26.default)("rt-reset", "rt-BaseMenuItem", "rt-ContextMenuItem", className) },
    React41.createElement(Slottable, null, children),
    shortcut && React41.createElement("div", { className: "rt-BaseMenuShortcut rt-ContextMenuShortcut" }, shortcut)
  );
});
ContextMenuItem2.displayName = "ContextMenuItem";
var ContextMenuGroup2 = React41.forwardRef((props, forwardedRef) => React41.createElement(Group22, { ...props, ref: forwardedRef, className: (0, import_classnames26.default)("rt-BaseMenuGroup", "rt-ContextMenuGroup", props.className) }));
ContextMenuGroup2.displayName = "ContextMenuGroup";
var ContextMenuRadioGroup2 = React41.forwardRef((props, forwardedRef) => React41.createElement(RadioGroup22, { ...props, ref: forwardedRef, className: (0, import_classnames26.default)("rt-BaseMenuRadioGroup", "rt-ContextMenuRadioGroup", props.className) }));
ContextMenuRadioGroup2.displayName = "ContextMenuRadioGroup";
var ContextMenuRadioItem2 = React41.forwardRef((props, forwardedRef) => {
  const { children, className, ...itemProps } = props;
  return React41.createElement(
    RadioItem22,
    { ...itemProps, ref: forwardedRef, className: (0, import_classnames26.default)("rt-BaseMenuItem", "rt-BaseMenuRadioItem", "rt-ContextMenuItem", "rt-ContextMenuRadioItem", className) },
    React41.createElement(Slottable, null, children),
    React41.createElement(
      ItemIndicator22,
      { className: "rt-BaseMenuItemIndicator rt-ContextMenuItemIndicator" },
      React41.createElement(ThickCheckIcon, { className: "rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" })
    )
  );
});
ContextMenuRadioItem2.displayName = "ContextMenuRadioItem";
var ContextMenuCheckboxItem2 = React41.forwardRef((props, forwardedRef) => {
  const { children, className, shortcut, ...itemProps } = props;
  return React41.createElement(
    CheckboxItem22,
    { ...itemProps, ref: forwardedRef, className: (0, import_classnames26.default)("rt-BaseMenuItem", "rt-BaseMenuCheckboxItem", "rt-ContextMenuItem", "rt-ContextMenuCheckboxItem", className) },
    React41.createElement(Slottable, null, children),
    React41.createElement(
      ItemIndicator22,
      { className: "rt-BaseMenuItemIndicator rt-ContextMenuItemIndicator" },
      React41.createElement(ThickCheckIcon, { className: "rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" })
    ),
    shortcut && React41.createElement("div", { className: "rt-BaseMenuShortcut rt-ContextMenuShortcut" }, shortcut)
  );
});
ContextMenuCheckboxItem2.displayName = "ContextMenuCheckboxItem";
var ContextMenuSub2 = (props) => React41.createElement(Sub22, { ...props });
ContextMenuSub2.displayName = "ContextMenuSub";
var ContextMenuSubTrigger2 = React41.forwardRef((props, forwardedRef) => {
  const { className, children, ...subTriggerProps } = props;
  return React41.createElement(
    SubTrigger22,
    { ...subTriggerProps, ref: forwardedRef, className: (0, import_classnames26.default)("rt-BaseMenuItem", "rt-BaseMenuSubTrigger", "rt-ContextMenuItem", "rt-ContextMenuSubTrigger", className) },
    React41.createElement(Slottable, null, children),
    React41.createElement(
      "div",
      { className: "rt-BaseMenuShortcut rt-ContextMenuShortcut" },
      React41.createElement(ThickChevronRightIcon, { className: "rt-BaseMenuSubTriggerIcon rt-ContextMenuSubTriggerIcon" })
    )
  );
});
ContextMenuSubTrigger2.displayName = "ContextMenuSubTrigger";
var ContextMenuSubContent2 = React41.forwardRef((props, forwardedRef) => {
  const { className, children, container, forceMount, ...subContentProps } = props;
  const { size, variant, color, highContrast } = React41.useContext(ContextMenuContentContext);
  return React41.createElement(
    Portal24,
    { container, forceMount },
    React41.createElement(
      Theme,
      { asChild: true },
      React41.createElement(
        SubContent22,
        {
          "data-accent-color": color,
          alignOffset: -Number(size) * 4,
          // Side offset accounts for the outer solid box-shadow
          sideOffset: 1,
          collisionPadding: 10,
          ...subContentProps,
          ref: forwardedRef,
          className: (0, import_classnames26.default)("rt-PopperContent", "rt-BaseMenuContent", "rt-BaseMenuSubContent", "rt-ContextMenuContent", "rt-ContextMenuSubContent", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast })
        },
        React41.createElement(
          ScrollArea2,
          { type: "auto" },
          React41.createElement("div", { className: (0, import_classnames26.default)("rt-BaseMenuViewport", "rt-ContextMenuViewport") }, children)
        )
      )
    )
  );
});
ContextMenuSubContent2.displayName = "ContextMenuSubContent";
var ContextMenuSeparator2 = React41.forwardRef((props, forwardedRef) => React41.createElement(Separator22, { ...props, ref: forwardedRef, className: (0, import_classnames26.default)("rt-BaseMenuSeparator", "rt-ContextMenuSeparator", props.className) }));
ContextMenuSeparator2.displayName = "ContextMenuSeparator";
var ContextMenu2 = Object.assign({}, {
  Root: ContextMenuRoot,
  Trigger: ContextMenuTrigger2,
  Content: ContextMenuContent2,
  Label: ContextMenuLabel2,
  Item: ContextMenuItem2,
  Group: ContextMenuGroup2,
  RadioGroup: ContextMenuRadioGroup2,
  RadioItem: ContextMenuRadioItem2,
  CheckboxItem: ContextMenuCheckboxItem2,
  Sub: ContextMenuSub2,
  SubTrigger: ContextMenuSubTrigger2,
  SubContent: ContextMenuSubContent2,
  Separator: ContextMenuSeparator2
});

// node_modules/@radix-ui/themes/dist/esm/components/hover-card.js
var React43 = __toESM(require_react());
var import_classnames27 = __toESM(require_classnames());

// node_modules/@radix-ui/react-hover-card/dist/index.mjs
var React42 = __toESM(require_react(), 1);
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var originalBodyUserSelect;
var HOVERCARD_NAME = "HoverCard";
var [createHoverCardContext, createHoverCardScope] = createContextScope(HOVERCARD_NAME, [
  createPopperScope
]);
var usePopperScope3 = createPopperScope();
var [HoverCardProvider, useHoverCardContext] = createHoverCardContext(HOVERCARD_NAME);
var HoverCard = (props) => {
  const {
    __scopeHoverCard,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    openDelay = 700,
    closeDelay = 300
  } = props;
  const popperScope = usePopperScope3(__scopeHoverCard);
  const openTimerRef = React42.useRef(0);
  const closeTimerRef = React42.useRef(0);
  const hasSelectionRef = React42.useRef(false);
  const isPointerDownOnContentRef = React42.useRef(false);
  const [open = false, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  const handleOpen = React42.useCallback(() => {
    clearTimeout(closeTimerRef.current);
    openTimerRef.current = window.setTimeout(() => setOpen(true), openDelay);
  }, [openDelay, setOpen]);
  const handleClose = React42.useCallback(() => {
    clearTimeout(openTimerRef.current);
    if (!hasSelectionRef.current && !isPointerDownOnContentRef.current) {
      closeTimerRef.current = window.setTimeout(() => setOpen(false), closeDelay);
    }
  }, [closeDelay, setOpen]);
  const handleDismiss = React42.useCallback(() => setOpen(false), [setOpen]);
  React42.useEffect(() => {
    return () => {
      clearTimeout(openTimerRef.current);
      clearTimeout(closeTimerRef.current);
    };
  }, []);
  return (0, import_jsx_runtime13.jsx)(
    HoverCardProvider,
    {
      scope: __scopeHoverCard,
      open,
      onOpenChange: setOpen,
      onOpen: handleOpen,
      onClose: handleClose,
      onDismiss: handleDismiss,
      hasSelectionRef,
      isPointerDownOnContentRef,
      children: (0, import_jsx_runtime13.jsx)(Root2, { ...popperScope, children })
    }
  );
};
HoverCard.displayName = HOVERCARD_NAME;
var TRIGGER_NAME5 = "HoverCardTrigger";
var HoverCardTrigger = React42.forwardRef(
  (props, forwardedRef) => {
    const { __scopeHoverCard, ...triggerProps } = props;
    const context = useHoverCardContext(TRIGGER_NAME5, __scopeHoverCard);
    const popperScope = usePopperScope3(__scopeHoverCard);
    return (0, import_jsx_runtime13.jsx)(Anchor, { asChild: true, ...popperScope, children: (0, import_jsx_runtime13.jsx)(
      Primitive.a,
      {
        "data-state": context.open ? "open" : "closed",
        ...triggerProps,
        ref: forwardedRef,
        onPointerEnter: composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen)),
        onPointerLeave: composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose)),
        onFocus: composeEventHandlers(props.onFocus, context.onOpen),
        onBlur: composeEventHandlers(props.onBlur, context.onClose),
        onTouchStart: composeEventHandlers(props.onTouchStart, (event) => event.preventDefault())
      }
    ) });
  }
);
HoverCardTrigger.displayName = TRIGGER_NAME5;
var PORTAL_NAME5 = "HoverCardPortal";
var [PortalProvider2, usePortalContext2] = createHoverCardContext(PORTAL_NAME5, {
  forceMount: void 0
});
var HoverCardPortal = (props) => {
  const { __scopeHoverCard, forceMount, children, container } = props;
  const context = useHoverCardContext(PORTAL_NAME5, __scopeHoverCard);
  return (0, import_jsx_runtime13.jsx)(PortalProvider2, { scope: __scopeHoverCard, forceMount, children: (0, import_jsx_runtime13.jsx)(Presence, { present: forceMount || context.open, children: (0, import_jsx_runtime13.jsx)(Portal, { asChild: true, container, children }) }) });
};
HoverCardPortal.displayName = PORTAL_NAME5;
var CONTENT_NAME5 = "HoverCardContent";
var HoverCardContent = React42.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext2(CONTENT_NAME5, props.__scopeHoverCard);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context = useHoverCardContext(CONTENT_NAME5, props.__scopeHoverCard);
    return (0, import_jsx_runtime13.jsx)(Presence, { present: forceMount || context.open, children: (0, import_jsx_runtime13.jsx)(
      HoverCardContentImpl,
      {
        "data-state": context.open ? "open" : "closed",
        ...contentProps,
        onPointerEnter: composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen)),
        onPointerLeave: composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose)),
        ref: forwardedRef
      }
    ) });
  }
);
HoverCardContent.displayName = CONTENT_NAME5;
var HoverCardContentImpl = React42.forwardRef((props, forwardedRef) => {
  const {
    __scopeHoverCard,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    ...contentProps
  } = props;
  const context = useHoverCardContext(CONTENT_NAME5, __scopeHoverCard);
  const popperScope = usePopperScope3(__scopeHoverCard);
  const ref = React42.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const [containSelection, setContainSelection] = React42.useState(false);
  React42.useEffect(() => {
    if (containSelection) {
      const body = document.body;
      originalBodyUserSelect = body.style.userSelect || body.style.webkitUserSelect;
      body.style.userSelect = "none";
      body.style.webkitUserSelect = "none";
      return () => {
        body.style.userSelect = originalBodyUserSelect;
        body.style.webkitUserSelect = originalBodyUserSelect;
      };
    }
  }, [containSelection]);
  React42.useEffect(() => {
    if (ref.current) {
      const handlePointerUp = () => {
        setContainSelection(false);
        context.isPointerDownOnContentRef.current = false;
        setTimeout(() => {
          var _a;
          const hasSelection = ((_a = document.getSelection()) == null ? void 0 : _a.toString()) !== "";
          if (hasSelection)
            context.hasSelectionRef.current = true;
        });
      };
      document.addEventListener("pointerup", handlePointerUp);
      return () => {
        document.removeEventListener("pointerup", handlePointerUp);
        context.hasSelectionRef.current = false;
        context.isPointerDownOnContentRef.current = false;
      };
    }
  }, [context.isPointerDownOnContentRef, context.hasSelectionRef]);
  React42.useEffect(() => {
    if (ref.current) {
      const tabbables = getTabbableNodes(ref.current);
      tabbables.forEach((tabbable) => tabbable.setAttribute("tabindex", "-1"));
    }
  });
  return (0, import_jsx_runtime13.jsx)(
    DismissableLayer,
    {
      asChild: true,
      disableOutsidePointerEvents: false,
      onInteractOutside,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside: composeEventHandlers(onFocusOutside, (event) => {
        event.preventDefault();
      }),
      onDismiss: context.onDismiss,
      children: (0, import_jsx_runtime13.jsx)(
        Content,
        {
          ...popperScope,
          ...contentProps,
          onPointerDown: composeEventHandlers(contentProps.onPointerDown, (event) => {
            if (event.currentTarget.contains(event.target)) {
              setContainSelection(true);
            }
            context.hasSelectionRef.current = false;
            context.isPointerDownOnContentRef.current = true;
          }),
          ref: composedRefs,
          style: {
            ...contentProps.style,
            userSelect: containSelection ? "text" : void 0,
            // Safari requires prefix
            WebkitUserSelect: containSelection ? "text" : void 0,
            // re-namespace exposed content custom properties
            ...{
              "--radix-hover-card-content-transform-origin": "var(--radix-popper-transform-origin)",
              "--radix-hover-card-content-available-width": "var(--radix-popper-available-width)",
              "--radix-hover-card-content-available-height": "var(--radix-popper-available-height)",
              "--radix-hover-card-trigger-width": "var(--radix-popper-anchor-width)",
              "--radix-hover-card-trigger-height": "var(--radix-popper-anchor-height)"
            }
          }
        }
      )
    }
  );
});
var ARROW_NAME4 = "HoverCardArrow";
var HoverCardArrow = React42.forwardRef(
  (props, forwardedRef) => {
    const { __scopeHoverCard, ...arrowProps } = props;
    const popperScope = usePopperScope3(__scopeHoverCard);
    return (0, import_jsx_runtime13.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
HoverCardArrow.displayName = ARROW_NAME4;
function excludeTouch(eventHandler) {
  return (event) => event.pointerType === "touch" ? void 0 : eventHandler();
}
function getTabbableNodes(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
}
var Root27 = HoverCard;
var Trigger6 = HoverCardTrigger;
var Portal6 = HoverCardPortal;
var Content28 = HoverCardContent;

// node_modules/@radix-ui/themes/dist/esm/components/hover-card.props.js
var contentSizes3 = ["1", "2", "3"];
var hoverCardContentPropDefs = {
  size: { type: "enum", values: contentSizes3, default: "2", responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/hover-card.js
var HoverCardRoot = (props) => React43.createElement(Root27, { closeDelay: 150, openDelay: 200, ...props });
HoverCardRoot.displayName = "HoverCardRoot";
var HoverCardTrigger2 = React43.forwardRef((props, forwardedRef) => React43.createElement(Trigger6, { ref: forwardedRef, className: (0, import_classnames27.default)("rt-HoverCardTrigger", props.className), ...props, asChild: true }));
HoverCardTrigger2.displayName = "HoverCardTrigger";
var HoverCardContent2 = React43.forwardRef((props, forwardedRef) => {
  const { className, forceMount, container, size = hoverCardContentPropDefs.size.default, ...contentProps } = props;
  return React43.createElement(
    Portal6,
    { container, forceMount },
    React43.createElement(
      Theme,
      { asChild: true },
      React43.createElement(Content28, { align: "start", sideOffset: 8, collisionPadding: 10, ...contentProps, ref: forwardedRef, className: (0, import_classnames27.default)("rt-PopperContent", "rt-HoverCardContent", className, withBreakpoints(size, "rt-r-size")) })
    )
  );
});
HoverCardContent2.displayName = "HoverCardContent";
var HoverCard2 = Object.assign({}, {
  Root: HoverCardRoot,
  Trigger: HoverCardTrigger2,
  Content: HoverCardContent2
});

// node_modules/@radix-ui/themes/dist/esm/components/popover.js
var React45 = __toESM(require_react());
var import_classnames28 = __toESM(require_classnames());

// node_modules/@radix-ui/react-popover/dist/index.mjs
var React44 = __toESM(require_react(), 1);
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var POPOVER_NAME = "Popover";
var [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [
  createPopperScope
]);
var usePopperScope4 = createPopperScope();
var [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);
var Popover = (props) => {
  const {
    __scopePopover,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    modal = false
  } = props;
  const popperScope = usePopperScope4(__scopePopover);
  const triggerRef = React44.useRef(null);
  const [hasCustomAnchor, setHasCustomAnchor] = React44.useState(false);
  const [open = false, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return (0, import_jsx_runtime14.jsx)(Root2, { ...popperScope, children: (0, import_jsx_runtime14.jsx)(
    PopoverProvider,
    {
      scope: __scopePopover,
      contentId: useId(),
      triggerRef,
      open,
      onOpenChange: setOpen,
      onOpenToggle: React44.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
      hasCustomAnchor,
      onCustomAnchorAdd: React44.useCallback(() => setHasCustomAnchor(true), []),
      onCustomAnchorRemove: React44.useCallback(() => setHasCustomAnchor(false), []),
      modal,
      children
    }
  ) });
};
Popover.displayName = POPOVER_NAME;
var ANCHOR_NAME = "PopoverAnchor";
var PopoverAnchor = React44.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...anchorProps } = props;
    const context = usePopoverContext(ANCHOR_NAME, __scopePopover);
    const popperScope = usePopperScope4(__scopePopover);
    const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
    React44.useEffect(() => {
      onCustomAnchorAdd();
      return () => onCustomAnchorRemove();
    }, [onCustomAnchorAdd, onCustomAnchorRemove]);
    return (0, import_jsx_runtime14.jsx)(Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
  }
);
PopoverAnchor.displayName = ANCHOR_NAME;
var TRIGGER_NAME6 = "PopoverTrigger";
var PopoverTrigger = React44.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...triggerProps } = props;
    const context = usePopoverContext(TRIGGER_NAME6, __scopePopover);
    const popperScope = usePopperScope4(__scopePopover);
    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
    const trigger = (0, import_jsx_runtime14.jsx)(
      Primitive.button,
      {
        type: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": context.open,
        "aria-controls": context.contentId,
        "data-state": getState4(context.open),
        ...triggerProps,
        ref: composedTriggerRef,
        onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
      }
    );
    return context.hasCustomAnchor ? trigger : (0, import_jsx_runtime14.jsx)(Anchor, { asChild: true, ...popperScope, children: trigger });
  }
);
PopoverTrigger.displayName = TRIGGER_NAME6;
var PORTAL_NAME6 = "PopoverPortal";
var [PortalProvider3, usePortalContext3] = createPopoverContext(PORTAL_NAME6, {
  forceMount: void 0
});
var PopoverPortal = (props) => {
  const { __scopePopover, forceMount, children, container } = props;
  const context = usePopoverContext(PORTAL_NAME6, __scopePopover);
  return (0, import_jsx_runtime14.jsx)(PortalProvider3, { scope: __scopePopover, forceMount, children: (0, import_jsx_runtime14.jsx)(Presence, { present: forceMount || context.open, children: (0, import_jsx_runtime14.jsx)(Portal, { asChild: true, container, children }) }) });
};
PopoverPortal.displayName = PORTAL_NAME6;
var CONTENT_NAME6 = "PopoverContent";
var PopoverContent = React44.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext3(CONTENT_NAME6, props.__scopePopover);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context = usePopoverContext(CONTENT_NAME6, props.__scopePopover);
    return (0, import_jsx_runtime14.jsx)(Presence, { present: forceMount || context.open, children: context.modal ? (0, import_jsx_runtime14.jsx)(PopoverContentModal, { ...contentProps, ref: forwardedRef }) : (0, import_jsx_runtime14.jsx)(PopoverContentNonModal, { ...contentProps, ref: forwardedRef }) });
  }
);
PopoverContent.displayName = CONTENT_NAME6;
var PopoverContentModal = React44.forwardRef(
  (props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME6, props.__scopePopover);
    const contentRef = React44.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef);
    const isRightClickOutsideRef = React44.useRef(false);
    React44.useEffect(() => {
      const content = contentRef.current;
      if (content)
        return hideOthers(content);
    }, []);
    return (0, import_jsx_runtime14.jsx)(Combination_default, { as: Slot, allowPinchZoom: true, children: (0, import_jsx_runtime14.jsx)(
      PopoverContentImpl,
      {
        ...props,
        ref: composedRefs,
        trapFocus: context.open,
        disableOutsidePointerEvents: true,
        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
          var _a;
          event.preventDefault();
          if (!isRightClickOutsideRef.current)
            (_a = context.triggerRef.current) == null ? void 0 : _a.focus();
        }),
        onPointerDownOutside: composeEventHandlers(
          props.onPointerDownOutside,
          (event) => {
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            isRightClickOutsideRef.current = isRightClick;
          },
          { checkForDefaultPrevented: false }
        ),
        onFocusOutside: composeEventHandlers(
          props.onFocusOutside,
          (event) => event.preventDefault(),
          { checkForDefaultPrevented: false }
        )
      }
    ) });
  }
);
var PopoverContentNonModal = React44.forwardRef(
  (props, forwardedRef) => {
    const context = usePopoverContext(CONTENT_NAME6, props.__scopePopover);
    const hasInteractedOutsideRef = React44.useRef(false);
    const hasPointerDownOutsideRef = React44.useRef(false);
    return (0, import_jsx_runtime14.jsx)(
      PopoverContentImpl,
      {
        ...props,
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        onCloseAutoFocus: (event) => {
          var _a, _b;
          (_a = props.onCloseAutoFocus) == null ? void 0 : _a.call(props, event);
          if (!event.defaultPrevented) {
            if (!hasInteractedOutsideRef.current)
              (_b = context.triggerRef.current) == null ? void 0 : _b.focus();
            event.preventDefault();
          }
          hasInteractedOutsideRef.current = false;
          hasPointerDownOutsideRef.current = false;
        },
        onInteractOutside: (event) => {
          var _a, _b;
          (_a = props.onInteractOutside) == null ? void 0 : _a.call(props, event);
          if (!event.defaultPrevented) {
            hasInteractedOutsideRef.current = true;
            if (event.detail.originalEvent.type === "pointerdown") {
              hasPointerDownOutsideRef.current = true;
            }
          }
          const target = event.target;
          const targetIsTrigger = (_b = context.triggerRef.current) == null ? void 0 : _b.contains(target);
          if (targetIsTrigger)
            event.preventDefault();
          if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
            event.preventDefault();
          }
        }
      }
    );
  }
);
var PopoverContentImpl = React44.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopePopover,
      trapFocus,
      onOpenAutoFocus,
      onCloseAutoFocus,
      disableOutsidePointerEvents,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      ...contentProps
    } = props;
    const context = usePopoverContext(CONTENT_NAME6, __scopePopover);
    const popperScope = usePopperScope4(__scopePopover);
    useFocusGuards();
    return (0, import_jsx_runtime14.jsx)(
      FocusScope,
      {
        asChild: true,
        loop: true,
        trapped: trapFocus,
        onMountAutoFocus: onOpenAutoFocus,
        onUnmountAutoFocus: onCloseAutoFocus,
        children: (0, import_jsx_runtime14.jsx)(
          DismissableLayer,
          {
            asChild: true,
            disableOutsidePointerEvents,
            onInteractOutside,
            onEscapeKeyDown,
            onPointerDownOutside,
            onFocusOutside,
            onDismiss: () => context.onOpenChange(false),
            children: (0, import_jsx_runtime14.jsx)(
              Content,
              {
                "data-state": getState4(context.open),
                role: "dialog",
                id: context.contentId,
                ...popperScope,
                ...contentProps,
                ref: forwardedRef,
                style: {
                  ...contentProps.style,
                  // re-namespace exposed content custom properties
                  ...{
                    "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
                    "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
                    "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
                    "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
                    "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
                  }
                }
              }
            )
          }
        )
      }
    );
  }
);
var CLOSE_NAME = "PopoverClose";
var PopoverClose = React44.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...closeProps } = props;
    const context = usePopoverContext(CLOSE_NAME, __scopePopover);
    return (0, import_jsx_runtime14.jsx)(
      Primitive.button,
      {
        type: "button",
        ...closeProps,
        ref: forwardedRef,
        onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
      }
    );
  }
);
PopoverClose.displayName = CLOSE_NAME;
var ARROW_NAME5 = "PopoverArrow";
var PopoverArrow = React44.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopover, ...arrowProps } = props;
    const popperScope = usePopperScope4(__scopePopover);
    return (0, import_jsx_runtime14.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
PopoverArrow.displayName = ARROW_NAME5;
function getState4(open) {
  return open ? "open" : "closed";
}
var Root28 = Popover;
var Trigger7 = PopoverTrigger;
var Portal7 = PopoverPortal;
var Content29 = PopoverContent;
var Close2 = PopoverClose;

// node_modules/@radix-ui/themes/dist/esm/components/popover.props.js
var contentSizes4 = ["1", "2", "3", "4"];
var popoverContentPropDefs = {
  size: { type: "enum", values: contentSizes4, default: "2", responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/popover.js
var PopoverRoot = (props) => React45.createElement(Root28, { ...props });
PopoverRoot.displayName = "PopoverRoot";
var PopoverTrigger2 = React45.forwardRef((props, forwardedRef) => React45.createElement(Trigger7, { ...props, ref: forwardedRef, asChild: true }));
PopoverTrigger2.displayName = "PopoverTrigger";
var PopoverContent2 = React45.forwardRef((props, forwardedRef) => {
  const { className, forceMount, container, size = popoverContentPropDefs.size.default, ...contentProps } = props;
  return React45.createElement(
    Portal7,
    { container, forceMount },
    React45.createElement(
      Theme,
      { asChild: true },
      React45.createElement(Content29, { align: "start", sideOffset: 8, collisionPadding: 10, ...contentProps, ref: forwardedRef, className: (0, import_classnames28.default)("rt-PopperContent", "rt-PopoverContent", className, withBreakpoints(size, "rt-r-size")) })
    )
  );
});
PopoverContent2.displayName = "PopoverContent";
var PopoverClose2 = React45.forwardRef((props, forwardedRef) => React45.createElement(Close2, { ...props, ref: forwardedRef, asChild: true }));
PopoverClose2.displayName = "PopoverClose";
var Popover2 = Object.assign({}, {
  Root: PopoverRoot,
  Content: PopoverContent2,
  Trigger: PopoverTrigger2,
  Close: PopoverClose2
});

// node_modules/@radix-ui/themes/dist/esm/components/tooltip.js
var React46 = __toESM(require_react());
var import_classnames29 = __toESM(require_classnames());
var Tooltip2 = React46.forwardRef((props, forwardedRef) => {
  const { children, className, open, defaultOpen, onOpenChange, delayDuration, disableHoverableContent, content, container, forceMount, ...tooltipContentProps } = props;
  const rootProps = { open, defaultOpen, onOpenChange, delayDuration, disableHoverableContent };
  return React46.createElement(
    Root33,
    { ...rootProps },
    React46.createElement(Trigger3, { asChild: true }, children),
    React46.createElement(
      Portal4,
      { container, forceMount },
      React46.createElement(
        Theme,
        { asChild: true },
        React46.createElement(
          Content24,
          { sideOffset: 4, collisionPadding: 10, ...tooltipContentProps, ref: forwardedRef, className: (0, import_classnames29.default)("rt-TooltipContent", className) },
          React46.createElement(Text, { as: "p", className: "rt-TooltipText", size: "1" }, content),
          React46.createElement(Arrow22, { className: "rt-TooltipArrow" })
        )
      )
    )
  );
});
Tooltip2.displayName = "Tooltip";

// node_modules/@radix-ui/themes/dist/esm/components/tooltip.props.js
var tooltipPropDefs = {
  content: { type: "ReactNode", default: void 0, required: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/avatar.js
var React48 = __toESM(require_react());
var import_classnames30 = __toESM(require_classnames());

// node_modules/@radix-ui/react-avatar/dist/index.mjs
var React47 = __toESM(require_react(), 1);
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var AVATAR_NAME = "Avatar";
var [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);
var [AvatarProvider, useAvatarContext] = createAvatarContext(AVATAR_NAME);
var Avatar = React47.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAvatar, ...avatarProps } = props;
    const [imageLoadingStatus, setImageLoadingStatus] = React47.useState("idle");
    return (0, import_jsx_runtime15.jsx)(
      AvatarProvider,
      {
        scope: __scopeAvatar,
        imageLoadingStatus,
        onImageLoadingStatusChange: setImageLoadingStatus,
        children: (0, import_jsx_runtime15.jsx)(Primitive.span, { ...avatarProps, ref: forwardedRef })
      }
    );
  }
);
Avatar.displayName = AVATAR_NAME;
var IMAGE_NAME = "AvatarImage";
var AvatarImage = React47.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAvatar, src, onLoadingStatusChange = () => {
    }, ...imageProps } = props;
    const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);
    const imageLoadingStatus = useImageLoadingStatus(src);
    const handleLoadingStatusChange = useCallbackRef((status) => {
      onLoadingStatusChange(status);
      context.onImageLoadingStatusChange(status);
    });
    useLayoutEffect2(() => {
      if (imageLoadingStatus !== "idle") {
        handleLoadingStatusChange(imageLoadingStatus);
      }
    }, [imageLoadingStatus, handleLoadingStatusChange]);
    return imageLoadingStatus === "loaded" ? (0, import_jsx_runtime15.jsx)(Primitive.img, { ...imageProps, ref: forwardedRef, src }) : null;
  }
);
AvatarImage.displayName = IMAGE_NAME;
var FALLBACK_NAME = "AvatarFallback";
var AvatarFallback = React47.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAvatar, delayMs, ...fallbackProps } = props;
    const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);
    const [canRender, setCanRender] = React47.useState(delayMs === void 0);
    React47.useEffect(() => {
      if (delayMs !== void 0) {
        const timerId = window.setTimeout(() => setCanRender(true), delayMs);
        return () => window.clearTimeout(timerId);
      }
    }, [delayMs]);
    return canRender && context.imageLoadingStatus !== "loaded" ? (0, import_jsx_runtime15.jsx)(Primitive.span, { ...fallbackProps, ref: forwardedRef }) : null;
  }
);
AvatarFallback.displayName = FALLBACK_NAME;
function useImageLoadingStatus(src) {
  const [loadingStatus, setLoadingStatus] = React47.useState("idle");
  useLayoutEffect2(() => {
    if (!src) {
      setLoadingStatus("error");
      return;
    }
    let isMounted = true;
    const image = new window.Image();
    const updateStatus = (status) => () => {
      if (!isMounted)
        return;
      setLoadingStatus(status);
    };
    setLoadingStatus("loading");
    image.onload = updateStatus("loaded");
    image.onerror = updateStatus("error");
    image.src = src;
    return () => {
      isMounted = false;
    };
  }, [src]);
  return loadingStatus;
}
var Root9 = Avatar;
var Image = AvatarImage;
var Fallback = AvatarFallback;

// node_modules/@radix-ui/themes/dist/esm/components/avatar.props.js
var sizes15 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
var variants8 = ["solid", "soft"];
var avatarPropDefs = {
  size: { type: "enum", values: sizes15, default: "3", responsive: true },
  variant: { type: "enum", values: variants8, default: "soft" },
  color: { ...colorProp, default: void 0 },
  highContrast: highContrastProp,
  radius: radiusProp,
  fallback: { type: "ReactNode", default: void 0, required: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/avatar.js
var Avatar2 = React48.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, style, size = avatarPropDefs.size.default, variant = avatarPropDefs.variant.default, color = avatarPropDefs.color.default, highContrast = avatarPropDefs.highContrast.default, radius = avatarPropDefs.radius.default, fallback, ...imageProps } = marginRest;
  const [status, setStatus] = React48.useState("idle");
  return React48.createElement(
    Root9,
    { "data-accent-color": color, "data-radius": radius, className: (0, import_classnames30.default)("rt-AvatarRoot", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast }, withMarginProps(marginProps)), style },
    status === "idle" || status === "loading" ? React48.createElement("span", { className: "rt-AvatarFallback" }) : null,
    status === "error" ? React48.createElement(Fallback, { className: (0, import_classnames30.default)("rt-AvatarFallback", {
      "rt-one-letter": typeof fallback === "string" && fallback.length === 1,
      "rt-two-letters": typeof fallback === "string" && fallback.length === 2
    }), delayMs: 0 }, fallback) : null,
    React48.createElement(Image, { ref: forwardedRef, className: "rt-AvatarImage", ...imageProps, onLoadingStatusChange: (status2) => {
      var _a;
      (_a = imageProps.onLoadingStatusChange) === null || _a === void 0 ? void 0 : _a.call(imageProps, status2);
      setStatus(status2);
    } })
  );
});
Avatar2.displayName = "Avatar";

// node_modules/@radix-ui/themes/dist/esm/components/badge.js
var React49 = __toESM(require_react());
var import_classnames31 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/badge.props.js
var sizes16 = ["1", "2"];
var variants9 = ["solid", "soft", "surface", "outline"];
var badgePropDefs = {
  size: { type: "enum", values: sizes16, default: "1", responsive: true },
  variant: { type: "enum", values: variants9, default: "soft" },
  color: { ...colorProp, default: void 0 },
  highContrast: highContrastProp,
  radius: radiusProp
};

// node_modules/@radix-ui/themes/dist/esm/components/badge.js
var Badge = React49.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, size = badgePropDefs.size.default, variant = badgePropDefs.variant.default, color = badgePropDefs.color.default, highContrast = badgePropDefs.highContrast.default, radius = badgePropDefs.radius.default, ...badgeProps } = marginRest;
  return React49.createElement("span", { "data-accent-color": color, "data-radius": radius, ...badgeProps, ref: forwardedRef, className: (0, import_classnames31.default)("rt-Badge", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast }, withMarginProps(marginProps)) });
});
Badge.displayName = "Badge";

// node_modules/@radix-ui/themes/dist/esm/components/blockquote.js
var React50 = __toESM(require_react());
var import_classnames32 = __toESM(require_classnames());
var Blockquote = React50.forwardRef((props, forwardedRef) => {
  const { children, className, ...blockquoteProps } = props;
  return React50.createElement(
    Text,
    { asChild: true, ...blockquoteProps, ref: forwardedRef, className: (0, import_classnames32.default)("rt-Blockquote", className) },
    React50.createElement("blockquote", null, children)
  );
});
Blockquote.displayName = "Blockquote";

// node_modules/@radix-ui/themes/dist/esm/components/blockquote.props.js
var blockquotePropDefs = {
  size: textPropDefs.size,
  weight: textPropDefs.weight,
  color: textPropDefs.color,
  highContrast: textPropDefs.highContrast
};

// node_modules/@radix-ui/themes/dist/esm/components/button.js
var React52 = __toESM(require_react());
var import_classnames34 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/base-button.js
var React51 = __toESM(require_react());
var import_classnames33 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/base-button.props.js
var sizes17 = ["1", "2", "3", "4"];
var variants10 = ["classic", "solid", "soft", "surface", "outline", "ghost"];
var baseButtonPropDefs = {
  size: { type: "enum", values: sizes17, default: "2", responsive: true },
  variant: { type: "enum", values: variants10, default: "solid" },
  color: colorProp,
  highContrast: highContrastProp,
  radius: radiusProp
};

// node_modules/@radix-ui/themes/dist/esm/components/base-button.js
var BaseButton = React51.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, asChild = false, size = baseButtonPropDefs.size.default, variant = baseButtonPropDefs.variant.default, color = baseButtonPropDefs.color.default, highContrast = baseButtonPropDefs.highContrast.default, radius = baseButtonPropDefs.radius.default, ...baseButtonProps } = marginRest;
  const Comp = asChild ? Slot : "button";
  return React51.createElement(
    Comp,
    { "data-disabled": baseButtonProps.disabled || void 0, "data-accent-color": color, "data-radius": radius, ...baseButtonProps, ref: forwardedRef, className: (0, import_classnames33.default)("rt-reset", "rt-BaseButton", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast }, withMarginProps(marginProps)) }
  );
});
BaseButton.displayName = "BaseButton";

// node_modules/@radix-ui/themes/dist/esm/components/button.js
var Button = React52.forwardRef((props, forwardedRef) => React52.createElement(BaseButton, { ...props, ref: forwardedRef, className: (0, import_classnames34.default)("rt-Button", props.className) }));
Button.displayName = "Button";

// node_modules/@radix-ui/themes/dist/esm/components/callout.js
var React53 = __toESM(require_react());
var import_classnames35 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/callout.props.js
var sizes18 = ["1", "2", "3"];
var variants11 = ["soft", "surface", "outline"];
var calloutRootPropDefs = {
  size: { type: "enum", values: sizes18, default: "2", responsive: true },
  variant: { type: "enum", values: variants11, default: "soft" },
  color: { ...colorProp, default: void 0 },
  highContrast: highContrastProp
};

// node_modules/@radix-ui/themes/dist/esm/components/callout.js
var CalloutContext = React53.createContext({});
var CalloutRoot = React53.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { children, className, size = calloutRootPropDefs.size.default, variant = calloutRootPropDefs.variant.default, color = calloutRootPropDefs.color.default, highContrast = calloutRootPropDefs.highContrast.default, ...rootProps } = marginRest;
  return React53.createElement(
    "div",
    { "data-accent-color": color, ...rootProps, className: (0, import_classnames35.default)("rt-CalloutRoot", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, { "rt-high-contrast": highContrast }, withMarginProps(marginProps)), ref: forwardedRef },
    React53.createElement(CalloutContext.Provider, { value: React53.useMemo(() => ({ size, color, highContrast }), [size, color, highContrast]) }, children)
  );
});
CalloutRoot.displayName = "CalloutRoot";
var CalloutIcon = React53.forwardRef((props, forwardedRef) => {
  const { color, size, highContrast } = React53.useContext(CalloutContext);
  return React53.createElement(
    Text,
    { asChild: true, color, size: getTextSize(size), highContrast },
    React53.createElement("div", { ...props, className: (0, import_classnames35.default)("rt-CalloutIcon", props.className), ref: forwardedRef })
  );
});
CalloutIcon.displayName = "CalloutIcon";
var CalloutText = React53.forwardRef((props, forwardedRef) => {
  const { color, size, highContrast } = React53.useContext(CalloutContext);
  return React53.createElement(Text, { as: "p", size: getTextSize(size), color, highContrast, ...props, ref: forwardedRef, className: (0, import_classnames35.default)("rt-CalloutText", props.className) });
});
CalloutText.displayName = "CalloutText";
function getTextSize(size) {
  if (size === void 0)
    return void 0;
  if (typeof size === "string") {
    return getNonResponsiveTextSize(size);
  }
  return Object.fromEntries(Object.entries(size).map(([key, value]) => [key, getNonResponsiveTextSize(value)]));
}
function getNonResponsiveTextSize(size) {
  return size === "3" ? "3" : "2";
}
var Callout = Object.assign({}, {
  Root: CalloutRoot,
  Icon: CalloutIcon,
  Text: CalloutText
});

// node_modules/@radix-ui/themes/dist/esm/components/card.js
var React54 = __toESM(require_react());
var import_classnames36 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/card.props.js
var sizes19 = ["1", "2", "3", "4", "5"];
var variants12 = ["surface", "classic", "ghost"];
var cardPropDefs = {
  size: { type: "enum", values: sizes19, default: "1", responsive: true },
  variant: { type: "enum", values: variants12, default: "surface" }
};

// node_modules/@radix-ui/themes/dist/esm/components/card.js
var Card = React54.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { asChild, children, className, size = cardPropDefs.size.default, variant = cardPropDefs.variant.default, ...cardProps } = marginRest;
  const Comp = asChild ? Slot : "div";
  function getChild() {
    const firstChild = React54.Children.only(children);
    return React54.cloneElement(firstChild, {
      children: React54.createElement("div", { className: "rt-CardInner" }, firstChild.props.children)
    });
  }
  return React54.createElement(Comp, { ref: forwardedRef, ...cardProps, className: (0, import_classnames36.default)("rt-reset", "rt-Card", className, withBreakpoints(size, "rt-r-size"), `rt-variant-${variant}`, withMarginProps(marginProps)) }, asChild ? getChild() : React54.createElement("div", { className: "rt-CardInner" }, children));
});
Card.displayName = "Card";

// node_modules/@radix-ui/themes/dist/esm/components/icon-button.js
var React55 = __toESM(require_react());
var import_classnames37 = __toESM(require_classnames());
var IconButton = React55.forwardRef((props, forwardedRef) => React55.createElement(BaseButton, { ...props, ref: forwardedRef, className: (0, import_classnames37.default)("rt-IconButton", props.className) }));
IconButton.displayName = "IconButton";

// node_modules/@radix-ui/themes/dist/esm/components/link.js
var React56 = __toESM(require_react());
var import_classnames38 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/link.props.js
var underline = ["auto", "hover", "always"];
var linkPropDefs = {
  size: textPropDefs.size,
  weight: textPropDefs.weight,
  trim: textPropDefs.trim,
  underline: { type: "enum", values: underline, default: "auto" },
  color: textPropDefs.color,
  highContrast: textPropDefs.highContrast
};

// node_modules/@radix-ui/themes/dist/esm/components/link.js
var Link = React56.forwardRef((props, forwardedRef) => {
  const { children, className, asChild = false, underline: underline2 = linkPropDefs.underline.default, ...linkProps } = props;
  return React56.createElement(Text, { ...linkProps, ref: forwardedRef, asChild: true, className: (0, import_classnames38.default)("rt-reset", "rt-Link", className, `rt-underline-${underline2}`) }, asChild ? children : React56.createElement("a", null, children));
});
Link.displayName = "Link";

// node_modules/@radix-ui/themes/dist/esm/components/separator.js
var React58 = __toESM(require_react());
var import_classnames39 = __toESM(require_classnames());

// node_modules/@radix-ui/react-separator/dist/index.mjs
var React57 = __toESM(require_react(), 1);
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var NAME3 = "Separator";
var DEFAULT_ORIENTATION = "horizontal";
var ORIENTATIONS = ["horizontal", "vertical"];
var Separator4 = React57.forwardRef((props, forwardedRef) => {
  const { decorative, orientation: orientationProp = DEFAULT_ORIENTATION, ...domProps } = props;
  const orientation = isValidOrientation(orientationProp) ? orientationProp : DEFAULT_ORIENTATION;
  const ariaOrientation = orientation === "vertical" ? orientation : void 0;
  const semanticProps = decorative ? { role: "none" } : { "aria-orientation": ariaOrientation, role: "separator" };
  return (0, import_jsx_runtime16.jsx)(
    Primitive.div,
    {
      "data-orientation": orientation,
      ...semanticProps,
      ...domProps,
      ref: forwardedRef
    }
  );
});
Separator4.displayName = NAME3;
function isValidOrientation(orientation) {
  return ORIENTATIONS.includes(orientation);
}
var Root10 = Separator4;

// node_modules/@radix-ui/themes/dist/esm/components/separator.props.js
var sizes20 = ["1", "2", "3", "4"];
var separatorPropDefs = {
  size: { type: "enum", values: sizes20, default: "1", responsive: true },
  color: { ...colorProp, default: "gray" }
};

// node_modules/@radix-ui/themes/dist/esm/components/separator.js
var Separator5 = React58.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, size = separatorPropDefs.size.default, color = separatorPropDefs.color.default, ...separatorProps } = marginRest;
  return React58.createElement(Root10, { "data-accent-color": color, ...separatorProps, ref: forwardedRef, className: (0, import_classnames39.default)("rt-Separator", className, withBreakpoints(size, "rt-r-size"), withMarginProps(marginProps)) });
});
Separator5.displayName = "Separator";

// node_modules/@radix-ui/themes/dist/esm/components/skeleton.js
var React59 = __toESM(require_react());
var import_classnames40 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/skeleton.props.js
var skeletonPropDefs = {
  loading: { type: "boolean", default: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/skeleton.js
var Skeleton = React59.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, children, loading = skeletonPropDefs.loading.default, ...skeletonProps } = marginRest;
  if (!loading)
    return React59.createElement(React59.Fragment, null, children);
  const Tag = React59.isValidElement(children) ? Slot : "span";
  return React59.createElement(Tag, { ref: forwardedRef, "aria-hidden": true, className: (0, import_classnames40.default)("rt-Skeleton", className, withMarginProps(marginProps)), "data-inline-skeleton": React59.isValidElement(children) ? void 0 : true, tabIndex: -1, ...{ inert: true ? "" : void 0 }, ...skeletonProps }, children);
});
Skeleton.displayName = "Skeleton";

// node_modules/@radix-ui/themes/dist/esm/components/table.js
var React60 = __toESM(require_react());
var import_classnames41 = __toESM(require_classnames());

// node_modules/@radix-ui/themes/dist/esm/components/table.props.js
var sizes21 = ["1", "2", "3"];
var variants13 = ["surface", "ghost"];
var tableRootPropDefs = {
  size: { type: "enum", values: sizes21, default: "2", responsive: true },
  variant: { type: "enum", values: variants13, default: "ghost" }
};
var rowAlign = ["start", "center", "end", "baseline"];
var tableRowPropDefs = {
  align: { type: "enum", values: rowAlign, default: void 0, responsive: true }
};
var cellJustify = ["start", "center", "end"];
var tableCellPropDefs = {
  justify: { type: "enum", values: cellJustify, default: void 0, responsive: true },
  width: { type: "string | number", default: void 0 }
};

// node_modules/@radix-ui/themes/dist/esm/components/table.js
var TableRoot = React60.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, children, size = tableRootPropDefs.size.default, variant = tableRootPropDefs.variant.default, ...rootProps } = marginRest;
  return React60.createElement(
    "div",
    { ref: forwardedRef, className: (0, import_classnames41.default)("rt-TableRoot", className, `rt-variant-${variant}`, withBreakpoints(size, "rt-r-size"), withMarginProps(marginProps)), ...rootProps },
    React60.createElement(
      ScrollArea2,
      null,
      React60.createElement("table", { className: "rt-TableRootTable" }, children)
    )
  );
});
TableRoot.displayName = "Table";
var TableHeader = React60.forwardRef((props, forwardedRef) => React60.createElement("thead", { ...props, ref: forwardedRef, className: (0, import_classnames41.default)("rt-TableHeader", props.className) }));
TableHeader.displayName = "TableHeader";
var TableBody = React60.forwardRef((props, forwardedRef) => React60.createElement("tbody", { ...props, ref: forwardedRef, className: (0, import_classnames41.default)("rt-TableBody", props.className) }));
TableBody.displayName = "TableBody";
var TableRow = React60.forwardRef((props, forwardedRef) => {
  const { className, align = tableRowPropDefs.align.default, ...rowProps } = props;
  return React60.createElement("tr", { ...rowProps, ref: forwardedRef, className: (0, import_classnames41.default)("rt-TableRow", className, withBreakpoints(align, "rt-r-va", {
    baseline: "baseline",
    start: "top",
    center: "middle",
    end: "bottom"
  })) });
});
TableRow.displayName = "TableRow";
var TableCellImpl = React60.forwardRef((props, forwardedRef) => {
  const { rest: paddingRest, ...paddingProps } = extractPaddingProps(props);
  const { tag: Tag = "td", className, style, justify = tableCellPropDefs.justify.default, width = tableCellPropDefs.width.default, ...cellProps } = paddingRest;
  return React60.createElement(Tag, { ...cellProps, ref: forwardedRef, className: (0, import_classnames41.default)("rt-TableCell", className, withPaddingProps(paddingProps), withBreakpoints(justify, "rt-r-ta", { start: "left", center: "center", end: "right" })), style: { width, ...style } });
});
TableCellImpl.displayName = "TableCellImpl";
var TableCell = React60.forwardRef((props, forwardedRef) => React60.createElement(TableCellImpl, { ...props, tag: "td", ref: forwardedRef }));
TableCell.displayName = "TableCell";
var TableColumnHeaderCell = React60.forwardRef((props, forwardedRef) => React60.createElement(TableCellImpl, { scope: "col", ...props, tag: "th", ref: forwardedRef, className: (0, import_classnames41.default)("rt-TableColumnHeaderCell", props.className) }));
TableColumnHeaderCell.displayName = "TableColumnHeaderCell";
var TableRowHeaderCell = React60.forwardRef((props, forwardedRef) => React60.createElement(TableCellImpl, { scope: "row", ...props, tag: "th", ref: forwardedRef, className: (0, import_classnames41.default)("rt-TableRowHeaderCell", props.className) }));
TableRowHeaderCell.displayName = "TableRowHeaderCell";
var Table = Object.assign({}, {
  Root: TableRoot,
  Header: TableHeader,
  Body: TableBody,
  Row: TableRow,
  Cell: TableCell,
  ColumnHeaderCell: TableColumnHeaderCell,
  RowHeaderCell: TableRowHeaderCell
});

// node_modules/@radix-ui/themes/dist/esm/components/tabs.js
var React62 = __toESM(require_react());
var import_classnames42 = __toESM(require_classnames());

// node_modules/@radix-ui/react-tabs/dist/index.mjs
var React61 = __toESM(require_react(), 1);
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var TABS_NAME = "Tabs";
var [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [
  createRovingFocusGroupScope
]);
var useRovingFocusGroupScope2 = createRovingFocusGroupScope();
var [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
var Tabs = React61.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeTabs,
      value: valueProp,
      onValueChange,
      defaultValue,
      orientation = "horizontal",
      dir,
      activationMode = "automatic",
      ...tabsProps
    } = props;
    const direction = useDirection(dir);
    const [value, setValue] = useControllableState({
      prop: valueProp,
      onChange: onValueChange,
      defaultProp: defaultValue
    });
    return (0, import_jsx_runtime17.jsx)(
      TabsProvider,
      {
        scope: __scopeTabs,
        baseId: useId(),
        value,
        onValueChange: setValue,
        orientation,
        dir: direction,
        activationMode,
        children: (0, import_jsx_runtime17.jsx)(
          Primitive.div,
          {
            dir: direction,
            "data-orientation": orientation,
            ...tabsProps,
            ref: forwardedRef
          }
        )
      }
    );
  }
);
Tabs.displayName = TABS_NAME;
var TAB_LIST_NAME = "TabsList";
var TabsList = React61.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, loop = true, ...listProps } = props;
    const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope2(__scopeTabs);
    return (0, import_jsx_runtime17.jsx)(
      Root,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        orientation: context.orientation,
        dir: context.dir,
        loop,
        children: (0, import_jsx_runtime17.jsx)(
          Primitive.div,
          {
            role: "tablist",
            "aria-orientation": context.orientation,
            ...listProps,
            ref: forwardedRef
          }
        )
      }
    );
  }
);
TabsList.displayName = TAB_LIST_NAME;
var TRIGGER_NAME7 = "TabsTrigger";
var TabsTrigger = React61.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, value, disabled = false, ...triggerProps } = props;
    const context = useTabsContext(TRIGGER_NAME7, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope2(__scopeTabs);
    const triggerId = makeTriggerId(context.baseId, value);
    const contentId = makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    return (0, import_jsx_runtime17.jsx)(
      Item,
      {
        asChild: true,
        ...rovingFocusGroupScope,
        focusable: !disabled,
        active: isSelected,
        children: (0, import_jsx_runtime17.jsx)(
          Primitive.button,
          {
            type: "button",
            role: "tab",
            "aria-selected": isSelected,
            "aria-controls": contentId,
            "data-state": isSelected ? "active" : "inactive",
            "data-disabled": disabled ? "" : void 0,
            disabled,
            id: triggerId,
            ...triggerProps,
            ref: forwardedRef,
            onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
              if (!disabled && event.button === 0 && event.ctrlKey === false) {
                context.onValueChange(value);
              } else {
                event.preventDefault();
              }
            }),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              if ([" ", "Enter"].includes(event.key))
                context.onValueChange(value);
            }),
            onFocus: composeEventHandlers(props.onFocus, () => {
              const isAutomaticActivation = context.activationMode !== "manual";
              if (!isSelected && !disabled && isAutomaticActivation) {
                context.onValueChange(value);
              }
            })
          }
        )
      }
    );
  }
);
TabsTrigger.displayName = TRIGGER_NAME7;
var CONTENT_NAME7 = "TabsContent";
var TabsContent = React61.forwardRef(
  (props, forwardedRef) => {
    const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
    const context = useTabsContext(CONTENT_NAME7, __scopeTabs);
    const triggerId = makeTriggerId(context.baseId, value);
    const contentId = makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    const isMountAnimationPreventedRef = React61.useRef(isSelected);
    React61.useEffect(() => {
      const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);
      return () => cancelAnimationFrame(rAF);
    }, []);
    return (0, import_jsx_runtime17.jsx)(Presence, { present: forceMount || isSelected, children: ({ present }) => (0, import_jsx_runtime17.jsx)(
      Primitive.div,
      {
        "data-state": isSelected ? "active" : "inactive",
        "data-orientation": context.orientation,
        role: "tabpanel",
        "aria-labelledby": triggerId,
        hidden: !present,
        id: contentId,
        tabIndex: 0,
        ...contentProps,
        ref: forwardedRef,
        style: {
          ...props.style,
          animationDuration: isMountAnimationPreventedRef.current ? "0s" : void 0
        },
        children: present && children
      }
    ) });
  }
);
TabsContent.displayName = CONTENT_NAME7;
function makeTriggerId(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function makeContentId(baseId, value) {
  return `${baseId}-content-${value}`;
}
var Root29 = Tabs;
var List = TabsList;
var Trigger8 = TabsTrigger;
var Content3 = TabsContent;

// node_modules/@radix-ui/themes/dist/esm/components/tabs.props.js
var sizes22 = ["1", "2"];
var tabsListPropDefs = {
  size: { type: "enum", values: sizes22, default: "2", responsive: true }
};

// node_modules/@radix-ui/themes/dist/esm/components/tabs.js
var TabsRoot = React62.forwardRef((props, forwardedRef) => {
  const { rest: marginRest, ...marginProps } = extractMarginProps(props);
  const { className, ...rootProps } = marginRest;
  return React62.createElement(Root29, { ...rootProps, ref: forwardedRef, className: (0, import_classnames42.default)("rt-TabsRoot", className, withMarginProps(marginProps)) });
});
TabsRoot.displayName = "TabsRoot";
var TabsList2 = React62.forwardRef((props, forwardedRef) => {
  const { className, size = tabsListPropDefs.size.default, ...listProps } = props;
  return React62.createElement(List, { ...listProps, ref: forwardedRef, className: (0, import_classnames42.default)("rt-TabsList", className, withBreakpoints(size, "rt-r-size")) });
});
TabsList2.displayName = "TabsList";
var TabsTrigger2 = React62.forwardRef((props, forwardedRef) => {
  const { className, children, ...triggerProps } = props;
  return React62.createElement(
    Trigger8,
    { ...triggerProps, ref: forwardedRef, className: (0, import_classnames42.default)("rt-reset", "rt-TabsTrigger", className) },
    React62.createElement("span", { className: "rt-TabsTriggerInner" }, children),
    React62.createElement("span", { className: "rt-TabsTriggerInnerHidden" }, children)
  );
});
TabsTrigger2.displayName = "TabsTrigger";
var TabsContent2 = React62.forwardRef((props, forwardedRef) => React62.createElement(Content3, { ...props, ref: forwardedRef, className: (0, import_classnames42.default)("rt-TabsContent", props.className) }));
TabsContent2.displayName = "TabsContent";
var Tabs2 = Object.assign({}, {
  Root: TabsRoot,
  List: TabsList2,
  Trigger: TabsTrigger2,
  Content: TabsContent2
});

// node_modules/@radix-ui/react-accessible-icon/dist/index.mjs
var React63 = __toESM(require_react(), 1);
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var NAME4 = "AccessibleIcon";
var AccessibleIcon = ({ children, label }) => {
  const child = React63.Children.only(children);
  return (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
    React63.cloneElement(child, {
      // accessibility
      "aria-hidden": "true",
      focusable: "false"
      // See: https://allyjs.io/tutorials/focusing-in-svg.html#making-svg-elements-focusable
    }),
    (0, import_jsx_runtime18.jsx)(Root4, { children: label })
  ] });
};
AccessibleIcon.displayName = NAME4;

// node_modules/@radix-ui/themes/dist/esm/theme-panel.js
var React64 = __toESM(require_react());
var ThemePanel = React64.forwardRef(({ defaultOpen = true, ...props }, forwardedRef) => {
  const [open, setOpen] = React64.useState(defaultOpen);
  return React64.createElement(ThemePanelImpl, { ...props, ref: forwardedRef, open, onOpenChange: setOpen });
});
ThemePanel.displayName = "ThemePanel";
var ThemePanelImpl = React64.forwardRef((props, forwardedRef) => {
  const { open, onOpenChange, onAppearanceChange: onAppearanceChangeProp, ...panelProps } = props;
  const themeContext = useThemeContext();
  const { appearance, onAppearanceChange, accentColor, onAccentColorChange, grayColor, onGrayColorChange, panelBackground, onPanelBackgroundChange, radius, onRadiusChange, scaling, onScalingChange } = themeContext;
  const hasOnAppearanceChangeProp = onAppearanceChangeProp !== void 0;
  const handleAppearanceChangeProp = useCallbackRef(onAppearanceChangeProp);
  const handleAppearanceChange = React64.useCallback((appearance2) => {
    onAppearanceChange(appearance2);
    const cleanup = disableAnimation();
    if (hasOnAppearanceChangeProp) {
      handleAppearanceChangeProp(appearance2);
    } else {
      updateThemeAppearanceClass(appearance2);
    }
    cleanup();
  }, [onAppearanceChange, hasOnAppearanceChangeProp, handleAppearanceChangeProp]);
  const autoMatchedGray = getMatchingGrayColor(accentColor);
  const resolvedGrayColor = grayColor === "auto" ? autoMatchedGray : grayColor;
  const [copyState, setCopyState] = React64.useState("idle");
  async function handleCopyThemeConfig() {
    const theme = {
      appearance: appearance === themePropDefs.appearance.default ? void 0 : appearance,
      accentColor: accentColor === themePropDefs.accentColor.default ? void 0 : accentColor,
      grayColor: grayColor === themePropDefs.grayColor.default ? void 0 : grayColor,
      panelBackground: panelBackground === themePropDefs.panelBackground.default ? void 0 : panelBackground,
      radius: radius === themePropDefs.radius.default ? void 0 : radius,
      scaling: scaling === themePropDefs.scaling.default ? void 0 : scaling
    };
    const props2 = Object.keys(theme).filter((key) => theme[key] !== void 0).map((key) => `${key}="${theme[key]}"`).join(" ");
    const textToCopy = props2 ? `<Theme ${props2}>` : "<Theme>";
    setCopyState("copying");
    await navigator.clipboard.writeText(textToCopy);
    setCopyState("copied");
    setTimeout(() => setCopyState("idle"), 2e3);
  }
  React64.useEffect(() => {
    function handleKeydown(event) {
      var _a;
      const isCmdC = event.metaKey && event.key === "c" && !event.shiftKey && !event.altKey && !event.ctrlKey;
      if (isCmdC && ((_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.toString()) === "") {
        onOpenChange(!open);
      }
    }
    document.addEventListener("keydown", handleKeydown);
    return () => document.removeEventListener("keydown", handleKeydown);
  }, [onOpenChange, open]);
  React64.useEffect(() => {
    function handleKeydown(event) {
      if (event.metaKey && event.key === "d") {
        event.preventDefault();
        handleAppearanceChange(appearance === "dark" ? "light" : "dark");
      }
    }
    document.addEventListener("keydown", handleKeydown);
    return () => document.removeEventListener("keydown", handleKeydown);
  }, [appearance, handleAppearanceChange]);
  const [resolvedAppearance, setResolvedAppearance] = React64.useState(appearance === "inherit" ? null : appearance);
  React64.useEffect(() => {
    const root = document.documentElement;
    const body = document.body;
    function update() {
      const hasDarkClass = root.classList.contains("dark") || root.classList.contains("dark-theme") || body.classList.contains("dark") || body.classList.contains("dark-theme");
      const nextAppearance = hasDarkClass ? "dark" : "light";
      if (nextAppearance !== appearance && appearance !== "inherit") {
        handleAppearanceChange(nextAppearance);
      }
      setResolvedAppearance(hasDarkClass ? "dark" : "light");
    }
    update();
    var observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.attributeName === "class")
          update();
      });
    });
    observer.observe(root, { attributes: true });
    observer.observe(body, { attributes: true });
    return () => observer.disconnect();
  }, [appearance, handleAppearanceChange]);
  return React64.createElement(
    Theme,
    { asChild: true, radius: "medium", scaling: "100%" },
    React64.createElement(
      Flex,
      {
        direction: "column",
        position: "fixed",
        top: "0",
        right: "0",
        mr: "4",
        mt: "4",
        // @ts-ignore
        inert: open ? void 0 : "",
        ...panelProps,
        ref: forwardedRef,
        style: {
          zIndex: 9999,
          overflow: "hidden",
          maxHeight: "calc(100vh - var(--space-4) - var(--space-4))",
          borderRadius: "var(--radius-4)",
          backgroundColor: "var(--color-panel-solid)",
          transformOrigin: "top center",
          transitionProperty: "transform, box-shadow",
          transitionDuration: "200ms",
          transitionTimingFunction: open ? "ease-out" : "ease-in",
          transform: open ? "none" : "translateX(105%)",
          boxShadow: open ? "var(--shadow-5)" : "var(--shadow-2)",
          ...props.style
        }
      },
      React64.createElement(
        ScrollArea2,
        null,
        React64.createElement(
          Box,
          { grow: "1", p: "5", position: "relative" },
          React64.createElement(
            Box,
            { position: "absolute", top: "0", right: "0", m: "2" },
            React64.createElement(
              Tooltip2,
              { content: "Press ⌘ C to show/hide the Theme Panel", side: "bottom", sideOffset: 6 },
              React64.createElement(Kbd, { size: "3", tabIndex: 0, className: "rt-ThemePanelShortcut" }, "⌘ C")
            )
          ),
          React64.createElement(Heading, { size: "5", trim: "both", as: "h3", mb: "5" }, "Theme"),
          React64.createElement(Text, { id: "accent-color-title", as: "p", size: "2", weight: "medium", mt: "5" }, "Accent color"),
          React64.createElement(Grid, { columns: "10", gap: "2", mt: "3", role: "group", "aria-labelledby": "accent-color-title" }, themeAccentColorsOrdered.map((color) => React64.createElement(
            "label",
            { key: color, className: "rt-ThemePanelSwatch", style: { backgroundColor: `var(--${color}-9)` } },
            React64.createElement(
              Tooltip2,
              { content: `${upperFirst(color)}${accentColor === "gray" && resolvedGrayColor !== "gray" ? ` (${upperFirst(resolvedGrayColor)})` : ""}` },
              React64.createElement("input", { className: "rt-ThemePanelSwatchInput", type: "radio", name: "accentColor", value: color, checked: accentColor === color, onChange: (event) => onAccentColorChange(event.target.value) })
            )
          ))),
          React64.createElement(
            Flex,
            { asChild: true, align: "center", justify: "between" },
            React64.createElement(Text, { as: "p", id: "gray-color-title", size: "2", weight: "medium", mt: "5" }, "Gray color")
          ),
          React64.createElement(Grid, { columns: "10", gap: "2", mt: "3", role: "group", "aria-labelledby": "gray-color-title" }, ["auto", "gray", ...radixGrayScalesDesaturated].map((gray) => React64.createElement(
            Flex,
            { key: gray, asChild: true, align: "center", justify: "center" },
            React64.createElement(
              "label",
              { className: "rt-ThemePanelSwatch", style: {
                backgroundColor: gray === "auto" ? `var(--${autoMatchedGray}-9)` : gray === "gray" ? "var(--gray-9)" : `var(--${gray}-9)`,
                // we override --gray so pure gray doesn't exist anymore
                // recover something as close as possible by desaturating
                filter: gray === "gray" ? "saturate(0)" : void 0
              } },
              React64.createElement(
                Tooltip2,
                { content: `${upperFirst(gray)}${gray === "auto" ? ` (${upperFirst(autoMatchedGray)})` : ""}` },
                React64.createElement("input", { className: "rt-ThemePanelSwatchInput", type: "radio", name: "grayColor", value: gray, checked: grayColor === gray, onChange: (event) => onGrayColorChange(event.target.value) })
              )
            )
          ))),
          React64.createElement(Text, { id: "appearance-title", as: "p", size: "2", weight: "medium", mt: "5" }, "Appearance"),
          React64.createElement(Grid, { columns: "2", gap: "2", mt: "3", role: "group", "aria-labelledby": "appearance-title" }, ["light", "dark"].map((value) => React64.createElement(
            "label",
            { key: value, className: "rt-ThemePanelRadioCard" },
            React64.createElement("input", {
              className: "rt-ThemePanelRadioCardInput",
              type: "radio",
              name: "appearance",
              value,
              checked: resolvedAppearance === value,
              // TODO: Currently using `onClick` as a stop-gap solution for `onChange` not working after a few changes
              onChange: (event) => {
              },
              onClick: () => handleAppearanceChange(value)
            }),
            React64.createElement(
              Flex,
              { align: "center", justify: "center", height: "6", gap: "2" },
              value === "light" ? React64.createElement(
                "svg",
                { width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: "0 -1px" } },
                React64.createElement("path", { d: "M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })
              ) : React64.createElement(
                "svg",
                { width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: "0 -1px" } },
                React64.createElement("path", { d: "M2.89998 0.499976C2.89998 0.279062 2.72089 0.0999756 2.49998 0.0999756C2.27906 0.0999756 2.09998 0.279062 2.09998 0.499976V1.09998H1.49998C1.27906 1.09998 1.09998 1.27906 1.09998 1.49998C1.09998 1.72089 1.27906 1.89998 1.49998 1.89998H2.09998V2.49998C2.09998 2.72089 2.27906 2.89998 2.49998 2.89998C2.72089 2.89998 2.89998 2.72089 2.89998 2.49998V1.89998H3.49998C3.72089 1.89998 3.89998 1.72089 3.89998 1.49998C3.89998 1.27906 3.72089 1.09998 3.49998 1.09998H2.89998V0.499976ZM5.89998 3.49998C5.89998 3.27906 5.72089 3.09998 5.49998 3.09998C5.27906 3.09998 5.09998 3.27906 5.09998 3.49998V4.09998H4.49998C4.27906 4.09998 4.09998 4.27906 4.09998 4.49998C4.09998 4.72089 4.27906 4.89998 4.49998 4.89998H5.09998V5.49998C5.09998 5.72089 5.27906 5.89998 5.49998 5.89998C5.72089 5.89998 5.89998 5.72089 5.89998 5.49998V4.89998H6.49998C6.72089 4.89998 6.89998 4.72089 6.89998 4.49998C6.89998 4.27906 6.72089 4.09998 6.49998 4.09998H5.89998V3.49998ZM1.89998 6.49998C1.89998 6.27906 1.72089 6.09998 1.49998 6.09998C1.27906 6.09998 1.09998 6.27906 1.09998 6.49998V7.09998H0.499976C0.279062 7.09998 0.0999756 7.27906 0.0999756 7.49998C0.0999756 7.72089 0.279062 7.89998 0.499976 7.89998H1.09998V8.49998C1.09998 8.72089 1.27906 8.89997 1.49998 8.89997C1.72089 8.89997 1.89998 8.72089 1.89998 8.49998V7.89998H2.49998C2.72089 7.89998 2.89998 7.72089 2.89998 7.49998C2.89998 7.27906 2.72089 7.09998 2.49998 7.09998H1.89998V6.49998ZM8.54406 0.98184L8.24618 0.941586C8.03275 0.917676 7.90692 1.1655 8.02936 1.34194C8.17013 1.54479 8.29981 1.75592 8.41754 1.97445C8.91878 2.90485 9.20322 3.96932 9.20322 5.10022C9.20322 8.37201 6.82247 11.0878 3.69887 11.6097C3.45736 11.65 3.20988 11.6772 2.96008 11.6906C2.74563 11.702 2.62729 11.9535 2.77721 12.1072C2.84551 12.1773 2.91535 12.2458 2.98667 12.3128L3.05883 12.3795L3.31883 12.6045L3.50684 12.7532L3.62796 12.8433L3.81491 12.9742L3.99079 13.089C4.11175 13.1651 4.23536 13.2375 4.36157 13.3059L4.62496 13.4412L4.88553 13.5607L5.18837 13.6828L5.43169 13.7686C5.56564 13.8128 5.70149 13.8529 5.83857 13.8885C5.94262 13.9155 6.04767 13.9401 6.15405 13.9622C6.27993 13.9883 6.40713 14.0109 6.53544 14.0298L6.85241 14.0685L7.11934 14.0892C7.24637 14.0965 7.37436 14.1002 7.50322 14.1002C11.1483 14.1002 14.1032 11.1453 14.1032 7.50023C14.1032 7.25044 14.0893 7.00389 14.0623 6.76131L14.0255 6.48407C13.991 6.26083 13.9453 6.04129 13.8891 5.82642C13.8213 5.56709 13.7382 5.31398 13.6409 5.06881L13.5279 4.80132L13.4507 4.63542L13.3766 4.48666C13.2178 4.17773 13.0353 3.88295 12.8312 3.60423L12.6782 3.40352L12.4793 3.16432L12.3157 2.98361L12.1961 2.85951L12.0355 2.70246L11.8134 2.50184L11.4925 2.24191L11.2483 2.06498L10.9562 1.87446L10.6346 1.68894L10.3073 1.52378L10.1938 1.47176L9.95488 1.3706L9.67791 1.2669L9.42566 1.1846L9.10075 1.09489L8.83599 1.03486L8.54406 0.98184ZM10.4032 5.30023C10.4032 4.27588 10.2002 3.29829 9.83244 2.40604C11.7623 3.28995 13.1032 5.23862 13.1032 7.50023C13.1032 10.593 10.596 13.1002 7.50322 13.1002C6.63646 13.1002 5.81597 12.9036 5.08355 12.5522C6.5419 12.0941 7.81081 11.2082 8.74322 10.0416C8.87963 10.2284 9.10028 10.3497 9.34928 10.3497C9.76349 10.3497 10.0993 10.0139 10.0993 9.59971C10.0993 9.24256 9.84965 8.94373 9.51535 8.86816C9.57741 8.75165 9.63653 8.63334 9.6926 8.51332C9.88358 8.63163 10.1088 8.69993 10.35 8.69993C11.0403 8.69993 11.6 8.14028 11.6 7.44993C11.6 6.75976 11.0406 6.20024 10.3505 6.19993C10.3853 5.90487 10.4032 5.60464 10.4032 5.30023Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })
              ),
              React64.createElement(Text, { size: "1", weight: "medium" }, upperFirst(value))
            )
          ))),
          React64.createElement(Text, { id: "radius-title", as: "p", size: "2", weight: "medium", mt: "5" }, "Radius"),
          React64.createElement(Grid, { columns: "5", gap: "2", mt: "3", role: "group", "aria-labelledby": "radius-title" }, themePropDefs.radius.values.map((value) => React64.createElement(
            Flex,
            { key: value, direction: "column", align: "center" },
            React64.createElement(
              "label",
              { className: "rt-ThemePanelRadioCard" },
              React64.createElement("input", { className: "rt-ThemePanelRadioCardInput", type: "radio", name: "radius", id: `theme-panel-radius-${value}`, value, checked: radius === value, onChange: (event) => onRadiusChange(event.target.value) }),
              React64.createElement(
                Theme,
                { asChild: true, radius: value },
                React64.createElement(Box, { m: "3", width: "6", height: "6", style: {
                  borderTopLeftRadius: value === "full" ? "80%" : "var(--radius-5)",
                  backgroundImage: "linear-gradient(to bottom right, var(--accent-3), var(--accent-4))",
                  borderTop: "2px solid var(--accent-a8)",
                  borderLeft: "2px solid var(--accent-a8)"
                } })
              )
            ),
            React64.createElement(
              Box,
              { asChild: true, pt: "2" },
              React64.createElement(
                Text,
                { asChild: true, size: "1", color: "gray" },
                React64.createElement("label", { htmlFor: `theme-panel-radius-${value}` }, upperFirst(value))
              )
            )
          ))),
          React64.createElement(Text, { id: "scaling-title", as: "p", size: "2", weight: "medium", mt: "5" }, "Scaling"),
          React64.createElement(Grid, { columns: "5", gap: "2", mt: "3", role: "group", "aria-labelledby": "scaling-title" }, themePropDefs.scaling.values.map((value) => React64.createElement(
            "label",
            { key: value, className: "rt-ThemePanelRadioCard" },
            React64.createElement("input", { className: "rt-ThemePanelRadioCardInput", type: "radio", name: "scaling", value, checked: scaling === value, onChange: (event) => onScalingChange(event.target.value) }),
            React64.createElement(
              Flex,
              { align: "center", justify: "center", height: "6" },
              React64.createElement(
                Theme,
                { asChild: true, scaling: value },
                React64.createElement(
                  Flex,
                  { align: "center", justify: "center" },
                  React64.createElement(Text, { size: "1", weight: "medium" }, upperFirst(value))
                )
              )
            )
          ))),
          React64.createElement(
            Flex,
            { mt: "5", align: "center", gap: "2" },
            React64.createElement(Text, { id: "panel-background-title", as: "p", size: "2", weight: "medium" }, "Panel background"),
            React64.createElement(
              Popover2.Root,
              null,
              React64.createElement(
                Popover2.Trigger,
                null,
                React64.createElement(
                  IconButton,
                  { size: "1", variant: "ghost", color: "gray" },
                  React64.createElement(
                    AccessibleIcon,
                    { label: "Learn more about panel background options" },
                    React64.createElement(InfoCircledIcon, null)
                  )
                )
              ),
              React64.createElement(
                Popover2.Content,
                { size: "1", style: { maxWidth: 220 }, side: "top", align: "center" },
                React64.createElement(Text, { as: "p", size: "2" }, "Whether Card and Table panels are translucent, showing some of the background behind them.")
              )
            )
          ),
          React64.createElement(Grid, { columns: "2", gap: "2", mt: "3", role: "group", "aria-labelledby": "panel-background-title" }, themePropDefs.panelBackground.values.map((value) => React64.createElement(
            "label",
            { key: value, className: "rt-ThemePanelRadioCard" },
            React64.createElement("input", { className: "rt-ThemePanelRadioCardInput", type: "radio", name: "panelBackground", value, checked: panelBackground === value, onChange: (event) => onPanelBackgroundChange(event.target.value) }),
            React64.createElement(
              Flex,
              { align: "center", justify: "center", height: "6", gap: "2" },
              value === "solid" ? React64.createElement(
                "svg",
                { width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: "0 -2px" } },
                React64.createElement("path", { d: "M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })
              ) : React64.createElement(
                "svg",
                { width: "15", height: "15", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: "0 -2px" } },
                React64.createElement("path", { opacity: ".05", d: "M6.78296 13.376C8.73904 9.95284 8.73904 5.04719 6.78296 1.62405L7.21708 1.37598C9.261 4.95283 9.261 10.0472 7.21708 13.624L6.78296 13.376Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }),
                React64.createElement("path", { opacity: ".1", d: "M7.28204 13.4775C9.23929 9.99523 9.23929 5.00475 7.28204 1.52248L7.71791 1.2775C9.76067 4.9119 9.76067 10.0881 7.71791 13.7225L7.28204 13.4775Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }),
                React64.createElement("path", { opacity: ".15", d: "M7.82098 13.5064C9.72502 9.99523 9.72636 5.01411 7.82492 1.50084L8.26465 1.26285C10.2465 4.92466 10.2451 10.085 8.26052 13.7448L7.82098 13.5064Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }),
                React64.createElement("path", { opacity: ".2", d: "M8.41284 13.429C10.1952 9.92842 10.1957 5.07537 8.41435 1.57402L8.85999 1.34729C10.7139 4.99113 10.7133 10.0128 8.85841 13.6559L8.41284 13.429Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }),
                React64.createElement("path", { opacity: ".25", d: "M9.02441 13.2956C10.6567 9.8379 10.6586 5.17715 9.03005 1.71656L9.48245 1.50366C11.1745 5.09919 11.1726 9.91629 9.47657 13.5091L9.02441 13.2956Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }),
                React64.createElement("path", { opacity: ".3", d: "M9.66809 13.0655C11.1097 9.69572 11.1107 5.3121 9.67088 1.94095L10.1307 1.74457C11.6241 5.24121 11.6231 9.76683 10.1278 13.2622L9.66809 13.0655Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }),
                React64.createElement("path", { opacity: ".35", d: "M10.331 12.7456C11.5551 9.52073 11.5564 5.49103 10.3347 2.26444L10.8024 2.0874C12.0672 5.42815 12.0659 9.58394 10.7985 12.9231L10.331 12.7456Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }),
                React64.createElement("path", { opacity: ".4", d: "M11.0155 12.2986C11.9938 9.29744 11.9948 5.71296 11.0184 2.71067L11.4939 2.55603C12.503 5.6589 12.502 9.35178 11.4909 12.4535L11.0155 12.2986Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }),
                React64.createElement("path", { opacity: ".45", d: "M11.7214 11.668C12.4254 9.01303 12.4262 5.99691 11.7237 3.34116L12.2071 3.21329C12.9318 5.95292 12.931 9.05728 12.2047 11.7961L11.7214 11.668Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }),
                React64.createElement("path", { opacity: ".5", d: "M12.4432 10.752C12.8524 8.63762 12.8523 6.36089 12.4429 4.2466L12.9338 4.15155C13.3553 6.32861 13.3554 8.66985 12.9341 10.847L12.4432 10.752Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" }),
                React64.createElement("path", { d: "M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })
              ),
              React64.createElement(Text, { size: "1", weight: "medium" }, upperFirst(value))
            )
          ))),
          React64.createElement(Button, { mt: "5", style: { width: "100%" }, onClick: handleCopyThemeConfig }, copyState === "copied" ? "Copied" : "Copy Theme")
        )
      )
    )
  );
});
ThemePanelImpl.displayName = "ThemePanelImpl";
function disableAnimation() {
  const css = document.createElement("style");
  css.appendChild(document.createTextNode(`*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`));
  document.head.appendChild(css);
  return () => {
    (() => window.getComputedStyle(document.body))();
    setTimeout(() => {
      document.head.removeChild(css);
    }, 1);
  };
}
function upperFirst(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
export {
  AccessibleIcon,
  AlertDialog2 as AlertDialog,
  AlertDialogAction2 as AlertDialogAction,
  AlertDialogCancel2 as AlertDialogCancel,
  AlertDialogContent2 as AlertDialogContent,
  AlertDialogDescription2 as AlertDialogDescription,
  AlertDialogRoot,
  AlertDialogTitle2 as AlertDialogTitle,
  AlertDialogTrigger2 as AlertDialogTrigger,
  AspectRatio,
  Avatar2 as Avatar,
  Badge,
  Blockquote,
  Box,
  Button,
  Callout,
  CalloutIcon,
  CalloutRoot,
  CalloutText,
  Card,
  Checkbox2 as Checkbox,
  Code,
  Container,
  ContextMenu2 as ContextMenu,
  ContextMenuCheckboxItem2 as ContextMenuCheckboxItem,
  ContextMenuContent2 as ContextMenuContent,
  ContextMenuGroup2 as ContextMenuGroup,
  ContextMenuItem2 as ContextMenuItem,
  ContextMenuLabel2 as ContextMenuLabel,
  ContextMenuRadioGroup2 as ContextMenuRadioGroup,
  ContextMenuRadioItem2 as ContextMenuRadioItem,
  ContextMenuRoot,
  ContextMenuSeparator2 as ContextMenuSeparator,
  ContextMenuSub2 as ContextMenuSub,
  ContextMenuSubContent2 as ContextMenuSubContent,
  ContextMenuSubTrigger2 as ContextMenuSubTrigger,
  ContextMenuTrigger2 as ContextMenuTrigger,
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogRoot,
  DialogTitle,
  DialogTrigger,
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuRoot,
  DropdownMenuSeparator,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
  Em,
  Flex,
  Grid,
  Heading,
  HoverCard2 as HoverCard,
  HoverCardContent2 as HoverCardContent,
  HoverCardRoot,
  HoverCardTrigger2 as HoverCardTrigger,
  IconButton,
  Inset,
  Kbd,
  Link,
  Popover2 as Popover,
  PopoverClose2 as PopoverClose,
  PopoverContent2 as PopoverContent,
  PopoverRoot,
  PopoverTrigger2 as PopoverTrigger,
  Portal,
  Quote,
  RadioGroup4 as RadioGroup,
  RadioGroupItem2 as RadioGroupItem,
  RadioGroupRoot,
  ScrollArea2 as ScrollArea,
  Section,
  Select2 as Select,
  SelectContent2 as SelectContent,
  SelectGroup2 as SelectGroup,
  SelectItem2 as SelectItem,
  SelectLabel2 as SelectLabel,
  SelectRoot,
  SelectSeparator2 as SelectSeparator,
  SelectTrigger2 as SelectTrigger,
  Separator5 as Separator,
  Skeleton,
  Slider2 as Slider,
  Slot,
  Slottable,
  Strong,
  Switch2 as Switch,
  Table,
  TableBody,
  TableCell,
  TableColumnHeaderCell,
  TableHeader,
  TableRoot,
  TableRow,
  TableRowHeaderCell,
  Tabs2 as Tabs,
  TabsContent2 as TabsContent,
  TabsList2 as TabsList,
  TabsRoot,
  TabsTrigger2 as TabsTrigger,
  Text,
  TextArea,
  TextField,
  TextFieldInput,
  TextFieldRoot,
  TextFieldSlot,
  Theme,
  ThemePanel,
  Tooltip2 as Tooltip,
  VisuallyHidden,
  dialogContentPropDefs as alertDialogContentPropDefs,
  alignProp,
  avatarPropDefs,
  badgePropDefs,
  blockquotePropDefs,
  boxPropDefs,
  baseButtonPropDefs as buttonPropDefs,
  calloutRootPropDefs,
  cardPropDefs,
  checkboxPropDefs,
  codePropDefs,
  colorProp,
  containerPropDefs,
  baseMenuCheckboxItemPropDefs as contextMenuCheckboxItemPropDefs,
  baseMenuContentPropDefs as contextMenuContentPropDefs,
  baseMenuItemPropDefs as contextMenuItemPropDefs,
  dialogContentPropDefs,
  baseMenuCheckboxItemPropDefs as dropdownMenuCheckboxItemPropDefs,
  baseMenuContentPropDefs as dropdownMenuContentPropDefs,
  baseMenuItemPropDefs as dropdownMenuItemPropDefs,
  extractLayoutProps,
  extractMarginProps,
  extractPaddingProps,
  flexPropDefs,
  getMatchingGrayColor,
  gridPropDefs,
  hasOwnProperty,
  headingPropDefs,
  highContrastProp,
  hoverCardContentPropDefs,
  baseButtonPropDefs as iconButtonPropDefs,
  insetPropDefs,
  isBreakpointsObject,
  kbdPropDefs,
  layoutPropDefs,
  linkPropDefs,
  marginPropDefs,
  paddingPropDefs,
  popoverContentPropDefs,
  radioGroupPropDefs,
  radiusProp,
  radixColorScales,
  radixColorScalesBright,
  radixColorScalesMetal,
  radixColorScalesRegular,
  radixGetMatchingGrayScale,
  radixGrayScalePure,
  radixGrayScales,
  radixGrayScalesDesaturated,
  scrollAreaPropDefs,
  sectionPropDefs,
  selectContentPropDefs,
  selectRootPropDefs,
  selectTriggerPropDefs,
  separatorPropDefs,
  sliderPropDefs,
  switchPropDefs,
  tableCellPropDefs,
  tableRootPropDefs,
  tableRowPropDefs,
  tabsListPropDefs,
  textAreaPropDefs,
  textFieldPropDefs,
  textFieldSlotPropDefs,
  textPropDefs,
  themeAccentColorsGrouped,
  themeAccentColorsOrdered,
  themeGrayColorsGrouped,
  themePropDefs,
  tooltipPropDefs,
  trimProp,
  updateThemeAppearanceClass,
  useThemeContext,
  weightProp,
  withBreakpoints,
  withLayoutProps,
  withMarginProps,
  withPaddingProps
};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=@radix-ui_themes.js.map
